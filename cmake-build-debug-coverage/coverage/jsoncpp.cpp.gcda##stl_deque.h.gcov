        -:    0:Source:/usr/include/c++/12.2.1/bits/stl_deque.h
        -:    0:Graph:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/external/json/jsoncpp.cpp.gcno
        -:    0:Data:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/external/json/jsoncpp.cpp.gcda
        -:    0:Runs:1
        -:    1:// Deque implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2022 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1994
        -:   28: * Hewlett-Packard Company
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1997
        -:   40: * Silicon Graphics Computer Systems, Inc.
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Silicon Graphics makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: */
        -:   50:
        -:   51:/** @file bits/stl_deque.h
        -:   52: *  This is an internal header file, included by other library headers.
        -:   53: *  Do not attempt to use it directly. @headername{deque}
        -:   54: */
        -:   55:
        -:   56:#ifndef _STL_DEQUE_H
        -:   57:#define _STL_DEQUE_H 1
        -:   58:
        -:   59:#include <bits/concept_check.h>
        -:   60:#include <bits/stl_iterator_base_types.h>
        -:   61:#include <bits/stl_iterator_base_funcs.h>
        -:   62:#if __cplusplus >= 201103L
        -:   63:#include <initializer_list>
        -:   64:#include <bits/stl_uninitialized.h> // for __is_bitwise_relocatable
        -:   65:#endif
        -:   66:#if __cplusplus > 201703L
        -:   67:# include <compare>
        -:   68:#endif
        -:   69:
        -:   70:#include <debug/assertions.h>
        -:   71:
        -:   72:namespace std _GLIBCXX_VISIBILITY(default)
        -:   73:{
        -:   74:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   75:_GLIBCXX_BEGIN_NAMESPACE_CONTAINER
        -:   76:
        -:   77:  /**
        -:   78:   *  @brief This function controls the size of memory nodes.
        -:   79:   *  @param  __size  The size of an element.
        -:   80:   *  @return   The number (not byte size) of elements per node.
        -:   81:   *
        -:   82:   *  This function started off as a compiler kludge from SGI, but
        -:   83:   *  seems to be a useful wrapper around a repeated constant
        -:   84:   *  expression.  The @b 512 is tunable (and no other code needs to
        -:   85:   *  change), but no investigation has been done since inheriting the
        -:   86:   *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what
        -:   87:   *  you are doing, however: changing it breaks the binary
        -:   88:   *  compatibility!!
        -:   89:  */
        -:   90:
        -:   91:#ifndef _GLIBCXX_DEQUE_BUF_SIZE
        -:   92:#define _GLIBCXX_DEQUE_BUF_SIZE 512
        -:   93:#endif
        -:   94:
        -:   95:  _GLIBCXX_CONSTEXPR inline size_t
function _ZSt16__deque_buf_sizem called 0 returned 0% blocks executed 0%
    #####:   96:  __deque_buf_size(size_t __size)
        -:   97:  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
    #####:   98:	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
    %%%%%:   98-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:   98-block  1
    %%%%%:   98-block  2
    %%%%%:   98-block  3
        -:   99:
        -:  100:
        -:  101:  /**
        -:  102:   *  @brief A deque::iterator.
        -:  103:   *
        -:  104:   *  Quite a bit of intelligence here.  Much of the functionality of
        -:  105:   *  deque is actually passed off to this class.  A deque holds two
        -:  106:   *  of these internally, marking its valid range.  Access to
        -:  107:   *  elements is done as offsets of either of those two, relying on
        -:  108:   *  operator overloading in this class.
        -:  109:   *
        -:  110:   *  All the functions are op overloads except for _M_set_node.
        -:  111:  */
        -:  112:  template<typename _Tp, typename _Ref, typename _Ptr>
        -:  113:    struct _Deque_iterator
        -:  114:    {
        -:  115:#if __cplusplus < 201103L
        -:  116:      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>		   iterator;
        -:  117:      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
        -:  118:      typedef _Tp*					   _Elt_pointer;
        -:  119:      typedef _Tp**					   _Map_pointer;
        -:  120:#else
        -:  121:    private:
        -:  122:      template<typename _CvTp>
        -:  123:	using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
        -:  124:    public:
        -:  125:      typedef __iter<_Tp>				   iterator;
        -:  126:      typedef __iter<const _Tp>				   const_iterator;
        -:  127:      typedef __ptr_rebind<_Ptr, _Tp>			   _Elt_pointer;
        -:  128:      typedef __ptr_rebind<_Ptr, _Elt_pointer>		   _Map_pointer;
        -:  129:#endif
        -:  130:
    #####:  131:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  132:      { return __deque_buf_size(sizeof(_Tp)); }
------------------
_ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_E14_S_buffer_sizeEv:
function _ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_E14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  131:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  132:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  132-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_E14_S_buffer_sizeEv:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_E14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  131:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  132:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  132-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_E14_S_buffer_sizeEv:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_E14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  131:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  132:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  132-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_E14_S_buffer_sizeEv:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_E14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  131:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  132:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  132-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_E14_S_buffer_sizeEv:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_E14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  131:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  132:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  132-block  0
Aufruf  0 niemals ausgeführt
------------------
        -:  133:
        -:  134:      typedef std::random_access_iterator_tag	iterator_category;
        -:  135:      typedef _Tp				value_type;
        -:  136:      typedef _Ptr				pointer;
        -:  137:      typedef _Ref				reference;
        -:  138:      typedef size_t				size_type;
        -:  139:      typedef ptrdiff_t				difference_type;
        -:  140:      typedef _Deque_iterator			_Self;
        -:  141:
        -:  142:      _Elt_pointer _M_cur;
        -:  143:      _Elt_pointer _M_first;
        -:  144:      _Elt_pointer _M_last;
        -:  145:      _Map_pointer _M_node;
        -:  146:
        -:  147:      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
        -:  148:      : _M_cur(__x), _M_first(*__y),
        -:  149:	_M_last(*__y + _S_buffer_size()), _M_node(__y) { }
        -:  150:
    #####:  151:      _Deque_iterator() _GLIBCXX_NOEXCEPT
    #####:  152:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
------------------
_ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EC2Ev:
function _ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EC2Ev called 0 returned 0% blocks executed 0%
    #####:  151:      _Deque_iterator() _GLIBCXX_NOEXCEPT
    #####:  152:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EC2Ev:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EC2Ev called 0 returned 0% blocks executed 0%
    #####:  151:      _Deque_iterator() _GLIBCXX_NOEXCEPT
    #####:  152:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EC2Ev:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EC2Ev called 0 returned 0% blocks executed 0%
    #####:  151:      _Deque_iterator() _GLIBCXX_NOEXCEPT
    #####:  152:      : _M_cur(), _M_first(), _M_last(), _M_node() { }
------------------
        -:  153:
        -:  154:#if __cplusplus < 201103L
        -:  155:      // Conversion from iterator to const_iterator.
        -:  156:      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
        -:  157:      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        -:  158:	_M_last(__x._M_last), _M_node(__x._M_node) { }
        -:  159:#else
        -:  160:      // Conversion from iterator to const_iterator.
        -:  161:      template<typename _Iter,
        -:  162:	       typename = _Require<is_same<_Self, const_iterator>,
        -:  163:				   is_same<_Iter, iterator>>>
    #####:  164:       _Deque_iterator(const _Iter& __x) noexcept
    #####:  165:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  166:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_EC2IS_IS2_RS2_PS2_EvEERKT_:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_EC2IS_IS2_RS2_PS2_EvEERKT_ called 0 returned 0% blocks executed 0%
    #####:  164:       _Deque_iterator(const _Iter& __x) noexcept
    #####:  165:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  166:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_EC2IS_IS2_RS2_PS2_EvEERKT_:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_EC2IS_IS2_RS2_PS2_EvEERKT_ called 0 returned 0% blocks executed 0%
    #####:  164:       _Deque_iterator(const _Iter& __x) noexcept
    #####:  165:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  166:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
        -:  167:
    #####:  168:      _Deque_iterator(const _Deque_iterator& __x) noexcept
    #####:  169:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  170:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EC2ERKS5_:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:  168:      _Deque_iterator(const _Deque_iterator& __x) noexcept
    #####:  169:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  170:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EC2ERKS5_:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:  168:      _Deque_iterator(const _Deque_iterator& __x) noexcept
    #####:  169:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  170:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
_ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EC2ERKS5_:
function _ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:  168:      _Deque_iterator(const _Deque_iterator& __x) noexcept
    #####:  169:       : _M_cur(__x._M_cur), _M_first(__x._M_first),
    #####:  170:	 _M_last(__x._M_last), _M_node(__x._M_node) { }
------------------
        -:  171:
        -:  172:      _Deque_iterator& operator=(const _Deque_iterator&) = default;
        -:  173:#endif
        -:  174:
        -:  175:      iterator
        -:  176:      _M_const_cast() const _GLIBCXX_NOEXCEPT
        -:  177:      { return iterator(_M_cur, _M_node); }
        -:  178:
        -:  179:      _GLIBCXX_NODISCARD
        -:  180:      reference
    #####:  181:      operator*() const _GLIBCXX_NOEXCEPT
    #####:  182:      { return *_M_cur; }
------------------
_ZNKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EdeEv:
function _ZNKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EdeEv called 0 returned 0% blocks executed 0%
    #####:  181:      operator*() const _GLIBCXX_NOEXCEPT
    #####:  182:      { return *_M_cur; }
    %%%%%:  182-block  0
------------------
_ZNKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EdeEv:
function _ZNKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EdeEv called 0 returned 0% blocks executed 0%
    #####:  181:      operator*() const _GLIBCXX_NOEXCEPT
    #####:  182:      { return *_M_cur; }
    %%%%%:  182-block  0
------------------
_ZNKSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EdeEv:
function _ZNKSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EdeEv called 0 returned 0% blocks executed 0%
    #####:  181:      operator*() const _GLIBCXX_NOEXCEPT
    #####:  182:      { return *_M_cur; }
    %%%%%:  182-block  0
------------------
_ZNKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_EdeEv:
function _ZNKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_EdeEv called 0 returned 0% blocks executed 0%
    #####:  181:      operator*() const _GLIBCXX_NOEXCEPT
    #####:  182:      { return *_M_cur; }
    %%%%%:  182-block  0
------------------
_ZNKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_EdeEv:
function _ZNKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_EdeEv called 0 returned 0% blocks executed 0%
    #####:  181:      operator*() const _GLIBCXX_NOEXCEPT
    #####:  182:      { return *_M_cur; }
    %%%%%:  182-block  0
------------------
        -:  183:
        -:  184:      _GLIBCXX_NODISCARD
        -:  185:      pointer
        -:  186:      operator->() const _GLIBCXX_NOEXCEPT
        -:  187:      { return _M_cur; }
        -:  188:
        -:  189:      _Self&
    #####:  190:      operator++() _GLIBCXX_NOEXCEPT
        -:  191:      {
    #####:  192:	++_M_cur;
    #####:  193:	if (_M_cur == _M_last)
        -:  194:	  {
    #####:  195:	    _M_set_node(_M_node + 1);
    #####:  196:	    _M_cur = _M_first;
        -:  197:	  }
    #####:  198:	return *this;
        -:  199:      }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EppEv:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EppEv called 0 returned 0% blocks executed 0%
    #####:  190:      operator++() _GLIBCXX_NOEXCEPT
        -:  191:      {
    #####:  192:	++_M_cur;
    #####:  193:	if (_M_cur == _M_last)
    %%%%%:  193-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  194:	  {
    #####:  195:	    _M_set_node(_M_node + 1);
    %%%%%:  195-block  0
Aufruf  0 niemals ausgeführt
    #####:  196:	    _M_cur = _M_first;
        -:  197:	  }
    #####:  198:	return *this;
    %%%%%:  198-block  0
        -:  199:      }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EppEv:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EppEv called 0 returned 0% blocks executed 0%
    #####:  190:      operator++() _GLIBCXX_NOEXCEPT
        -:  191:      {
    #####:  192:	++_M_cur;
    #####:  193:	if (_M_cur == _M_last)
    %%%%%:  193-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  194:	  {
    #####:  195:	    _M_set_node(_M_node + 1);
    %%%%%:  195-block  0
Aufruf  0 niemals ausgeführt
    #####:  196:	    _M_cur = _M_first;
        -:  197:	  }
    #####:  198:	return *this;
    %%%%%:  198-block  0
        -:  199:      }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_EppEv:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_EppEv called 0 returned 0% blocks executed 0%
    #####:  190:      operator++() _GLIBCXX_NOEXCEPT
        -:  191:      {
    #####:  192:	++_M_cur;
    #####:  193:	if (_M_cur == _M_last)
    %%%%%:  193-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  194:	  {
    #####:  195:	    _M_set_node(_M_node + 1);
    %%%%%:  195-block  0
Aufruf  0 niemals ausgeführt
    #####:  196:	    _M_cur = _M_first;
        -:  197:	  }
    #####:  198:	return *this;
    %%%%%:  198-block  0
        -:  199:      }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_EppEv:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_EppEv called 0 returned 0% blocks executed 0%
    #####:  190:      operator++() _GLIBCXX_NOEXCEPT
        -:  191:      {
    #####:  192:	++_M_cur;
    #####:  193:	if (_M_cur == _M_last)
    %%%%%:  193-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  194:	  {
    #####:  195:	    _M_set_node(_M_node + 1);
    %%%%%:  195-block  0
Aufruf  0 niemals ausgeführt
    #####:  196:	    _M_cur = _M_first;
        -:  197:	  }
    #####:  198:	return *this;
    %%%%%:  198-block  0
        -:  199:      }
------------------
        -:  200:
        -:  201:      _Self
        -:  202:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  203:      {
        -:  204:	_Self __tmp = *this;
        -:  205:	++*this;
        -:  206:	return __tmp;
        -:  207:      }
        -:  208:
        -:  209:      _Self&
function _ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_EmmEv called 0 returned 0% blocks executed 0%
    #####:  210:      operator--() _GLIBCXX_NOEXCEPT
        -:  211:      {
    #####:  212:	if (_M_cur == _M_first)
    %%%%%:  212-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  213:	  {
    #####:  214:	    _M_set_node(_M_node - 1);
    %%%%%:  214-block  0
Aufruf  0 niemals ausgeführt
    #####:  215:	    _M_cur = _M_last;
        -:  216:	  }
    #####:  217:	--_M_cur;
    #####:  218:	return *this;
    %%%%%:  218-block  0
        -:  219:      }
        -:  220:
        -:  221:      _Self
        -:  222:      operator--(int) _GLIBCXX_NOEXCEPT
        -:  223:      {
        -:  224:	_Self __tmp = *this;
        -:  225:	--*this;
        -:  226:	return __tmp;
        -:  227:      }
        -:  228:
        -:  229:      _Self&
    #####:  230:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        -:  231:      {
    #####:  232:	const difference_type __offset = __n + (_M_cur - _M_first);
    #####:  233:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
    #####:  234:	  _M_cur += __n;
        -:  235:	else
        -:  236:	  {
    #####:  237:	    const difference_type __node_offset =
    #####:  238:	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
    #####:  239:			   : -difference_type((-__offset - 1)
    #####:  240:					      / _S_buffer_size()) - 1;
    #####:  241:	    _M_set_node(_M_node + __node_offset);
    #####:  242:	    _M_cur = _M_first + (__offset - __node_offset
    #####:  243:				 * difference_type(_S_buffer_size()));
        -:  244:	  }
    #####:  245:	return *this;
        -:  246:      }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EpLEl:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_EpLEl called 0 returned 0% blocks executed 0%
    #####:  230:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        -:  231:      {
    #####:  232:	const difference_type __offset = __n + (_M_cur - _M_first);
    #####:  233:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
    %%%%%:  233-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  233-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  233-block  2
    %%%%%:  233-block  3
    %%%%%:  233-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  234:	  _M_cur += __n;
    %%%%%:  234-block  0
        -:  235:	else
        -:  236:	  {
    #####:  237:	    const difference_type __node_offset =
    #####:  238:	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
    %%%%%:  238-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  238-block  1
Aufruf  2 niemals ausgeführt
    #####:  239:			   : -difference_type((-__offset - 1)
    #####:  240:					      / _S_buffer_size()) - 1;
    %%%%%:  240-block  0
Aufruf  0 niemals ausgeführt
    #####:  241:	    _M_set_node(_M_node + __node_offset);
    %%%%%:  241-block  0
Aufruf  0 niemals ausgeführt
    #####:  242:	    _M_cur = _M_first + (__offset - __node_offset
    #####:  243:				 * difference_type(_S_buffer_size()));
Aufruf  0 niemals ausgeführt
        -:  244:	  }
    #####:  245:	return *this;
    %%%%%:  245-block  0
        -:  246:      }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EpLEl:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_EpLEl called 0 returned 0% blocks executed 0%
    #####:  230:      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
        -:  231:      {
    #####:  232:	const difference_type __offset = __n + (_M_cur - _M_first);
    #####:  233:	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
    %%%%%:  233-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  233-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  233-block  2
    %%%%%:  233-block  3
    %%%%%:  233-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  234:	  _M_cur += __n;
    %%%%%:  234-block  0
        -:  235:	else
        -:  236:	  {
    #####:  237:	    const difference_type __node_offset =
    #####:  238:	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
    %%%%%:  238-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  238-block  1
Aufruf  2 niemals ausgeführt
    #####:  239:			   : -difference_type((-__offset - 1)
    #####:  240:					      / _S_buffer_size()) - 1;
    %%%%%:  240-block  0
Aufruf  0 niemals ausgeführt
    #####:  241:	    _M_set_node(_M_node + __node_offset);
    %%%%%:  241-block  0
Aufruf  0 niemals ausgeführt
    #####:  242:	    _M_cur = _M_first + (__offset - __node_offset
    #####:  243:				 * difference_type(_S_buffer_size()));
Aufruf  0 niemals ausgeführt
        -:  244:	  }
    #####:  245:	return *this;
    %%%%%:  245-block  0
        -:  246:      }
------------------
        -:  247:
        -:  248:      _Self&
        -:  249:      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
        -:  250:      { return *this += -__n; }
        -:  251:
        -:  252:      _GLIBCXX_NODISCARD
        -:  253:      reference
        -:  254:      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
        -:  255:      { return *(*this + __n); }
        -:  256:
        -:  257:      /**
        -:  258:       *  Prepares to traverse new_node.  Sets everything except
        -:  259:       *  _M_cur, which should therefore be set by the caller
        -:  260:       *  immediately afterwards, based on _M_first and _M_last.
        -:  261:       */
        -:  262:      void
    #####:  263:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        -:  264:      {
    #####:  265:	_M_node = __new_node;
    #####:  266:	_M_first = *__new_node;
    #####:  267:	_M_last = _M_first + difference_type(_S_buffer_size());
    #####:  268:      }
------------------
_ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_E11_M_set_nodeEPS4_:
function _ZNSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_E11_M_set_nodeEPS4_ called 0 returned 0% blocks executed 0%
    #####:  263:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        -:  264:      {
    #####:  265:	_M_node = __new_node;
    #####:  266:	_M_first = *__new_node;
    #####:  267:	_M_last = _M_first + difference_type(_S_buffer_size());
    %%%%%:  267-block  0
Aufruf  0 niemals ausgeführt
    #####:  268:      }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_E11_M_set_nodeEPS4_:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_E11_M_set_nodeEPS4_ called 0 returned 0% blocks executed 0%
    #####:  263:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        -:  264:      {
    #####:  265:	_M_node = __new_node;
    #####:  266:	_M_first = *__new_node;
    #####:  267:	_M_last = _M_first + difference_type(_S_buffer_size());
    %%%%%:  267-block  0
Aufruf  0 niemals ausgeführt
    #####:  268:      }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_E11_M_set_nodeEPS4_:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_E11_M_set_nodeEPS4_ called 0 returned 0% blocks executed 0%
    #####:  263:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        -:  264:      {
    #####:  265:	_M_node = __new_node;
    #####:  266:	_M_first = *__new_node;
    #####:  267:	_M_last = _M_first + difference_type(_S_buffer_size());
    %%%%%:  267-block  0
Aufruf  0 niemals ausgeführt
    #####:  268:      }
------------------
_ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_E11_M_set_nodeEPPS2_:
function _ZNSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_E11_M_set_nodeEPPS2_ called 0 returned 0% blocks executed 0%
    #####:  263:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        -:  264:      {
    #####:  265:	_M_node = __new_node;
    #####:  266:	_M_first = *__new_node;
    #####:  267:	_M_last = _M_first + difference_type(_S_buffer_size());
    %%%%%:  267-block  0
Aufruf  0 niemals ausgeführt
    #####:  268:      }
------------------
_ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_E11_M_set_nodeEPPS2_:
function _ZNSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_E11_M_set_nodeEPPS2_ called 0 returned 0% blocks executed 0%
    #####:  263:      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
        -:  264:      {
    #####:  265:	_M_node = __new_node;
    #####:  266:	_M_first = *__new_node;
    #####:  267:	_M_last = _M_first + difference_type(_S_buffer_size());
    %%%%%:  267-block  0
Aufruf  0 niemals ausgeführt
    #####:  268:      }
------------------
        -:  269:
        -:  270:      _GLIBCXX_NODISCARD
        -:  271:      friend bool
    #####:  272:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  273:      { return __x._M_cur == __y._M_cur; }
------------------
_ZSteqRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_ES7_:
function _ZSteqRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  272:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  273:      { return __x._M_cur == __y._M_cur; }
    %%%%%:  273-block  0
------------------
_ZSteqRKSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_ES7_:
function _ZSteqRKSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  272:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  273:      { return __x._M_cur == __y._M_cur; }
    %%%%%:  273-block  0
------------------
_ZSteqRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_ES8_:
function _ZSteqRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_ES8_ called 0 returned 0% blocks executed 0%
    #####:  272:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  273:      { return __x._M_cur == __y._M_cur; }
    %%%%%:  273-block  0
------------------
_ZSteqRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_ES7_:
function _ZSteqRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  272:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  273:      { return __x._M_cur == __y._M_cur; }
    %%%%%:  273-block  0
------------------
_ZSteqRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_ES8_:
function _ZSteqRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_ES8_ called 0 returned 0% blocks executed 0%
    #####:  272:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  273:      { return __x._M_cur == __y._M_cur; }
    %%%%%:  273-block  0
------------------
        -:  274:
        -:  275:      // Note: we also provide overloads whose operands are of the same type in
        -:  276:      // order to avoid ambiguous overload resolution when std::rel_ops
        -:  277:      // operators are in scope (for additional details, see libstdc++/3628)
        -:  278:      template<typename _RefR, typename _PtrR>
        -:  279:	_GLIBCXX_NODISCARD
        -:  280:	friend bool
        -:  281:	operator==(const _Self& __x,
        -:  282:		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  283:	_GLIBCXX_NOEXCEPT
        -:  284:	{ return __x._M_cur == __y._M_cur; }
        -:  285:
        -:  286:#if __cpp_lib_three_way_comparison
        -:  287:      [[nodiscard]]
        -:  288:      friend strong_ordering
        -:  289:      operator<=>(const _Self& __x, const _Self& __y) noexcept
        -:  290:      {
        -:  291:	if (const auto __cmp = __x._M_node <=> __y._M_node; __cmp != 0)
        -:  292:	  return __cmp;
        -:  293:	return __x._M_cur <=> __y._M_cur;
        -:  294:      }
        -:  295:#else
        -:  296:      _GLIBCXX_NODISCARD
        -:  297:      friend bool
    #####:  298:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  299:      { return !(__x == __y); }
------------------
_ZStneRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_ES7_:
function _ZStneRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  298:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  299:      { return !(__x == __y); }
    %%%%%:  299-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZStneRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_ES7_:
function _ZStneRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  298:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  299:      { return !(__x == __y); }
    %%%%%:  299-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZStneRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_ES8_:
function _ZStneRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERKS2_PS3_ES8_ called 0 returned 0% blocks executed 0%
    #####:  298:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  299:      { return !(__x == __y); }
    %%%%%:  299-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZStneRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_ES8_:
function _ZStneRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERKS2_PS3_ES8_ called 0 returned 0% blocks executed 0%
    #####:  298:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    #####:  299:      { return !(__x == __y); }
    %%%%%:  299-block  0
Aufruf  0 niemals ausgeführt
------------------
        -:  300:
        -:  301:      template<typename _RefR, typename _PtrR>
        -:  302:	_GLIBCXX_NODISCARD
        -:  303:	friend bool
        -:  304:	operator!=(const _Self& __x,
        -:  305:		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  306:	_GLIBCXX_NOEXCEPT
        -:  307:	{ return !(__x == __y); }
        -:  308:
        -:  309:      _GLIBCXX_NODISCARD
        -:  310:      friend bool
        -:  311:      operator<(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  312:      {
        -:  313:	return (__x._M_node == __y._M_node)
        -:  314:	  ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);
        -:  315:      }
        -:  316:
        -:  317:      template<typename _RefR, typename _PtrR>
        -:  318:	_GLIBCXX_NODISCARD
        -:  319:	friend bool
        -:  320:	operator<(const _Self& __x,
        -:  321:		  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  322:	_GLIBCXX_NOEXCEPT
        -:  323:	{
        -:  324:	  return (__x._M_node == __y._M_node)
        -:  325:	    ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);
        -:  326:	}
        -:  327:
        -:  328:      _GLIBCXX_NODISCARD
        -:  329:      friend bool
        -:  330:      operator>(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  331:      { return __y < __x; }
        -:  332:
        -:  333:      template<typename _RefR, typename _PtrR>
        -:  334:	_GLIBCXX_NODISCARD
        -:  335:	friend bool
        -:  336:	operator>(const _Self& __x,
        -:  337:		  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  338:	_GLIBCXX_NOEXCEPT
        -:  339:	{ return __y < __x; }
        -:  340:
        -:  341:      _GLIBCXX_NODISCARD
        -:  342:      friend bool
        -:  343:      operator<=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  344:      { return !(__y < __x); }
        -:  345:
        -:  346:      template<typename _RefR, typename _PtrR>
        -:  347:	_GLIBCXX_NODISCARD
        -:  348:	friend bool
        -:  349:	operator<=(const _Self& __x,
        -:  350:		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  351:	_GLIBCXX_NOEXCEPT
        -:  352:	{ return !(__y < __x); }
        -:  353:
        -:  354:      _GLIBCXX_NODISCARD
        -:  355:      friend bool
        -:  356:      operator>=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  357:      { return !(__x < __y); }
        -:  358:
        -:  359:      template<typename _RefR, typename _PtrR>
        -:  360:	_GLIBCXX_NODISCARD
        -:  361:	friend bool
        -:  362:	operator>=(const _Self& __x,
        -:  363:		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  364:	_GLIBCXX_NOEXCEPT
        -:  365:	{ return !(__x < __y); }
        -:  366:#endif // three-way comparison
        -:  367:
        -:  368:      _GLIBCXX_NODISCARD
        -:  369:      friend difference_type
    #####:  370:      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  371:      {
    #####:  372:	return difference_type(_S_buffer_size())
    #####:  373:	  * (__x._M_node - __y._M_node - bool(__x._M_node))
    #####:  374:	  + (__x._M_cur - __x._M_first)
    #####:  375:	  + (__y._M_last - __y._M_cur);
        -:  376:      }
------------------
_ZStmiRKSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_ES7_:
function _ZStmiRKSt15_Deque_iteratorIPN4Json5ValueERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  370:      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  371:      {
    #####:  372:	return difference_type(_S_buffer_size())
    %%%%%:  372-block  0
Aufruf  0 niemals ausgeführt
    #####:  373:	  * (__x._M_node - __y._M_node - bool(__x._M_node))
    #####:  374:	  + (__x._M_cur - __x._M_first)
    #####:  375:	  + (__y._M_last - __y._M_cur);
        -:  376:      }
------------------
_ZStmiRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_ES7_:
function _ZStmiRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  370:      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  371:      {
    #####:  372:	return difference_type(_S_buffer_size())
    %%%%%:  372-block  0
Aufruf  0 niemals ausgeführt
    #####:  373:	  * (__x._M_node - __y._M_node - bool(__x._M_node))
    #####:  374:	  + (__x._M_cur - __x._M_first)
    #####:  375:	  + (__y._M_last - __y._M_cur);
        -:  376:      }
------------------
_ZStmiRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_ES7_:
function _ZStmiRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_ES7_ called 0 returned 0% blocks executed 0%
    #####:  370:      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
        -:  371:      {
    #####:  372:	return difference_type(_S_buffer_size())
    %%%%%:  372-block  0
Aufruf  0 niemals ausgeführt
    #####:  373:	  * (__x._M_node - __y._M_node - bool(__x._M_node))
    #####:  374:	  + (__x._M_cur - __x._M_first)
    #####:  375:	  + (__y._M_last - __y._M_cur);
        -:  376:      }
------------------
        -:  377:
        -:  378:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  379:      // According to the resolution of DR179 not only the various comparison
        -:  380:      // operators but also operator- must accept mixed iterator/const_iterator
        -:  381:      // parameters.
        -:  382:      template<typename _RefR, typename _PtrR>
        -:  383:	_GLIBCXX_NODISCARD
        -:  384:	friend difference_type
        -:  385:	operator-(const _Self& __x,
        -:  386:		  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
        -:  387:	_GLIBCXX_NOEXCEPT
        -:  388:	{
        -:  389:	  return difference_type(_S_buffer_size())
        -:  390:	    * (__x._M_node - __y._M_node - bool(__x._M_node))
        -:  391:	    + (__x._M_cur - __x._M_first)
        -:  392:	    + (__y._M_last - __y._M_cur);
        -:  393:	}
        -:  394:
        -:  395:      _GLIBCXX_NODISCARD
        -:  396:      friend _Self
    #####:  397:      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
        -:  398:      {
    #####:  399:	_Self __tmp = __x;
    #####:  400:	__tmp += __n;
    #####:  401:	return __tmp;
        -:  402:      }
------------------
_ZStplRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_El:
function _ZStplRKSt15_Deque_iteratorIN4Json9OurReader9ErrorInfoERS2_PS2_El called 0 returned 0% blocks executed 0%
    #####:  397:      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
        -:  398:      {
    #####:  399:	_Self __tmp = __x;
    %%%%%:  399-block  0
Aufruf  0 niemals ausgeführt
    #####:  400:	__tmp += __n;
Aufruf  0 niemals ausgeführt
    #####:  401:	return __tmp;
        -:  402:      }
------------------
_ZStplRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_El:
function _ZStplRKSt15_Deque_iteratorIN4Json6Reader9ErrorInfoERS2_PS2_El called 0 returned 0% blocks executed 0%
    #####:  397:      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
        -:  398:      {
    #####:  399:	_Self __tmp = __x;
    %%%%%:  399-block  0
Aufruf  0 niemals ausgeführt
    #####:  400:	__tmp += __n;
Aufruf  0 niemals ausgeführt
    #####:  401:	return __tmp;
        -:  402:      }
------------------
        -:  403:
        -:  404:      _GLIBCXX_NODISCARD
        -:  405:      friend _Self
        -:  406:      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
        -:  407:      {
        -:  408:	_Self __tmp = __x;
        -:  409:	__tmp -= __n;
        -:  410:	return __tmp;
        -:  411:      }
        -:  412:
        -:  413:      _GLIBCXX_NODISCARD
        -:  414:      friend _Self
        -:  415:      operator+(difference_type __n, const _Self& __x) _GLIBCXX_NOEXCEPT
        -:  416:      { return __x + __n; }
        -:  417:    };
        -:  418:
        -:  419:  /**
        -:  420:   *  Deque base class.  This class provides the unified face for %deque's
        -:  421:   *  allocation.  This class's constructor and destructor allocate and
        -:  422:   *  deallocate (but do not initialize) storage.  This makes %exception
        -:  423:   *  safety easier.
        -:  424:   *
        -:  425:   *  Nothing in this class ever constructs or destroys an actual Tp element.
        -:  426:   *  (Deque handles that itself.)  Only/All memory management is performed
        -:  427:   *  here.
        -:  428:  */
        -:  429:  template<typename _Tp, typename _Alloc>
        -:  430:    class _Deque_base
        -:  431:    {
        -:  432:    protected:
        -:  433:      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        -:  434:	rebind<_Tp>::other _Tp_alloc_type;
        -:  435:      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	 _Alloc_traits;
        -:  436:
        -:  437:#if __cplusplus < 201103L
        -:  438:      typedef _Tp*					_Ptr;
        -:  439:      typedef const _Tp*				_Ptr_const;
        -:  440:#else
        -:  441:      typedef typename _Alloc_traits::pointer		_Ptr;
        -:  442:      typedef typename _Alloc_traits::const_pointer	_Ptr_const;
        -:  443:#endif
        -:  444:
        -:  445:      typedef typename _Alloc_traits::template rebind<_Ptr>::other
        -:  446:	_Map_alloc_type;
        -:  447:      typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;
        -:  448:
        -:  449:      typedef _Alloc		  allocator_type;
        -:  450:
        -:  451:      allocator_type
        -:  452:      get_allocator() const _GLIBCXX_NOEXCEPT
        -:  453:      { return allocator_type(_M_get_Tp_allocator()); }
        -:  454:
        -:  455:      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>	  iterator;
        -:  456:      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;
        -:  457:
    #####:  458:      _Deque_base()
    #####:  459:      : _M_impl()
    #####:  460:      { _M_initialize_map(0); }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EEC2Ev:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:  458:      _Deque_base()
    #####:  459:      : _M_impl()
    %%%%%:  459-block  0
Aufruf  0 niemals ausgeführt
    #####:  460:      { _M_initialize_map(0); }
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  460-block  0
    $$$$$:  460-block  1
Aufruf  3 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EEC2Ev:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:  458:      _Deque_base()
    #####:  459:      : _M_impl()
    %%%%%:  459-block  0
Aufruf  0 niemals ausgeführt
    #####:  460:      { _M_initialize_map(0); }
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  460-block  0
    $$$$$:  460-block  1
Aufruf  3 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EEC2Ev:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:  458:      _Deque_base()
    #####:  459:      : _M_impl()
    %%%%%:  459-block  0
Aufruf  0 niemals ausgeführt
    #####:  460:      { _M_initialize_map(0); }
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  460-block  0
    $$$$$:  460-block  1
Aufruf  3 niemals ausgeführt
------------------
        -:  461:
        -:  462:      _Deque_base(size_t __num_elements)
        -:  463:      : _M_impl()
        -:  464:      { _M_initialize_map(__num_elements); }
        -:  465:
        -:  466:      _Deque_base(const allocator_type& __a, size_t __num_elements)
        -:  467:      : _M_impl(__a)
        -:  468:      { _M_initialize_map(__num_elements); }
        -:  469:
        -:  470:      _Deque_base(const allocator_type& __a)
        -:  471:      : _M_impl(__a)
        -:  472:      { /* Caller must initialize map. */ }
        -:  473:
        -:  474:#if __cplusplus >= 201103L
        -:  475:      _Deque_base(_Deque_base&& __x)
        -:  476:      : _M_impl(std::move(__x._M_get_Tp_allocator()))
        -:  477:      {
        -:  478:	_M_initialize_map(0);
        -:  479:	if (__x._M_impl._M_map)
        -:  480:	  this->_M_impl._M_swap_data(__x._M_impl);
        -:  481:      }
        -:  482:
        -:  483:      _Deque_base(_Deque_base&& __x, const allocator_type& __a)
        -:  484:      : _M_impl(std::move(__x._M_impl), _Tp_alloc_type(__a))
        -:  485:      { __x._M_initialize_map(0); }
        -:  486:
        -:  487:      _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_t __n)
        -:  488:      : _M_impl(__a)
        -:  489:      {
        -:  490:	if (__x.get_allocator() == __a)
        -:  491:	  {
        -:  492:	    if (__x._M_impl._M_map)
        -:  493:	      {
        -:  494:		_M_initialize_map(0);
        -:  495:		this->_M_impl._M_swap_data(__x._M_impl);
        -:  496:	      }
        -:  497:	  }
        -:  498:	else
        -:  499:	  {
        -:  500:	    _M_initialize_map(__n);
        -:  501:	  }
        -:  502:      }
        -:  503:#endif
        -:  504:
        -:  505:      ~_Deque_base() _GLIBCXX_NOEXCEPT;
        -:  506:
        -:  507:      typedef typename iterator::_Map_pointer _Map_pointer;
        -:  508:
        -:  509:      struct _Deque_impl_data
        -:  510:      {
        -:  511:	_Map_pointer _M_map;
        -:  512:	size_t _M_map_size;
        -:  513:	iterator _M_start;
        -:  514:	iterator _M_finish;
        -:  515:
    #####:  516:	_Deque_impl_data() _GLIBCXX_NOEXCEPT
    #####:  517:	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    #####:  518:	{ }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE16_Deque_impl_dataC2Ev:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE16_Deque_impl_dataC2Ev called 0 returned 0% blocks executed 0%
    #####:  516:	_Deque_impl_data() _GLIBCXX_NOEXCEPT
    #####:  517:	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    %%%%%:  517-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  518:	{ }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE16_Deque_impl_dataC2Ev:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE16_Deque_impl_dataC2Ev called 0 returned 0% blocks executed 0%
    #####:  516:	_Deque_impl_data() _GLIBCXX_NOEXCEPT
    #####:  517:	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    %%%%%:  517-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  518:	{ }
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE16_Deque_impl_dataC2Ev:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE16_Deque_impl_dataC2Ev called 0 returned 0% blocks executed 0%
    #####:  516:	_Deque_impl_data() _GLIBCXX_NOEXCEPT
    #####:  517:	: _M_map(), _M_map_size(), _M_start(), _M_finish()
    %%%%%:  517-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  518:	{ }
------------------
        -:  519:
        -:  520:#if __cplusplus >= 201103L
        -:  521:	_Deque_impl_data(const _Deque_impl_data&) = default;
        -:  522:	_Deque_impl_data&
        -:  523:	operator=(const _Deque_impl_data&) = default;
        -:  524:
        -:  525:	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
        -:  526:	: _Deque_impl_data(__x)
        -:  527:	{ __x = _Deque_impl_data(); }
        -:  528:#endif
        -:  529:
        -:  530:	void
        -:  531:	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
        -:  532:	{
        -:  533:	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
        -:  534:	  // information used by TBAA.
        -:  535:	  std::swap(*this, __x);
        -:  536:	}
        -:  537:      };
        -:  538:
        -:  539:      // This struct encapsulates the implementation of the std::deque
        -:  540:      // standard container and at the same time makes use of the EBO
        -:  541:      // for empty allocators.
        -:  542:      struct _Deque_impl
        -:  543:      : public _Tp_alloc_type, public _Deque_impl_data
        -:  544:      {
    #####:  545:	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
        -:  546:	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
    #####:  547:	: _Tp_alloc_type()
    #####:  548:	{ }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE11_Deque_implC2Ev:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE11_Deque_implC2Ev called 0 returned 0% blocks executed 0%
    #####:  545:	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
        -:  546:	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
    #####:  547:	: _Tp_alloc_type()
    %%%%%:  547-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  548:	{ }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE11_Deque_implC2Ev:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE11_Deque_implC2Ev called 0 returned 0% blocks executed 0%
    #####:  545:	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
        -:  546:	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
    #####:  547:	: _Tp_alloc_type()
    %%%%%:  547-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  548:	{ }
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE11_Deque_implC2Ev:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE11_Deque_implC2Ev called 0 returned 0% blocks executed 0%
    #####:  545:	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
        -:  546:	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
    #####:  547:	: _Tp_alloc_type()
    %%%%%:  547-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  548:	{ }
------------------
        -:  549:
        -:  550:	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        -:  551:	: _Tp_alloc_type(__a)
        -:  552:	{ }
        -:  553:
        -:  554:#if __cplusplus >= 201103L
        -:  555:	_Deque_impl(_Deque_impl&&) = default;
        -:  556:
        -:  557:	_Deque_impl(_Tp_alloc_type&& __a) noexcept
        -:  558:	: _Tp_alloc_type(std::move(__a))
        -:  559:	{ }
        -:  560:
        -:  561:	_Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)
        -:  562:	: _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))
        -:  563:	{ }
        -:  564:#endif
        -:  565:      };
        -:  566:
        -:  567:      _Tp_alloc_type&
    #####:  568:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    #####:  569:      { return this->_M_impl; }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  568:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    #####:  569:      { return this->_M_impl; }
    %%%%%:  569-block  0
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  568:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    #####:  569:      { return this->_M_impl; }
    %%%%%:  569-block  0
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE19_M_get_Tp_allocatorEv:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE19_M_get_Tp_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  568:      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    #####:  569:      { return this->_M_impl; }
    %%%%%:  569-block  0
------------------
        -:  570:
        -:  571:      const _Tp_alloc_type&
    #####:  572:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    #####:  573:      { return this->_M_impl; }
------------------
_ZNKSt11_Deque_baseIPN4Json5ValueESaIS2_EE19_M_get_Tp_allocatorEv:
function _ZNKSt11_Deque_baseIPN4Json5ValueESaIS2_EE19_M_get_Tp_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  572:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    #####:  573:      { return this->_M_impl; }
    %%%%%:  573-block  0
------------------
_ZNKSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv:
function _ZNKSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  572:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    #####:  573:      { return this->_M_impl; }
    %%%%%:  573-block  0
------------------
_ZNKSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv:
function _ZNKSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE19_M_get_Tp_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  572:      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    #####:  573:      { return this->_M_impl; }
    %%%%%:  573-block  0
------------------
        -:  574:
        -:  575:      _Map_alloc_type
    #####:  576:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
    #####:  577:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
------------------
_ZNKSt11_Deque_baseIPN4Json5ValueESaIS2_EE20_M_get_map_allocatorEv:
function _ZNKSt11_Deque_baseIPN4Json5ValueESaIS2_EE20_M_get_map_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  576:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
    #####:  577:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
    %%%%%:  577-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZNKSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE20_M_get_map_allocatorEv:
function _ZNKSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE20_M_get_map_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  576:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
    #####:  577:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
    %%%%%:  577-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZNKSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE20_M_get_map_allocatorEv:
function _ZNKSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE20_M_get_map_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  576:      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
    #####:  577:      { return _Map_alloc_type(_M_get_Tp_allocator()); }
    %%%%%:  577-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
        -:  578:
        -:  579:      _Ptr
    #####:  580:      _M_allocate_node()
        -:  581:      {
        -:  582:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  583:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
        -:  584:      }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE16_M_allocate_nodeEv:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE16_M_allocate_nodeEv called 0 returned 0% blocks executed 0%
    #####:  580:      _M_allocate_node()
        -:  581:      {
        -:  582:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  583:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
    %%%%%:  583-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -:  584:      }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE16_M_allocate_nodeEv:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE16_M_allocate_nodeEv called 0 returned 0% blocks executed 0%
    #####:  580:      _M_allocate_node()
        -:  581:      {
        -:  582:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  583:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
    %%%%%:  583-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -:  584:      }
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE16_M_allocate_nodeEv:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE16_M_allocate_nodeEv called 0 returned 0% blocks executed 0%
    #####:  580:      _M_allocate_node()
        -:  581:      {
        -:  582:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  583:	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
    %%%%%:  583-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -:  584:      }
------------------
        -:  585:
        -:  586:      void
    #####:  587:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
        -:  588:      {
        -:  589:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  590:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
    #####:  591:      }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE18_M_deallocate_nodeEPS2_:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE18_M_deallocate_nodeEPS2_ called 0 returned 0% blocks executed 0%
    #####:  587:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
        -:  588:      {
        -:  589:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  590:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
    %%%%%:  590-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  591:      }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE18_M_deallocate_nodeEPS2_:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE18_M_deallocate_nodeEPS2_ called 0 returned 0% blocks executed 0%
    #####:  587:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
        -:  588:      {
        -:  589:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  590:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
    %%%%%:  590-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  591:      }
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE18_M_deallocate_nodeEPS2_:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE18_M_deallocate_nodeEPS2_ called 0 returned 0% blocks executed 0%
    #####:  587:      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
        -:  588:      {
        -:  589:	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
    #####:  590:	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
    %%%%%:  590-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:  591:      }
------------------
        -:  592:
        -:  593:      _Map_pointer
    #####:  594:      _M_allocate_map(size_t __n)
        -:  595:      {
    #####:  596:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    #####:  597:	return _Map_alloc_traits::allocate(__map_alloc, __n);
    #####:  598:      }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE15_M_allocate_mapEm:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE15_M_allocate_mapEm called 0 returned 0% blocks executed 0%
    #####:  594:      _M_allocate_map(size_t __n)
        -:  595:      {
    #####:  596:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    %%%%%:  596-block  0
Aufruf  0 niemals ausgeführt
    #####:  597:	return _Map_alloc_traits::allocate(__map_alloc, __n);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  597-block  0
    %%%%%:  597-block  1
    #####:  598:      }
    %%%%%:  598-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  598-block  1
Aufruf  1 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_allocate_mapEm:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_allocate_mapEm called 0 returned 0% blocks executed 0%
    #####:  594:      _M_allocate_map(size_t __n)
        -:  595:      {
    #####:  596:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    %%%%%:  596-block  0
Aufruf  0 niemals ausgeführt
    #####:  597:	return _Map_alloc_traits::allocate(__map_alloc, __n);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  597-block  0
    %%%%%:  597-block  1
    #####:  598:      }
    %%%%%:  598-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  598-block  1
Aufruf  1 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE15_M_allocate_mapEm:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE15_M_allocate_mapEm called 0 returned 0% blocks executed 0%
    #####:  594:      _M_allocate_map(size_t __n)
        -:  595:      {
    #####:  596:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    %%%%%:  596-block  0
Aufruf  0 niemals ausgeführt
    #####:  597:	return _Map_alloc_traits::allocate(__map_alloc, __n);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  597-block  0
    %%%%%:  597-block  1
    #####:  598:      }
    %%%%%:  598-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  598-block  1
Aufruf  1 niemals ausgeführt
------------------
        -:  599:
        -:  600:      void
    #####:  601:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
        -:  602:      {
    #####:  603:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    #####:  604:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
    #####:  605:      }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE17_M_deallocate_mapEPPS2_m:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE17_M_deallocate_mapEPPS2_m called 0 returned 0% blocks executed 0%
    #####:  601:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
        -:  602:      {
    #####:  603:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    %%%%%:  603-block  0
Aufruf  0 niemals ausgeführt
    #####:  604:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
Aufruf  0 niemals ausgeführt
    #####:  605:      }
Aufruf  0 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE17_M_deallocate_mapEPPS2_m:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE17_M_deallocate_mapEPPS2_m called 0 returned 0% blocks executed 0%
    #####:  601:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
        -:  602:      {
    #####:  603:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    %%%%%:  603-block  0
Aufruf  0 niemals ausgeführt
    #####:  604:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
Aufruf  0 niemals ausgeführt
    #####:  605:      }
Aufruf  0 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE17_M_deallocate_mapEPPS2_m:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE17_M_deallocate_mapEPPS2_m called 0 returned 0% blocks executed 0%
    #####:  601:      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
        -:  602:      {
    #####:  603:	_Map_alloc_type __map_alloc = _M_get_map_allocator();
    %%%%%:  603-block  0
Aufruf  0 niemals ausgeführt
    #####:  604:	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
Aufruf  0 niemals ausgeführt
    #####:  605:      }
Aufruf  0 niemals ausgeführt
------------------
        -:  606:
        -:  607:      void _M_initialize_map(size_t);
        -:  608:      void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
        -:  609:      void _M_destroy_nodes(_Map_pointer __nstart,
        -:  610:			    _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT;
        -:  611:      enum { _S_initial_map_size = 8 };
        -:  612:
        -:  613:      _Deque_impl _M_impl;
        -:  614:    };
        -:  615:
        -:  616:  template<typename _Tp, typename _Alloc>
    #####:  617:    _Deque_base<_Tp, _Alloc>::
        -:  618:    ~_Deque_base() _GLIBCXX_NOEXCEPT
        -:  619:    {
    #####:  620:      if (this->_M_impl._M_map)
        -:  621:	{
    #####:  622:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
    #####:  623:			   this->_M_impl._M_finish._M_node + 1);
    #####:  624:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
        -:  625:	}
    #####:  626:    }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EED2Ev:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EED2Ev called 0 returned 0% blocks executed 0%
    #####:  617:    _Deque_base<_Tp, _Alloc>::
        -:  618:    ~_Deque_base() _GLIBCXX_NOEXCEPT
        -:  619:    {
    #####:  620:      if (this->_M_impl._M_map)
    %%%%%:  620-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  621:	{
    #####:  622:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
    #####:  623:			   this->_M_impl._M_finish._M_node + 1);
    %%%%%:  623-block  0
Aufruf  0 niemals ausgeführt
    #####:  624:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
        -:  625:	}
    #####:  626:    }
    %%%%%:  626-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EED2Ev:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EED2Ev called 0 returned 0% blocks executed 0%
    #####:  617:    _Deque_base<_Tp, _Alloc>::
        -:  618:    ~_Deque_base() _GLIBCXX_NOEXCEPT
        -:  619:    {
    #####:  620:      if (this->_M_impl._M_map)
    %%%%%:  620-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  621:	{
    #####:  622:	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
    #####:  623:			   this->_M_impl._M_finish._M_node + 1);
    %%%%%:  623-block  0
Aufruf  0 niemals ausgeführt
    #####:  624:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
        -:  625:	}
    #####:  626:    }
    %%%%%:  626-block  0
Aufruf  0 niemals ausgeführt
------------------
        -:  627:
        -:  628:  /**
        -:  629:   *  @brief Layout storage.
        -:  630:   *  @param  __num_elements  The count of T's for which to allocate space
        -:  631:   *                          at first.
        -:  632:   *  @return   Nothing.
        -:  633:   *
        -:  634:   *  The initial underlying memory layout is a bit complicated...
        -:  635:  */
        -:  636:  template<typename _Tp, typename _Alloc>
        -:  637:    void
    #####:  638:    _Deque_base<_Tp, _Alloc>::
        -:  639:    _M_initialize_map(size_t __num_elements)
        -:  640:    {
    #####:  641:      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
        -:  642:				  + 1);
        -:  643:
    #####:  644:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
    #####:  645:					   size_t(__num_nodes + 2));
    #####:  646:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
        -:  647:
        -:  648:      // For "small" maps (needing less than _M_map_size nodes), allocation
        -:  649:      // starts in the middle elements and grows outwards.  So nstart may be
        -:  650:      // the beginning of _M_map, but for small maps it may be as far in as
        -:  651:      // _M_map+3.
        -:  652:
    #####:  653:      _Map_pointer __nstart = (this->_M_impl._M_map
    #####:  654:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
    #####:  655:      _Map_pointer __nfinish = __nstart + __num_nodes;
        -:  656:
        -:  657:      __try
    #####:  658:	{ _M_create_nodes(__nstart, __nfinish); }
    =====:  659:      __catch(...)
        -:  660:	{
    =====:  661:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
    =====:  662:	  this->_M_impl._M_map = _Map_pointer();
    =====:  663:	  this->_M_impl._M_map_size = 0;
    =====:  664:	  __throw_exception_again;
        -:  665:	}
        -:  666:
    #####:  667:      this->_M_impl._M_start._M_set_node(__nstart);
    #####:  668:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
    #####:  669:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
    #####:  670:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
    #####:  671:					+ __num_elements
    #####:  672:					% __deque_buf_size(sizeof(_Tp)));
    #####:  673:    }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE17_M_initialize_mapEm:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE17_M_initialize_mapEm called 0 returned 0% blocks executed 0%
    #####:  638:    _Deque_base<_Tp, _Alloc>::
        -:  639:    _M_initialize_map(size_t __num_elements)
        -:  640:    {
    #####:  641:      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
    %%%%%:  641-block  0
Aufruf  0 niemals ausgeführt
        -:  642:				  + 1);
        -:  643:
    #####:  644:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
    #####:  645:					   size_t(__num_nodes + 2));
Aufruf  0 niemals ausgeführt
    #####:  646:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
        -:  647:
        -:  648:      // For "small" maps (needing less than _M_map_size nodes), allocation
        -:  649:      // starts in the middle elements and grows outwards.  So nstart may be
        -:  650:      // the beginning of _M_map, but for small maps it may be as far in as
        -:  651:      // _M_map+3.
        -:  652:
    #####:  653:      _Map_pointer __nstart = (this->_M_impl._M_map
    #####:  654:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
    #####:  655:      _Map_pointer __nfinish = __nstart + __num_nodes;
        -:  656:
        -:  657:      __try
    #####:  658:	{ _M_create_nodes(__nstart, __nfinish); }
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    =====:  659:      __catch(...)
    $$$$$:  659-block  0
    $$$$$:  659-block  1
Aufruf  0 niemals ausgeführt
    $$$$$:  659-block  2
Aufruf  1 niemals ausgeführt
        -:  660:	{
    =====:  661:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
    =====:  662:	  this->_M_impl._M_map = _Map_pointer();
    =====:  663:	  this->_M_impl._M_map_size = 0;
    =====:  664:	  __throw_exception_again;
Aufruf  0 niemals ausgeführt
        -:  665:	}
        -:  666:
    #####:  667:      this->_M_impl._M_start._M_set_node(__nstart);
    %%%%%:  667-block  0
Aufruf  0 niemals ausgeführt
    #####:  668:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
Aufruf  0 niemals ausgeführt
    #####:  669:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
    #####:  670:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
    #####:  671:					+ __num_elements
    #####:  672:					% __deque_buf_size(sizeof(_Tp)));
Aufruf  0 niemals ausgeführt
    #####:  673:    }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE17_M_initialize_mapEm:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE17_M_initialize_mapEm called 0 returned 0% blocks executed 0%
    #####:  638:    _Deque_base<_Tp, _Alloc>::
        -:  639:    _M_initialize_map(size_t __num_elements)
        -:  640:    {
    #####:  641:      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
    %%%%%:  641-block  0
Aufruf  0 niemals ausgeführt
        -:  642:				  + 1);
        -:  643:
    #####:  644:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
    #####:  645:					   size_t(__num_nodes + 2));
Aufruf  0 niemals ausgeführt
    #####:  646:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
        -:  647:
        -:  648:      // For "small" maps (needing less than _M_map_size nodes), allocation
        -:  649:      // starts in the middle elements and grows outwards.  So nstart may be
        -:  650:      // the beginning of _M_map, but for small maps it may be as far in as
        -:  651:      // _M_map+3.
        -:  652:
    #####:  653:      _Map_pointer __nstart = (this->_M_impl._M_map
    #####:  654:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
    #####:  655:      _Map_pointer __nfinish = __nstart + __num_nodes;
        -:  656:
        -:  657:      __try
    #####:  658:	{ _M_create_nodes(__nstart, __nfinish); }
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    =====:  659:      __catch(...)
    $$$$$:  659-block  0
    $$$$$:  659-block  1
Aufruf  0 niemals ausgeführt
    $$$$$:  659-block  2
Aufruf  1 niemals ausgeführt
        -:  660:	{
    =====:  661:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
    =====:  662:	  this->_M_impl._M_map = _Map_pointer();
    =====:  663:	  this->_M_impl._M_map_size = 0;
    =====:  664:	  __throw_exception_again;
Aufruf  0 niemals ausgeführt
        -:  665:	}
        -:  666:
    #####:  667:      this->_M_impl._M_start._M_set_node(__nstart);
    %%%%%:  667-block  0
Aufruf  0 niemals ausgeführt
    #####:  668:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
Aufruf  0 niemals ausgeführt
    #####:  669:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
    #####:  670:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
    #####:  671:					+ __num_elements
    #####:  672:					% __deque_buf_size(sizeof(_Tp)));
Aufruf  0 niemals ausgeführt
    #####:  673:    }
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE17_M_initialize_mapEm:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE17_M_initialize_mapEm called 0 returned 0% blocks executed 0%
    #####:  638:    _Deque_base<_Tp, _Alloc>::
        -:  639:    _M_initialize_map(size_t __num_elements)
        -:  640:    {
    #####:  641:      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
    %%%%%:  641-block  0
Aufruf  0 niemals ausgeführt
        -:  642:				  + 1);
        -:  643:
    #####:  644:      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
    #####:  645:					   size_t(__num_nodes + 2));
Aufruf  0 niemals ausgeführt
    #####:  646:      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
        -:  647:
        -:  648:      // For "small" maps (needing less than _M_map_size nodes), allocation
        -:  649:      // starts in the middle elements and grows outwards.  So nstart may be
        -:  650:      // the beginning of _M_map, but for small maps it may be as far in as
        -:  651:      // _M_map+3.
        -:  652:
    #####:  653:      _Map_pointer __nstart = (this->_M_impl._M_map
    #####:  654:			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
    #####:  655:      _Map_pointer __nfinish = __nstart + __num_nodes;
        -:  656:
        -:  657:      __try
    #####:  658:	{ _M_create_nodes(__nstart, __nfinish); }
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    =====:  659:      __catch(...)
    $$$$$:  659-block  0
    $$$$$:  659-block  1
Aufruf  0 niemals ausgeführt
    $$$$$:  659-block  2
Aufruf  1 niemals ausgeführt
        -:  660:	{
    =====:  661:	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
Aufruf  0 niemals ausgeführt
    =====:  662:	  this->_M_impl._M_map = _Map_pointer();
    =====:  663:	  this->_M_impl._M_map_size = 0;
    =====:  664:	  __throw_exception_again;
Aufruf  0 niemals ausgeführt
        -:  665:	}
        -:  666:
    #####:  667:      this->_M_impl._M_start._M_set_node(__nstart);
    %%%%%:  667-block  0
Aufruf  0 niemals ausgeführt
    #####:  668:      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
Aufruf  0 niemals ausgeführt
    #####:  669:      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
    #####:  670:      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
    #####:  671:					+ __num_elements
    #####:  672:					% __deque_buf_size(sizeof(_Tp)));
Aufruf  0 niemals ausgeführt
    #####:  673:    }
------------------
        -:  674:
        -:  675:  template<typename _Tp, typename _Alloc>
        -:  676:    void
    #####:  677:    _Deque_base<_Tp, _Alloc>::
        -:  678:    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
        -:  679:    {
        -:  680:      _Map_pointer __cur;
        -:  681:      __try
        -:  682:	{
    #####:  683:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
    #####:  684:	    *__cur = this->_M_allocate_node();
        -:  685:	}
    =====:  686:      __catch(...)
        -:  687:	{
    =====:  688:	  _M_destroy_nodes(__nstart, __cur);
    =====:  689:	  __throw_exception_again;
        -:  690:	}
    #####:  691:    }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE15_M_create_nodesEPPS2_S6_:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE15_M_create_nodesEPPS2_S6_ called 0 returned 0% blocks executed 0%
    #####:  677:    _Deque_base<_Tp, _Alloc>::
        -:  678:    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
        -:  679:    {
        -:  680:      _Map_pointer __cur;
        -:  681:      __try
        -:  682:	{
    #####:  683:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
    %%%%%:  683-block  0
    %%%%%:  683-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  684:	    *__cur = this->_M_allocate_node();
    %%%%%:  684-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  684-block  1
        -:  685:	}
    =====:  686:      __catch(...)
    $$$$$:  686-block  0
    $$$$$:  686-block  1
Aufruf  0 niemals ausgeführt
    $$$$$:  686-block  2
Aufruf  1 niemals ausgeführt
        -:  687:	{
    =====:  688:	  _M_destroy_nodes(__nstart, __cur);
Aufruf  0 niemals ausgeführt
    =====:  689:	  __throw_exception_again;
Aufruf  0 niemals ausgeführt
        -:  690:	}
    #####:  691:    }
    %%%%%:  691-block  0
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_create_nodesEPPS2_S6_:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_create_nodesEPPS2_S6_ called 0 returned 0% blocks executed 0%
    #####:  677:    _Deque_base<_Tp, _Alloc>::
        -:  678:    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
        -:  679:    {
        -:  680:      _Map_pointer __cur;
        -:  681:      __try
        -:  682:	{
    #####:  683:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
    %%%%%:  683-block  0
    %%%%%:  683-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  684:	    *__cur = this->_M_allocate_node();
    %%%%%:  684-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  684-block  1
        -:  685:	}
    =====:  686:      __catch(...)
    $$$$$:  686-block  0
    $$$$$:  686-block  1
Aufruf  0 niemals ausgeführt
    $$$$$:  686-block  2
Aufruf  1 niemals ausgeführt
        -:  687:	{
    =====:  688:	  _M_destroy_nodes(__nstart, __cur);
Aufruf  0 niemals ausgeführt
    =====:  689:	  __throw_exception_again;
Aufruf  0 niemals ausgeführt
        -:  690:	}
    #####:  691:    }
    %%%%%:  691-block  0
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE15_M_create_nodesEPPS2_S6_:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE15_M_create_nodesEPPS2_S6_ called 0 returned 0% blocks executed 0%
    #####:  677:    _Deque_base<_Tp, _Alloc>::
        -:  678:    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
        -:  679:    {
        -:  680:      _Map_pointer __cur;
        -:  681:      __try
        -:  682:	{
    #####:  683:	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
    %%%%%:  683-block  0
    %%%%%:  683-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  684:	    *__cur = this->_M_allocate_node();
    %%%%%:  684-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  684-block  1
        -:  685:	}
    =====:  686:      __catch(...)
    $$$$$:  686-block  0
    $$$$$:  686-block  1
Aufruf  0 niemals ausgeführt
    $$$$$:  686-block  2
Aufruf  1 niemals ausgeführt
        -:  687:	{
    =====:  688:	  _M_destroy_nodes(__nstart, __cur);
Aufruf  0 niemals ausgeführt
    =====:  689:	  __throw_exception_again;
Aufruf  0 niemals ausgeführt
        -:  690:	}
    #####:  691:    }
    %%%%%:  691-block  0
------------------
        -:  692:
        -:  693:  template<typename _Tp, typename _Alloc>
        -:  694:    void
    #####:  695:    _Deque_base<_Tp, _Alloc>::
        -:  696:    _M_destroy_nodes(_Map_pointer __nstart,
        -:  697:		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
        -:  698:    {
    #####:  699:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    #####:  700:	_M_deallocate_node(*__n);
    #####:  701:    }
------------------
_ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE16_M_destroy_nodesEPPS2_S6_:
function _ZNSt11_Deque_baseIPN4Json5ValueESaIS2_EE16_M_destroy_nodesEPPS2_S6_ called 0 returned 0% blocks executed 0%
    #####:  695:    _Deque_base<_Tp, _Alloc>::
        -:  696:    _M_destroy_nodes(_Map_pointer __nstart,
        -:  697:		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
        -:  698:    {
    #####:  699:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    %%%%%:  699-block  0
    %%%%%:  699-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  700:	_M_deallocate_node(*__n);
    %%%%%:  700-block  0
Aufruf  0 niemals ausgeführt
    #####:  701:    }
------------------
_ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE16_M_destroy_nodesEPPS2_S6_:
function _ZNSt11_Deque_baseIN4Json9OurReader9ErrorInfoESaIS2_EE16_M_destroy_nodesEPPS2_S6_ called 0 returned 0% blocks executed 0%
    #####:  695:    _Deque_base<_Tp, _Alloc>::
        -:  696:    _M_destroy_nodes(_Map_pointer __nstart,
        -:  697:		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
        -:  698:    {
    #####:  699:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    %%%%%:  699-block  0
    %%%%%:  699-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  700:	_M_deallocate_node(*__n);
    %%%%%:  700-block  0
Aufruf  0 niemals ausgeführt
    #####:  701:    }
------------------
_ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE16_M_destroy_nodesEPPS2_S6_:
function _ZNSt11_Deque_baseIN4Json6Reader9ErrorInfoESaIS2_EE16_M_destroy_nodesEPPS2_S6_ called 0 returned 0% blocks executed 0%
    #####:  695:    _Deque_base<_Tp, _Alloc>::
        -:  696:    _M_destroy_nodes(_Map_pointer __nstart,
        -:  697:		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
        -:  698:    {
    #####:  699:      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
    %%%%%:  699-block  0
    %%%%%:  699-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  700:	_M_deallocate_node(*__n);
    %%%%%:  700-block  0
Aufruf  0 niemals ausgeführt
    #####:  701:    }
------------------
        -:  702:
        -:  703:  /**
        -:  704:   *  @brief  A standard container using fixed-size memory allocation and
        -:  705:   *  constant-time manipulation of elements at either end.
        -:  706:   *
        -:  707:   *  @ingroup sequences
        -:  708:   *
        -:  709:   *  @tparam _Tp  Type of element.
        -:  710:   *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
        -:  711:   *
        -:  712:   *  Meets the requirements of a <a href="tables.html#65">container</a>, a
        -:  713:   *  <a href="tables.html#66">reversible container</a>, and a
        -:  714:   *  <a href="tables.html#67">sequence</a>, including the
        -:  715:   *  <a href="tables.html#68">optional sequence requirements</a>.
        -:  716:   *
        -:  717:   *  In previous HP/SGI versions of deque, there was an extra template
        -:  718:   *  parameter so users could control the node size.  This extension turned
        -:  719:   *  out to violate the C++ standard (it can be detected using template
        -:  720:   *  template parameters), and it was removed.
        -:  721:   *
        -:  722:   *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:
        -:  723:   *
        -:  724:   *  - Tp**        _M_map
        -:  725:   *  - size_t      _M_map_size
        -:  726:   *  - iterator    _M_start, _M_finish
        -:  727:   *
        -:  728:   *  map_size is at least 8.  %map is an array of map_size
        -:  729:   *  pointers-to-@a nodes.  (The name %map has nothing to do with the
        -:  730:   *  std::map class, and @b nodes should not be confused with
        -:  731:   *  std::list's usage of @a node.)
        -:  732:   *
        -:  733:   *  A @a node has no specific type name as such, but it is referred
        -:  734:   *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp
        -:  735:   *  is very large, there will be one Tp element per node (i.e., an
        -:  736:   *  @a array of one).  For non-huge Tp's, node size is inversely
        -:  737:   *  related to Tp size: the larger the Tp, the fewer Tp's will fit
        -:  738:   *  in a node.  The goal here is to keep the total size of a node
        -:  739:   *  relatively small and constant over different Tp's, to improve
        -:  740:   *  allocator efficiency.
        -:  741:   *
        -:  742:   *  Not every pointer in the %map array will point to a node.  If
        -:  743:   *  the initial number of elements in the deque is small, the
        -:  744:   *  /middle/ %map pointers will be valid, and the ones at the edges
        -:  745:   *  will be unused.  This same situation will arise as the %map
        -:  746:   *  grows: available %map pointers, if any, will be on the ends.  As
        -:  747:   *  new nodes are created, only a subset of the %map's pointers need
        -:  748:   *  to be copied @a outward.
        -:  749:   *
        -:  750:   *  Class invariants:
        -:  751:   * - For any nonsingular iterator i:
        -:  752:   *    - i.node points to a member of the %map array.  (Yes, you read that
        -:  753:   *      correctly:  i.node does not actually point to a node.)  The member of
        -:  754:   *      the %map array is what actually points to the node.
        -:  755:   *    - i.first == *(i.node)    (This points to the node (first Tp element).)
        -:  756:   *    - i.last  == i.first + node_size
        -:  757:   *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:
        -:  758:   *      the implication of this is that i.cur is always a dereferenceable
        -:  759:   *      pointer, even if i is a past-the-end iterator.
        -:  760:   * - Start and Finish are always nonsingular iterators.  NOTE: this
        -:  761:   * means that an empty deque must have one node, a deque with <N
        -:  762:   * elements (where N is the node buffer size) must have one node, a
        -:  763:   * deque with N through (2N-1) elements must have two nodes, etc.
        -:  764:   * - For every node other than start.node and finish.node, every
        -:  765:   * element in the node is an initialized object.  If start.node ==
        -:  766:   * finish.node, then [start.cur, finish.cur) are initialized
        -:  767:   * objects, and the elements outside that range are uninitialized
        -:  768:   * storage.  Otherwise, [start.cur, start.last) and [finish.first,
        -:  769:   * finish.cur) are initialized objects, and [start.first, start.cur)
        -:  770:   * and [finish.cur, finish.last) are uninitialized storage.
        -:  771:   * - [%map, %map + map_size) is a valid, non-empty range.
        -:  772:   * - [start.node, finish.node] is a valid range contained within
        -:  773:   *   [%map, %map + map_size).
        -:  774:   * - A pointer in the range [%map, %map + map_size) points to an allocated
        -:  775:   *   node if and only if the pointer is in the range
        -:  776:   *   [start.node, finish.node].
        -:  777:   *
        -:  778:   *  Here's the magic:  nothing in deque is @b aware of the discontiguous
        -:  779:   *  storage!
        -:  780:   *
        -:  781:   *  The memory setup and layout occurs in the parent, _Base, and the iterator
        -:  782:   *  class is entirely responsible for @a leaping from one node to the next.
        -:  783:   *  All the implementation routines for deque itself work only through the
        -:  784:   *  start and finish iterators.  This keeps the routines simple and sane,
        -:  785:   *  and we can use other standard algorithms as well.
        -:  786:  */
        -:  787:  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
        -:  788:    class deque : protected _Deque_base<_Tp, _Alloc>
        -:  789:    {
        -:  790:#ifdef _GLIBCXX_CONCEPT_CHECKS
        -:  791:      // concept requirements
        -:  792:      typedef typename _Alloc::value_type	_Alloc_value_type;
        -:  793:# if __cplusplus < 201103L
        -:  794:      __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
        -:  795:# endif
        -:  796:      __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
        -:  797:#endif
        -:  798:
        -:  799:#if __cplusplus >= 201103L
        -:  800:      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
        -:  801:	  "std::deque must have a non-const, non-volatile value_type");
        -:  802:# if __cplusplus > 201703L || defined __STRICT_ANSI__
        -:  803:      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
        -:  804:	  "std::deque must have the same value_type as its allocator");
        -:  805:# endif
        -:  806:#endif
        -:  807:
        -:  808:      typedef _Deque_base<_Tp, _Alloc>			_Base;
        -:  809:      typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
        -:  810:      typedef typename _Base::_Alloc_traits		_Alloc_traits;
        -:  811:      typedef typename _Base::_Map_pointer		_Map_pointer;
        -:  812:
        -:  813:    public:
        -:  814:      typedef _Tp					value_type;
        -:  815:      typedef typename _Alloc_traits::pointer		pointer;
        -:  816:      typedef typename _Alloc_traits::const_pointer	const_pointer;
        -:  817:      typedef typename _Alloc_traits::reference		reference;
        -:  818:      typedef typename _Alloc_traits::const_reference	const_reference;
        -:  819:      typedef typename _Base::iterator			iterator;
        -:  820:      typedef typename _Base::const_iterator		const_iterator;
        -:  821:      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
        -:  822:      typedef std::reverse_iterator<iterator>		reverse_iterator;
        -:  823:      typedef size_t					size_type;
        -:  824:      typedef ptrdiff_t					difference_type;
        -:  825:      typedef _Alloc					allocator_type;
        -:  826:
        -:  827:    private:
    #####:  828:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  829:      { return __deque_buf_size(sizeof(_Tp)); }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE14_S_buffer_sizeEv:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  828:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  829:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  829-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE14_S_buffer_sizeEv:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE14_S_buffer_sizeEv called 0 returned 0% blocks executed 0%
    #####:  828:      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
    #####:  829:      { return __deque_buf_size(sizeof(_Tp)); }
    %%%%%:  829-block  0
Aufruf  0 niemals ausgeführt
------------------
        -:  830:
        -:  831:      // Functions controlling memory layout, and nothing else.
        -:  832:      using _Base::_M_initialize_map;
        -:  833:      using _Base::_M_create_nodes;
        -:  834:      using _Base::_M_destroy_nodes;
        -:  835:      using _Base::_M_allocate_node;
        -:  836:      using _Base::_M_deallocate_node;
        -:  837:      using _Base::_M_allocate_map;
        -:  838:      using _Base::_M_deallocate_map;
        -:  839:      using _Base::_M_get_Tp_allocator;
        -:  840:
        -:  841:      /**
        -:  842:       *  A total of four data members accumulated down the hierarchy.
        -:  843:       *  May be accessed via _M_impl.*
        -:  844:       */
        -:  845:      using _Base::_M_impl;
        -:  846:
        -:  847:    public:
        -:  848:      // [23.2.1.1] construct/copy/destroy
        -:  849:      // (assign() and get_allocator() are also listed in this section)
        -:  850:
        -:  851:      /**
        -:  852:       *  @brief  Creates a %deque with no elements.
        -:  853:       */
        -:  854:#if __cplusplus >= 201103L
    #####:  855:      deque() = default;
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EEC2Ev:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:  855:      deque() = default;
    %%%%%:  855-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EEC2Ev:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:  855:      deque() = default;
    %%%%%:  855-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EEC2Ev:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:  855:      deque() = default;
    %%%%%:  855-block  0
Aufruf  0 niemals ausgeführt
------------------
        -:  856:#else
        -:  857:      deque() { }
        -:  858:#endif
        -:  859:
        -:  860:      /**
        -:  861:       *  @brief  Creates a %deque with no elements.
        -:  862:       *  @param  __a  An allocator object.
        -:  863:       */
        -:  864:      explicit
        -:  865:      deque(const allocator_type& __a)
        -:  866:      : _Base(__a, 0) { }
        -:  867:
        -:  868:#if __cplusplus >= 201103L
        -:  869:      /**
        -:  870:       *  @brief  Creates a %deque with default constructed elements.
        -:  871:       *  @param  __n  The number of elements to initially create.
        -:  872:       *  @param  __a  An allocator.
        -:  873:       *
        -:  874:       *  This constructor fills the %deque with @a n default
        -:  875:       *  constructed elements.
        -:  876:       */
        -:  877:      explicit
        -:  878:      deque(size_type __n, const allocator_type& __a = allocator_type())
        -:  879:      : _Base(__a, _S_check_init_len(__n, __a))
        -:  880:      { _M_default_initialize(); }
        -:  881:
        -:  882:      /**
        -:  883:       *  @brief  Creates a %deque with copies of an exemplar element.
        -:  884:       *  @param  __n  The number of elements to initially create.
        -:  885:       *  @param  __value  An element to copy.
        -:  886:       *  @param  __a  An allocator.
        -:  887:       *
        -:  888:       *  This constructor fills the %deque with @a __n copies of @a __value.
        -:  889:       */
        -:  890:      deque(size_type __n, const value_type& __value,
        -:  891:	    const allocator_type& __a = allocator_type())
        -:  892:      : _Base(__a, _S_check_init_len(__n, __a))
        -:  893:      { _M_fill_initialize(__value); }
        -:  894:#else
        -:  895:      /**
        -:  896:       *  @brief  Creates a %deque with copies of an exemplar element.
        -:  897:       *  @param  __n  The number of elements to initially create.
        -:  898:       *  @param  __value  An element to copy.
        -:  899:       *  @param  __a  An allocator.
        -:  900:       *
        -:  901:       *  This constructor fills the %deque with @a __n copies of @a __value.
        -:  902:       */
        -:  903:      explicit
        -:  904:      deque(size_type __n, const value_type& __value = value_type(),
        -:  905:	    const allocator_type& __a = allocator_type())
        -:  906:      : _Base(__a, _S_check_init_len(__n, __a))
        -:  907:      { _M_fill_initialize(__value); }
        -:  908:#endif
        -:  909:
        -:  910:      /**
        -:  911:       *  @brief  %Deque copy constructor.
        -:  912:       *  @param  __x  A %deque of identical element and allocator types.
        -:  913:       *
        -:  914:       *  The newly-created %deque uses a copy of the allocator object used
        -:  915:       *  by @a __x (unless the allocator traits dictate a different object).
        -:  916:       */
        -:  917:      deque(const deque& __x)
        -:  918:      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
        -:  919:	      __x.size())
        -:  920:      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        -:  921:				    this->_M_impl._M_start,
        -:  922:				    _M_get_Tp_allocator()); }
        -:  923:
        -:  924:#if __cplusplus >= 201103L
        -:  925:      /**
        -:  926:       *  @brief  %Deque move constructor.
        -:  927:       *
        -:  928:       *  The newly-created %deque contains the exact contents of the
        -:  929:       *  moved instance.
        -:  930:       *  The contents of the moved instance are a valid, but unspecified
        -:  931:       *  %deque.
        -:  932:       */
        -:  933:      deque(deque&&) = default;
        -:  934:
        -:  935:      /// Copy constructor with alternative allocator
        -:  936:      deque(const deque& __x, const __type_identity_t<allocator_type>& __a)
        -:  937:      : _Base(__a, __x.size())
        -:  938:      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        -:  939:				    this->_M_impl._M_start,
        -:  940:				    _M_get_Tp_allocator()); }
        -:  941:
        -:  942:      /// Move constructor with alternative allocator
        -:  943:      deque(deque&& __x, const __type_identity_t<allocator_type>& __a)
        -:  944:      : deque(std::move(__x), __a, typename _Alloc_traits::is_always_equal{})
        -:  945:      { }
        -:  946:
        -:  947:    private:
        -:  948:      deque(deque&& __x, const allocator_type& __a, true_type)
        -:  949:      : _Base(std::move(__x), __a)
        -:  950:      { }
        -:  951:
        -:  952:      deque(deque&& __x, const allocator_type& __a, false_type)
        -:  953:      : _Base(std::move(__x), __a, __x.size())
        -:  954:      {
        -:  955:	if (__x.get_allocator() != __a && !__x.empty())
        -:  956:	  {
        -:  957:	    std::__uninitialized_move_a(__x.begin(), __x.end(),
        -:  958:					this->_M_impl._M_start,
        -:  959:					_M_get_Tp_allocator());
        -:  960:	    __x.clear();
        -:  961:	  }
        -:  962:      }
        -:  963:
        -:  964:    public:
        -:  965:      /**
        -:  966:       *  @brief  Builds a %deque from an initializer list.
        -:  967:       *  @param  __l  An initializer_list.
        -:  968:       *  @param  __a  An allocator object.
        -:  969:       *
        -:  970:       *  Create a %deque consisting of copies of the elements in the
        -:  971:       *  initializer_list @a __l.
        -:  972:       *
        -:  973:       *  This will call the element type's copy constructor N times
        -:  974:       *  (where N is __l.size()) and do no memory reallocation.
        -:  975:       */
        -:  976:      deque(initializer_list<value_type> __l,
        -:  977:	    const allocator_type& __a = allocator_type())
        -:  978:      : _Base(__a)
        -:  979:      {
        -:  980:	_M_range_initialize(__l.begin(), __l.end(),
        -:  981:			    random_access_iterator_tag());
        -:  982:      }
        -:  983:#endif
        -:  984:
        -:  985:      /**
        -:  986:       *  @brief  Builds a %deque from a range.
        -:  987:       *  @param  __first  An input iterator.
        -:  988:       *  @param  __last  An input iterator.
        -:  989:       *  @param  __a  An allocator object.
        -:  990:       *
        -:  991:       *  Create a %deque consisting of copies of the elements from [__first,
        -:  992:       *  __last).
        -:  993:       *
        -:  994:       *  If the iterators are forward, bidirectional, or random-access, then
        -:  995:       *  this will call the elements' copy constructor N times (where N is
        -:  996:       *  distance(__first,__last)) and do no memory reallocation.  But if only
        -:  997:       *  input iterators are used, then this will do at most 2N calls to the
        -:  998:       *  copy constructor, and logN memory reallocations.
        -:  999:       */
        -: 1000:#if __cplusplus >= 201103L
        -: 1001:      template<typename _InputIterator,
        -: 1002:	       typename = std::_RequireInputIter<_InputIterator>>
        -: 1003:	deque(_InputIterator __first, _InputIterator __last,
        -: 1004:	      const allocator_type& __a = allocator_type())
        -: 1005:	: _Base(__a)
        -: 1006:	{
        -: 1007:	  _M_range_initialize(__first, __last,
        -: 1008:			      std::__iterator_category(__first));
        -: 1009:	}
        -: 1010:#else
        -: 1011:      template<typename _InputIterator>
        -: 1012:	deque(_InputIterator __first, _InputIterator __last,
        -: 1013:	      const allocator_type& __a = allocator_type())
        -: 1014:	: _Base(__a)
        -: 1015:	{
        -: 1016:	  // Check whether it's an integral type.  If so, it's not an iterator.
        -: 1017:	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
        -: 1018:	  _M_initialize_dispatch(__first, __last, _Integral());
        -: 1019:	}
        -: 1020:#endif
        -: 1021:
        -: 1022:      /**
        -: 1023:       *  The dtor only erases the elements, and note that if the elements
        -: 1024:       *  themselves are pointers, the pointed-to memory is not touched in any
        -: 1025:       *  way.  Managing the pointer is the user's responsibility.
        -: 1026:       */
    #####: 1027:      ~deque()
    #####: 1028:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EED2Ev:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EED2Ev called 0 returned 0% blocks executed 0%
    #####: 1027:      ~deque()
    #####: 1028:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
    %%%%%: 1028-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EED2Ev:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EED2Ev called 0 returned 0% blocks executed 0%
    #####: 1027:      ~deque()
    #####: 1028:      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
    %%%%%: 1028-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
------------------
        -: 1029:
        -: 1030:      /**
        -: 1031:       *  @brief  %Deque assignment operator.
        -: 1032:       *  @param  __x  A %deque of identical element and allocator types.
        -: 1033:       *
        -: 1034:       *  All the elements of @a x are copied.
        -: 1035:       *
        -: 1036:       *  The newly-created %deque uses a copy of the allocator object used
        -: 1037:       *  by @a __x (unless the allocator traits dictate a different object).
        -: 1038:       */
        -: 1039:      deque&
        -: 1040:      operator=(const deque& __x);
        -: 1041:
        -: 1042:#if __cplusplus >= 201103L
        -: 1043:      /**
        -: 1044:       *  @brief  %Deque move assignment operator.
        -: 1045:       *  @param  __x  A %deque of identical element and allocator types.
        -: 1046:       *
        -: 1047:       *  The contents of @a __x are moved into this deque (without copying,
        -: 1048:       *  if the allocators permit it).
        -: 1049:       *  @a __x is a valid, but unspecified %deque.
        -: 1050:       */
        -: 1051:      deque&
        -: 1052:      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
        -: 1053:      {
        -: 1054:	using __always_equal = typename _Alloc_traits::is_always_equal;
        -: 1055:	_M_move_assign1(std::move(__x), __always_equal{});
        -: 1056:	return *this;
        -: 1057:      }
        -: 1058:
        -: 1059:      /**
        -: 1060:       *  @brief  Assigns an initializer list to a %deque.
        -: 1061:       *  @param  __l  An initializer_list.
        -: 1062:       *
        -: 1063:       *  This function fills a %deque with copies of the elements in the
        -: 1064:       *  initializer_list @a __l.
        -: 1065:       *
        -: 1066:       *  Note that the assignment completely changes the %deque and that the
        -: 1067:       *  resulting %deque's size is the same as the number of elements
        -: 1068:       *  assigned.
        -: 1069:       */
        -: 1070:      deque&
        -: 1071:      operator=(initializer_list<value_type> __l)
        -: 1072:      {
        -: 1073:	_M_assign_aux(__l.begin(), __l.end(),
        -: 1074:		      random_access_iterator_tag());
        -: 1075:	return *this;
        -: 1076:      }
        -: 1077:#endif
        -: 1078:
        -: 1079:      /**
        -: 1080:       *  @brief  Assigns a given value to a %deque.
        -: 1081:       *  @param  __n  Number of elements to be assigned.
        -: 1082:       *  @param  __val  Value to be assigned.
        -: 1083:       *
        -: 1084:       *  This function fills a %deque with @a n copies of the given
        -: 1085:       *  value.  Note that the assignment completely changes the
        -: 1086:       *  %deque and that the resulting %deque's size is the same as
        -: 1087:       *  the number of elements assigned.
        -: 1088:       */
        -: 1089:      void
        -: 1090:      assign(size_type __n, const value_type& __val)
        -: 1091:      { _M_fill_assign(__n, __val); }
        -: 1092:
        -: 1093:      /**
        -: 1094:       *  @brief  Assigns a range to a %deque.
        -: 1095:       *  @param  __first  An input iterator.
        -: 1096:       *  @param  __last   An input iterator.
        -: 1097:       *
        -: 1098:       *  This function fills a %deque with copies of the elements in the
        -: 1099:       *  range [__first,__last).
        -: 1100:       *
        -: 1101:       *  Note that the assignment completely changes the %deque and that the
        -: 1102:       *  resulting %deque's size is the same as the number of elements
        -: 1103:       *  assigned.
        -: 1104:       */
        -: 1105:#if __cplusplus >= 201103L
        -: 1106:      template<typename _InputIterator,
        -: 1107:	       typename = std::_RequireInputIter<_InputIterator>>
        -: 1108:	void
        -: 1109:	assign(_InputIterator __first, _InputIterator __last)
        -: 1110:	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
        -: 1111:#else
        -: 1112:      template<typename _InputIterator>
        -: 1113:	void
        -: 1114:	assign(_InputIterator __first, _InputIterator __last)
        -: 1115:	{
        -: 1116:	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
        -: 1117:	  _M_assign_dispatch(__first, __last, _Integral());
        -: 1118:	}
        -: 1119:#endif
        -: 1120:
        -: 1121:#if __cplusplus >= 201103L
        -: 1122:      /**
        -: 1123:       *  @brief  Assigns an initializer list to a %deque.
        -: 1124:       *  @param  __l  An initializer_list.
        -: 1125:       *
        -: 1126:       *  This function fills a %deque with copies of the elements in the
        -: 1127:       *  initializer_list @a __l.
        -: 1128:       *
        -: 1129:       *  Note that the assignment completely changes the %deque and that the
        -: 1130:       *  resulting %deque's size is the same as the number of elements
        -: 1131:       *  assigned.
        -: 1132:       */
        -: 1133:      void
        -: 1134:      assign(initializer_list<value_type> __l)
        -: 1135:      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
        -: 1136:#endif
        -: 1137:
        -: 1138:      /// Get a copy of the memory allocation object.
        -: 1139:      _GLIBCXX_NODISCARD
        -: 1140:      allocator_type
        -: 1141:      get_allocator() const _GLIBCXX_NOEXCEPT
        -: 1142:      { return _Base::get_allocator(); }
        -: 1143:
        -: 1144:      // iterators
        -: 1145:      /**
        -: 1146:       *  Returns a read/write iterator that points to the first element in the
        -: 1147:       *  %deque.  Iteration is done in ordinary element order.
        -: 1148:       */
        -: 1149:      _GLIBCXX_NODISCARD
        -: 1150:      iterator
    #####: 1151:      begin() _GLIBCXX_NOEXCEPT
    #####: 1152:      { return this->_M_impl._M_start; }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE5beginEv:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE5beginEv called 0 returned 0% blocks executed 0%
    #####: 1151:      begin() _GLIBCXX_NOEXCEPT
    #####: 1152:      { return this->_M_impl._M_start; }
    %%%%%: 1152-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5beginEv:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5beginEv called 0 returned 0% blocks executed 0%
    #####: 1151:      begin() _GLIBCXX_NOEXCEPT
    #####: 1152:      { return this->_M_impl._M_start; }
    %%%%%: 1152-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EE5beginEv:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE5beginEv called 0 returned 0% blocks executed 0%
    #####: 1151:      begin() _GLIBCXX_NOEXCEPT
    #####: 1152:      { return this->_M_impl._M_start; }
    %%%%%: 1152-block  0
Aufruf  0 niemals ausgeführt
------------------
        -: 1153:
        -: 1154:      /**
        -: 1155:       *  Returns a read-only (constant) iterator that points to the first
        -: 1156:       *  element in the %deque.  Iteration is done in ordinary element order.
        -: 1157:       */
        -: 1158:      _GLIBCXX_NODISCARD
        -: 1159:      const_iterator
    #####: 1160:      begin() const _GLIBCXX_NOEXCEPT
    #####: 1161:      { return this->_M_impl._M_start; }
------------------
_ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE5beginEv:
function _ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE5beginEv called 0 returned 0% blocks executed 0%
    #####: 1160:      begin() const _GLIBCXX_NOEXCEPT
    #####: 1161:      { return this->_M_impl._M_start; }
    %%%%%: 1161-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5beginEv:
function _ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5beginEv called 0 returned 0% blocks executed 0%
    #####: 1160:      begin() const _GLIBCXX_NOEXCEPT
    #####: 1161:      { return this->_M_impl._M_start; }
    %%%%%: 1161-block  0
Aufruf  0 niemals ausgeführt
------------------
        -: 1162:
        -: 1163:      /**
        -: 1164:       *  Returns a read/write iterator that points one past the last
        -: 1165:       *  element in the %deque.  Iteration is done in ordinary
        -: 1166:       *  element order.
        -: 1167:       */
        -: 1168:      _GLIBCXX_NODISCARD
        -: 1169:      iterator
    #####: 1170:      end() _GLIBCXX_NOEXCEPT
    #####: 1171:      { return this->_M_impl._M_finish; }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE3endEv:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE3endEv called 0 returned 0% blocks executed 0%
    #####: 1170:      end() _GLIBCXX_NOEXCEPT
    #####: 1171:      { return this->_M_impl._M_finish; }
    %%%%%: 1171-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE3endEv:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE3endEv called 0 returned 0% blocks executed 0%
    #####: 1170:      end() _GLIBCXX_NOEXCEPT
    #####: 1171:      { return this->_M_impl._M_finish; }
    %%%%%: 1171-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EE3endEv:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE3endEv called 0 returned 0% blocks executed 0%
    #####: 1170:      end() _GLIBCXX_NOEXCEPT
    #####: 1171:      { return this->_M_impl._M_finish; }
    %%%%%: 1171-block  0
Aufruf  0 niemals ausgeführt
------------------
        -: 1172:
        -: 1173:      /**
        -: 1174:       *  Returns a read-only (constant) iterator that points one past
        -: 1175:       *  the last element in the %deque.  Iteration is done in
        -: 1176:       *  ordinary element order.
        -: 1177:       */
        -: 1178:      _GLIBCXX_NODISCARD
        -: 1179:      const_iterator
    #####: 1180:      end() const _GLIBCXX_NOEXCEPT
    #####: 1181:      { return this->_M_impl._M_finish; }
------------------
_ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE3endEv:
function _ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE3endEv called 0 returned 0% blocks executed 0%
    #####: 1180:      end() const _GLIBCXX_NOEXCEPT
    #####: 1181:      { return this->_M_impl._M_finish; }
    %%%%%: 1181-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE3endEv:
function _ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE3endEv called 0 returned 0% blocks executed 0%
    #####: 1180:      end() const _GLIBCXX_NOEXCEPT
    #####: 1181:      { return this->_M_impl._M_finish; }
    %%%%%: 1181-block  0
Aufruf  0 niemals ausgeführt
------------------
        -: 1182:
        -: 1183:      /**
        -: 1184:       *  Returns a read/write reverse iterator that points to the
        -: 1185:       *  last element in the %deque.  Iteration is done in reverse
        -: 1186:       *  element order.
        -: 1187:       */
        -: 1188:      _GLIBCXX_NODISCARD
        -: 1189:      reverse_iterator
        -: 1190:      rbegin() _GLIBCXX_NOEXCEPT
        -: 1191:      { return reverse_iterator(this->_M_impl._M_finish); }
        -: 1192:
        -: 1193:      /**
        -: 1194:       *  Returns a read-only (constant) reverse iterator that points
        -: 1195:       *  to the last element in the %deque.  Iteration is done in
        -: 1196:       *  reverse element order.
        -: 1197:       */
        -: 1198:      _GLIBCXX_NODISCARD
        -: 1199:      const_reverse_iterator
        -: 1200:      rbegin() const _GLIBCXX_NOEXCEPT
        -: 1201:      { return const_reverse_iterator(this->_M_impl._M_finish); }
        -: 1202:
        -: 1203:      /**
        -: 1204:       *  Returns a read/write reverse iterator that points to one
        -: 1205:       *  before the first element in the %deque.  Iteration is done
        -: 1206:       *  in reverse element order.
        -: 1207:       */
        -: 1208:      _GLIBCXX_NODISCARD
        -: 1209:      reverse_iterator
        -: 1210:      rend() _GLIBCXX_NOEXCEPT
        -: 1211:      { return reverse_iterator(this->_M_impl._M_start); }
        -: 1212:
        -: 1213:      /**
        -: 1214:       *  Returns a read-only (constant) reverse iterator that points
        -: 1215:       *  to one before the first element in the %deque.  Iteration is
        -: 1216:       *  done in reverse element order.
        -: 1217:       */
        -: 1218:      _GLIBCXX_NODISCARD
        -: 1219:      const_reverse_iterator
        -: 1220:      rend() const _GLIBCXX_NOEXCEPT
        -: 1221:      { return const_reverse_iterator(this->_M_impl._M_start); }
        -: 1222:
        -: 1223:#if __cplusplus >= 201103L
        -: 1224:      /**
        -: 1225:       *  Returns a read-only (constant) iterator that points to the first
        -: 1226:       *  element in the %deque.  Iteration is done in ordinary element order.
        -: 1227:       */
        -: 1228:      [[__nodiscard__]]
        -: 1229:      const_iterator
        -: 1230:      cbegin() const noexcept
        -: 1231:      { return this->_M_impl._M_start; }
        -: 1232:
        -: 1233:      /**
        -: 1234:       *  Returns a read-only (constant) iterator that points one past
        -: 1235:       *  the last element in the %deque.  Iteration is done in
        -: 1236:       *  ordinary element order.
        -: 1237:       */
        -: 1238:      [[__nodiscard__]]
        -: 1239:      const_iterator
        -: 1240:      cend() const noexcept
        -: 1241:      { return this->_M_impl._M_finish; }
        -: 1242:
        -: 1243:      /**
        -: 1244:       *  Returns a read-only (constant) reverse iterator that points
        -: 1245:       *  to the last element in the %deque.  Iteration is done in
        -: 1246:       *  reverse element order.
        -: 1247:       */
        -: 1248:      [[__nodiscard__]]
        -: 1249:      const_reverse_iterator
        -: 1250:      crbegin() const noexcept
        -: 1251:      { return const_reverse_iterator(this->_M_impl._M_finish); }
        -: 1252:
        -: 1253:      /**
        -: 1254:       *  Returns a read-only (constant) reverse iterator that points
        -: 1255:       *  to one before the first element in the %deque.  Iteration is
        -: 1256:       *  done in reverse element order.
        -: 1257:       */
        -: 1258:      [[__nodiscard__]]
        -: 1259:      const_reverse_iterator
        -: 1260:      crend() const noexcept
        -: 1261:      { return const_reverse_iterator(this->_M_impl._M_start); }
        -: 1262:#endif
        -: 1263:
        -: 1264:      // [23.2.1.2] capacity
        -: 1265:      /**  Returns the number of elements in the %deque.  */
        -: 1266:      _GLIBCXX_NODISCARD
        -: 1267:      size_type
    #####: 1268:      size() const _GLIBCXX_NOEXCEPT
    #####: 1269:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
------------------
_ZNKSt5dequeIPN4Json5ValueESaIS2_EE4sizeEv:
function _ZNKSt5dequeIPN4Json5ValueESaIS2_EE4sizeEv called 0 returned 0% blocks executed 0%
    #####: 1268:      size() const _GLIBCXX_NOEXCEPT
    #####: 1269:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
    %%%%%: 1269-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE4sizeEv:
function _ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE4sizeEv called 0 returned 0% blocks executed 0%
    #####: 1268:      size() const _GLIBCXX_NOEXCEPT
    #####: 1269:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
    %%%%%: 1269-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE4sizeEv:
function _ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE4sizeEv called 0 returned 0% blocks executed 0%
    #####: 1268:      size() const _GLIBCXX_NOEXCEPT
    #####: 1269:      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
    %%%%%: 1269-block  0
Aufruf  0 niemals ausgeführt
------------------
        -: 1270:
        -: 1271:      /**  Returns the size() of the largest possible %deque.  */
        -: 1272:      _GLIBCXX_NODISCARD
        -: 1273:      size_type
    #####: 1274:      max_size() const _GLIBCXX_NOEXCEPT
    #####: 1275:      { return _S_max_size(_M_get_Tp_allocator()); }
------------------
_ZNKSt5dequeIPN4Json5ValueESaIS2_EE8max_sizeEv:
function _ZNKSt5dequeIPN4Json5ValueESaIS2_EE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####: 1274:      max_size() const _GLIBCXX_NOEXCEPT
    #####: 1275:      { return _S_max_size(_M_get_Tp_allocator()); }
    %%%%%: 1275-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE8max_sizeEv:
function _ZNKSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####: 1274:      max_size() const _GLIBCXX_NOEXCEPT
    #####: 1275:      { return _S_max_size(_M_get_Tp_allocator()); }
    %%%%%: 1275-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE8max_sizeEv:
function _ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE8max_sizeEv called 0 returned 0% blocks executed 0%
    #####: 1274:      max_size() const _GLIBCXX_NOEXCEPT
    #####: 1275:      { return _S_max_size(_M_get_Tp_allocator()); }
    %%%%%: 1275-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
        -: 1276:
        -: 1277:#if __cplusplus >= 201103L
        -: 1278:      /**
        -: 1279:       *  @brief  Resizes the %deque to the specified number of elements.
        -: 1280:       *  @param  __new_size  Number of elements the %deque should contain.
        -: 1281:       *
        -: 1282:       *  This function will %resize the %deque to the specified
        -: 1283:       *  number of elements.  If the number is smaller than the
        -: 1284:       *  %deque's current size the %deque is truncated, otherwise
        -: 1285:       *  default constructed elements are appended.
        -: 1286:       */
        -: 1287:      void
    #####: 1288:      resize(size_type __new_size)
        -: 1289:      {
    #####: 1290:	const size_type __len = size();
    #####: 1291:	if (__new_size > __len)
    #####: 1292:	  _M_default_append(__new_size - __len);
    #####: 1293:	else if (__new_size < __len)
    #####: 1294:	  _M_erase_at_end(this->_M_impl._M_start
        -: 1295:			  + difference_type(__new_size));
    #####: 1296:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE6resizeEm:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE6resizeEm called 0 returned 0% blocks executed 0%
    #####: 1288:      resize(size_type __new_size)
        -: 1289:      {
    #####: 1290:	const size_type __len = size();
    %%%%%: 1290-block  0
Aufruf  0 niemals ausgeführt
    #####: 1291:	if (__new_size > __len)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1292:	  _M_default_append(__new_size - __len);
    %%%%%: 1292-block  0
Aufruf  0 niemals ausgeführt
    #####: 1293:	else if (__new_size < __len)
    %%%%%: 1293-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1294:	  _M_erase_at_end(this->_M_impl._M_start
    %%%%%: 1294-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1294-block  1
        -: 1295:			  + difference_type(__new_size));
    #####: 1296:      }
    %%%%%: 1296-block  0
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE6resizeEm:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE6resizeEm called 0 returned 0% blocks executed 0%
    #####: 1288:      resize(size_type __new_size)
        -: 1289:      {
    #####: 1290:	const size_type __len = size();
    %%%%%: 1290-block  0
Aufruf  0 niemals ausgeführt
    #####: 1291:	if (__new_size > __len)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1292:	  _M_default_append(__new_size - __len);
    %%%%%: 1292-block  0
Aufruf  0 niemals ausgeführt
    #####: 1293:	else if (__new_size < __len)
    %%%%%: 1293-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1294:	  _M_erase_at_end(this->_M_impl._M_start
    %%%%%: 1294-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1294-block  1
        -: 1295:			  + difference_type(__new_size));
    #####: 1296:      }
    %%%%%: 1296-block  0
------------------
        -: 1297:
        -: 1298:      /**
        -: 1299:       *  @brief  Resizes the %deque to the specified number of elements.
        -: 1300:       *  @param  __new_size  Number of elements the %deque should contain.
        -: 1301:       *  @param  __x  Data with which new elements should be populated.
        -: 1302:       *
        -: 1303:       *  This function will %resize the %deque to the specified
        -: 1304:       *  number of elements.  If the number is smaller than the
        -: 1305:       *  %deque's current size the %deque is truncated, otherwise the
        -: 1306:       *  %deque is extended and new elements are populated with given
        -: 1307:       *  data.
        -: 1308:       */
        -: 1309:      void
        -: 1310:      resize(size_type __new_size, const value_type& __x)
        -: 1311:#else
        -: 1312:      /**
        -: 1313:       *  @brief  Resizes the %deque to the specified number of elements.
        -: 1314:       *  @param  __new_size  Number of elements the %deque should contain.
        -: 1315:       *  @param  __x  Data with which new elements should be populated.
        -: 1316:       *
        -: 1317:       *  This function will %resize the %deque to the specified
        -: 1318:       *  number of elements.  If the number is smaller than the
        -: 1319:       *  %deque's current size the %deque is truncated, otherwise the
        -: 1320:       *  %deque is extended and new elements are populated with given
        -: 1321:       *  data.
        -: 1322:       */
        -: 1323:      void
        -: 1324:      resize(size_type __new_size, value_type __x = value_type())
        -: 1325:#endif
        -: 1326:      {
        -: 1327:	const size_type __len = size();
        -: 1328:	if (__new_size > __len)
        -: 1329:	  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);
        -: 1330:	else if (__new_size < __len)
        -: 1331:	  _M_erase_at_end(this->_M_impl._M_start
        -: 1332:			  + difference_type(__new_size));
        -: 1333:      }
        -: 1334:
        -: 1335:#if __cplusplus >= 201103L
        -: 1336:      /**  A non-binding request to reduce memory use.  */
        -: 1337:      void
        -: 1338:      shrink_to_fit() noexcept
        -: 1339:      { _M_shrink_to_fit(); }
        -: 1340:#endif
        -: 1341:
        -: 1342:      /**
        -: 1343:       *  Returns true if the %deque is empty.  (Thus begin() would
        -: 1344:       *  equal end().)
        -: 1345:       */
        -: 1346:      _GLIBCXX_NODISCARD bool
    #####: 1347:      empty() const _GLIBCXX_NOEXCEPT
    #####: 1348:      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
------------------
_ZNKSt5dequeIPN4Json5ValueESaIS2_EE5emptyEv:
function _ZNKSt5dequeIPN4Json5ValueESaIS2_EE5emptyEv called 0 returned 0% blocks executed 0%
    #####: 1347:      empty() const _GLIBCXX_NOEXCEPT
    #####: 1348:      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
    %%%%%: 1348-block  0
Aufruf  0 niemals ausgeführt
------------------
_ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5emptyEv:
function _ZNKSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5emptyEv called 0 returned 0% blocks executed 0%
    #####: 1347:      empty() const _GLIBCXX_NOEXCEPT
    #####: 1348:      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
    %%%%%: 1348-block  0
Aufruf  0 niemals ausgeführt
------------------
        -: 1349:
        -: 1350:      // element access
        -: 1351:      /**
        -: 1352:       *  @brief Subscript access to the data contained in the %deque.
        -: 1353:       *  @param __n The index of the element for which data should be
        -: 1354:       *  accessed.
        -: 1355:       *  @return  Read/write reference to data.
        -: 1356:       *
        -: 1357:       *  This operator allows for easy, array-style, data access.
        -: 1358:       *  Note that data access with this operator is unchecked and
        -: 1359:       *  out_of_range lookups are not defined. (For checked lookups
        -: 1360:       *  see at().)
        -: 1361:       */
        -: 1362:      _GLIBCXX_NODISCARD
        -: 1363:      reference
        -: 1364:      operator[](size_type __n) _GLIBCXX_NOEXCEPT
        -: 1365:      {
        -: 1366:	__glibcxx_requires_subscript(__n);
        -: 1367:	return this->_M_impl._M_start[difference_type(__n)];
        -: 1368:      }
        -: 1369:
        -: 1370:      /**
        -: 1371:       *  @brief Subscript access to the data contained in the %deque.
        -: 1372:       *  @param __n The index of the element for which data should be
        -: 1373:       *  accessed.
        -: 1374:       *  @return  Read-only (constant) reference to data.
        -: 1375:       *
        -: 1376:       *  This operator allows for easy, array-style, data access.
        -: 1377:       *  Note that data access with this operator is unchecked and
        -: 1378:       *  out_of_range lookups are not defined. (For checked lookups
        -: 1379:       *  see at().)
        -: 1380:       */
        -: 1381:      _GLIBCXX_NODISCARD
        -: 1382:      const_reference
        -: 1383:      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
        -: 1384:      {
        -: 1385:	__glibcxx_requires_subscript(__n);
        -: 1386:	return this->_M_impl._M_start[difference_type(__n)];
        -: 1387:      }
        -: 1388:
        -: 1389:    protected:
        -: 1390:      /// Safety check used only from at().
        -: 1391:      void
        -: 1392:      _M_range_check(size_type __n) const
        -: 1393:      {
        -: 1394:	if (__n >= this->size())
        -: 1395:	  __throw_out_of_range_fmt(__N("deque::_M_range_check: __n "
        -: 1396:				       "(which is %zu)>= this->size() "
        -: 1397:				       "(which is %zu)"),
        -: 1398:				   __n, this->size());
        -: 1399:      }
        -: 1400:
        -: 1401:    public:
        -: 1402:      /**
        -: 1403:       *  @brief  Provides access to the data contained in the %deque.
        -: 1404:       *  @param __n The index of the element for which data should be
        -: 1405:       *  accessed.
        -: 1406:       *  @return  Read/write reference to data.
        -: 1407:       *  @throw  std::out_of_range  If @a __n is an invalid index.
        -: 1408:       *
        -: 1409:       *  This function provides for safer data access.  The parameter
        -: 1410:       *  is first checked that it is in the range of the deque.  The
        -: 1411:       *  function throws out_of_range if the check fails.
        -: 1412:       */
        -: 1413:      reference
        -: 1414:      at(size_type __n)
        -: 1415:      {
        -: 1416:	_M_range_check(__n);
        -: 1417:	return (*this)[__n];
        -: 1418:      }
        -: 1419:
        -: 1420:      /**
        -: 1421:       *  @brief  Provides access to the data contained in the %deque.
        -: 1422:       *  @param __n The index of the element for which data should be
        -: 1423:       *  accessed.
        -: 1424:       *  @return  Read-only (constant) reference to data.
        -: 1425:       *  @throw  std::out_of_range  If @a __n is an invalid index.
        -: 1426:       *
        -: 1427:       *  This function provides for safer data access.  The parameter is first
        -: 1428:       *  checked that it is in the range of the deque.  The function throws
        -: 1429:       *  out_of_range if the check fails.
        -: 1430:       */
        -: 1431:      const_reference
        -: 1432:      at(size_type __n) const
        -: 1433:      {
        -: 1434:	_M_range_check(__n);
        -: 1435:	return (*this)[__n];
        -: 1436:      }
        -: 1437:
        -: 1438:      /**
        -: 1439:       *  Returns a read/write reference to the data at the first
        -: 1440:       *  element of the %deque.
        -: 1441:       */
        -: 1442:      _GLIBCXX_NODISCARD
        -: 1443:      reference
        -: 1444:      front() _GLIBCXX_NOEXCEPT
        -: 1445:      {
        -: 1446:	__glibcxx_requires_nonempty();
        -: 1447:	return *begin();
        -: 1448:      }
        -: 1449:
        -: 1450:      /**
        -: 1451:       *  Returns a read-only (constant) reference to the data at the first
        -: 1452:       *  element of the %deque.
        -: 1453:       */
        -: 1454:      _GLIBCXX_NODISCARD
        -: 1455:      const_reference
        -: 1456:      front() const _GLIBCXX_NOEXCEPT
        -: 1457:      {
        -: 1458:	__glibcxx_requires_nonempty();
        -: 1459:	return *begin();
        -: 1460:      }
        -: 1461:
        -: 1462:      /**
        -: 1463:       *  Returns a read/write reference to the data at the last element of the
        -: 1464:       *  %deque.
        -: 1465:       */
        -: 1466:      _GLIBCXX_NODISCARD
        -: 1467:      reference
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE4backEv called 0 returned 0% blocks executed 0%
    #####: 1468:      back() _GLIBCXX_NOEXCEPT
        -: 1469:      {
        -: 1470:	__glibcxx_requires_nonempty();
    #####: 1471:	iterator __tmp = end();
    %%%%%: 1471-block  0
Aufruf  0 niemals ausgeführt
    #####: 1472:	--__tmp;
Aufruf  0 niemals ausgeführt
    #####: 1473:	return *__tmp;
Aufruf  0 niemals ausgeführt
        -: 1474:      }
        -: 1475:
        -: 1476:      /**
        -: 1477:       *  Returns a read-only (constant) reference to the data at the last
        -: 1478:       *  element of the %deque.
        -: 1479:       */
        -: 1480:      _GLIBCXX_NODISCARD
        -: 1481:      const_reference
        -: 1482:      back() const _GLIBCXX_NOEXCEPT
        -: 1483:      {
        -: 1484:	__glibcxx_requires_nonempty();
        -: 1485:	const_iterator __tmp = end();
        -: 1486:	--__tmp;
        -: 1487:	return *__tmp;
        -: 1488:      }
        -: 1489:
        -: 1490:      // [23.2.1.2] modifiers
        -: 1491:      /**
        -: 1492:       *  @brief  Add data to the front of the %deque.
        -: 1493:       *  @param  __x  Data to be added.
        -: 1494:       *
        -: 1495:       *  This is a typical stack operation.  The function creates an
        -: 1496:       *  element at the front of the %deque and assigns the given
        -: 1497:       *  data to it.  Due to the nature of a %deque this operation
        -: 1498:       *  can be done in constant time.
        -: 1499:       */
        -: 1500:      void
        -: 1501:      push_front(const value_type& __x)
        -: 1502:      {
        -: 1503:	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
        -: 1504:	  {
        -: 1505:	    _Alloc_traits::construct(this->_M_impl,
        -: 1506:				     this->_M_impl._M_start._M_cur - 1,
        -: 1507:				     __x);
        -: 1508:	    --this->_M_impl._M_start._M_cur;
        -: 1509:	  }
        -: 1510:	else
        -: 1511:	  _M_push_front_aux(__x);
        -: 1512:      }
        -: 1513:
        -: 1514:#if __cplusplus >= 201103L
        -: 1515:      void
        -: 1516:      push_front(value_type&& __x)
        -: 1517:      { emplace_front(std::move(__x)); }
        -: 1518:
        -: 1519:      template<typename... _Args>
        -: 1520:#if __cplusplus > 201402L
        -: 1521:	reference
        -: 1522:#else
        -: 1523:	void
        -: 1524:#endif
        -: 1525:	emplace_front(_Args&&... __args);
        -: 1526:#endif
        -: 1527:
        -: 1528:      /**
        -: 1529:       *  @brief  Add data to the end of the %deque.
        -: 1530:       *  @param  __x  Data to be added.
        -: 1531:       *
        -: 1532:       *  This is a typical stack operation.  The function creates an
        -: 1533:       *  element at the end of the %deque and assigns the given data
        -: 1534:       *  to it.  Due to the nature of a %deque this operation can be
        -: 1535:       *  done in constant time.
        -: 1536:       */
        -: 1537:      void
    #####: 1538:      push_back(const value_type& __x)
        -: 1539:      {
    #####: 1540:	if (this->_M_impl._M_finish._M_cur
    #####: 1541:	    != this->_M_impl._M_finish._M_last - 1)
        -: 1542:	  {
    #####: 1543:	    _Alloc_traits::construct(this->_M_impl,
        -: 1544:				     this->_M_impl._M_finish._M_cur, __x);
    #####: 1545:	    ++this->_M_impl._M_finish._M_cur;
        -: 1546:	  }
        -: 1547:	else
    #####: 1548:	  _M_push_back_aux(__x);
    #####: 1549:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE9push_backERKS2_:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE9push_backERKS2_ called 0 returned 0% blocks executed 0%
    #####: 1538:      push_back(const value_type& __x)
        -: 1539:      {
    #####: 1540:	if (this->_M_impl._M_finish._M_cur
    #####: 1541:	    != this->_M_impl._M_finish._M_last - 1)
    %%%%%: 1541-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1542:	  {
    #####: 1543:	    _Alloc_traits::construct(this->_M_impl,
    %%%%%: 1543-block  0
Aufruf  0 niemals ausgeführt
        -: 1544:				     this->_M_impl._M_finish._M_cur, __x);
    #####: 1545:	    ++this->_M_impl._M_finish._M_cur;
        -: 1546:	  }
        -: 1547:	else
    #####: 1548:	  _M_push_back_aux(__x);
    %%%%%: 1548-block  0
Aufruf  0 niemals ausgeführt
    #####: 1549:      }
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE9push_backERKS2_:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE9push_backERKS2_ called 0 returned 0% blocks executed 0%
    #####: 1538:      push_back(const value_type& __x)
        -: 1539:      {
    #####: 1540:	if (this->_M_impl._M_finish._M_cur
    #####: 1541:	    != this->_M_impl._M_finish._M_last - 1)
    %%%%%: 1541-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1542:	  {
    #####: 1543:	    _Alloc_traits::construct(this->_M_impl,
    %%%%%: 1543-block  0
Aufruf  0 niemals ausgeführt
        -: 1544:				     this->_M_impl._M_finish._M_cur, __x);
    #####: 1545:	    ++this->_M_impl._M_finish._M_cur;
        -: 1546:	  }
        -: 1547:	else
    #####: 1548:	  _M_push_back_aux(__x);
    %%%%%: 1548-block  0
Aufruf  0 niemals ausgeführt
    #####: 1549:      }
------------------
        -: 1550:
        -: 1551:#if __cplusplus >= 201103L
        -: 1552:      void
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE9push_backEOS2_ called 0 returned 0% blocks executed 0%
    #####: 1553:      push_back(value_type&& __x)
    #####: 1554:      { emplace_back(std::move(__x)); }
    %%%%%: 1554-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 1555:
        -: 1556:      template<typename... _Args>
        -: 1557:#if __cplusplus > 201402L
        -: 1558:	reference
        -: 1559:#else
        -: 1560:	void
        -: 1561:#endif
        -: 1562:	emplace_back(_Args&&... __args);
        -: 1563:#endif
        -: 1564:
        -: 1565:      /**
        -: 1566:       *  @brief  Removes first element.
        -: 1567:       *
        -: 1568:       *  This is a typical stack operation.  It shrinks the %deque by one.
        -: 1569:       *
        -: 1570:       *  Note that no data is returned, and if the first element's data is
        -: 1571:       *  needed, it should be retrieved before pop_front() is called.
        -: 1572:       */
        -: 1573:      void
        -: 1574:      pop_front() _GLIBCXX_NOEXCEPT
        -: 1575:      {
        -: 1576:	__glibcxx_requires_nonempty();
        -: 1577:	if (this->_M_impl._M_start._M_cur
        -: 1578:	    != this->_M_impl._M_start._M_last - 1)
        -: 1579:	  {
        -: 1580:	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
        -: 1581:				   this->_M_impl._M_start._M_cur);
        -: 1582:	    ++this->_M_impl._M_start._M_cur;
        -: 1583:	  }
        -: 1584:	else
        -: 1585:	  _M_pop_front_aux();
        -: 1586:      }
        -: 1587:
        -: 1588:      /**
        -: 1589:       *  @brief  Removes last element.
        -: 1590:       *
        -: 1591:       *  This is a typical stack operation.  It shrinks the %deque by one.
        -: 1592:       *
        -: 1593:       *  Note that no data is returned, and if the last element's data is
        -: 1594:       *  needed, it should be retrieved before pop_back() is called.
        -: 1595:       */
        -: 1596:      void
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE8pop_backEv called 0 returned 0% blocks executed 0%
    #####: 1597:      pop_back() _GLIBCXX_NOEXCEPT
        -: 1598:      {
        -: 1599:	__glibcxx_requires_nonempty();
    #####: 1600:	if (this->_M_impl._M_finish._M_cur
    #####: 1601:	    != this->_M_impl._M_finish._M_first)
    %%%%%: 1601-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1602:	  {
    #####: 1603:	    --this->_M_impl._M_finish._M_cur;
    #####: 1604:	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
    %%%%%: 1604-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 1605:				   this->_M_impl._M_finish._M_cur);
        -: 1606:	  }
        -: 1607:	else
    #####: 1608:	  _M_pop_back_aux();
    %%%%%: 1608-block  0
Aufruf  0 niemals ausgeführt
    #####: 1609:      }
        -: 1610:
        -: 1611:#if __cplusplus >= 201103L
        -: 1612:      /**
        -: 1613:       *  @brief  Inserts an object in %deque before specified iterator.
        -: 1614:       *  @param  __position  A const_iterator into the %deque.
        -: 1615:       *  @param  __args  Arguments.
        -: 1616:       *  @return  An iterator that points to the inserted data.
        -: 1617:       *
        -: 1618:       *  This function will insert an object of type T constructed
        -: 1619:       *  with T(std::forward<Args>(args)...) before the specified location.
        -: 1620:       */
        -: 1621:      template<typename... _Args>
        -: 1622:	iterator
        -: 1623:	emplace(const_iterator __position, _Args&&... __args);
        -: 1624:
        -: 1625:      /**
        -: 1626:       *  @brief  Inserts given value into %deque before specified iterator.
        -: 1627:       *  @param  __position  A const_iterator into the %deque.
        -: 1628:       *  @param  __x  Data to be inserted.
        -: 1629:       *  @return  An iterator that points to the inserted data.
        -: 1630:       *
        -: 1631:       *  This function will insert a copy of the given value before the
        -: 1632:       *  specified location.
        -: 1633:       */
        -: 1634:      iterator
        -: 1635:      insert(const_iterator __position, const value_type& __x);
        -: 1636:#else
        -: 1637:      /**
        -: 1638:       *  @brief  Inserts given value into %deque before specified iterator.
        -: 1639:       *  @param  __position  An iterator into the %deque.
        -: 1640:       *  @param  __x  Data to be inserted.
        -: 1641:       *  @return  An iterator that points to the inserted data.
        -: 1642:       *
        -: 1643:       *  This function will insert a copy of the given value before the
        -: 1644:       *  specified location.
        -: 1645:       */
        -: 1646:      iterator
        -: 1647:      insert(iterator __position, const value_type& __x);
        -: 1648:#endif
        -: 1649:
        -: 1650:#if __cplusplus >= 201103L
        -: 1651:      /**
        -: 1652:       *  @brief  Inserts given rvalue into %deque before specified iterator.
        -: 1653:       *  @param  __position  A const_iterator into the %deque.
        -: 1654:       *  @param  __x  Data to be inserted.
        -: 1655:       *  @return  An iterator that points to the inserted data.
        -: 1656:       *
        -: 1657:       *  This function will insert a copy of the given rvalue before the
        -: 1658:       *  specified location.
        -: 1659:       */
        -: 1660:      iterator
        -: 1661:      insert(const_iterator __position, value_type&& __x)
        -: 1662:      { return emplace(__position, std::move(__x)); }
        -: 1663:
        -: 1664:      /**
        -: 1665:       *  @brief  Inserts an initializer list into the %deque.
        -: 1666:       *  @param  __p  An iterator into the %deque.
        -: 1667:       *  @param  __l  An initializer_list.
        -: 1668:       *  @return  An iterator that points to the inserted data.
        -: 1669:       *
        -: 1670:       *  This function will insert copies of the data in the
        -: 1671:       *  initializer_list @a __l into the %deque before the location
        -: 1672:       *  specified by @a __p.  This is known as <em>list insert</em>.
        -: 1673:       */
        -: 1674:      iterator
        -: 1675:      insert(const_iterator __p, initializer_list<value_type> __l)
        -: 1676:      {
        -: 1677:	auto __offset = __p - cbegin();
        -: 1678:	_M_range_insert_aux(__p._M_const_cast(), __l.begin(), __l.end(),
        -: 1679:			    std::random_access_iterator_tag());
        -: 1680:	return begin() + __offset;
        -: 1681:      }
        -: 1682:
        -: 1683:      /**
        -: 1684:       *  @brief  Inserts a number of copies of given data into the %deque.
        -: 1685:       *  @param  __position  A const_iterator into the %deque.
        -: 1686:       *  @param  __n  Number of elements to be inserted.
        -: 1687:       *  @param  __x  Data to be inserted.
        -: 1688:       *  @return  An iterator that points to the inserted data.
        -: 1689:       *
        -: 1690:       *  This function will insert a specified number of copies of the given
        -: 1691:       *  data before the location specified by @a __position.
        -: 1692:       */
        -: 1693:      iterator
        -: 1694:      insert(const_iterator __position, size_type __n, const value_type& __x)
        -: 1695:      {
        -: 1696:	difference_type __offset = __position - cbegin();
        -: 1697:	_M_fill_insert(__position._M_const_cast(), __n, __x);
        -: 1698:	return begin() + __offset;
        -: 1699:      }
        -: 1700:#else
        -: 1701:      /**
        -: 1702:       *  @brief  Inserts a number of copies of given data into the %deque.
        -: 1703:       *  @param  __position  An iterator into the %deque.
        -: 1704:       *  @param  __n  Number of elements to be inserted.
        -: 1705:       *  @param  __x  Data to be inserted.
        -: 1706:       *
        -: 1707:       *  This function will insert a specified number of copies of the given
        -: 1708:       *  data before the location specified by @a __position.
        -: 1709:       */
        -: 1710:      void
        -: 1711:      insert(iterator __position, size_type __n, const value_type& __x)
        -: 1712:      { _M_fill_insert(__position, __n, __x); }
        -: 1713:#endif
        -: 1714:
        -: 1715:#if __cplusplus >= 201103L
        -: 1716:      /**
        -: 1717:       *  @brief  Inserts a range into the %deque.
        -: 1718:       *  @param  __position  A const_iterator into the %deque.
        -: 1719:       *  @param  __first  An input iterator.
        -: 1720:       *  @param  __last   An input iterator.
        -: 1721:       *  @return  An iterator that points to the inserted data.
        -: 1722:       *
        -: 1723:       *  This function will insert copies of the data in the range
        -: 1724:       *  [__first,__last) into the %deque before the location specified
        -: 1725:       *  by @a __position.  This is known as <em>range insert</em>.
        -: 1726:       */
        -: 1727:      template<typename _InputIterator,
        -: 1728:	       typename = std::_RequireInputIter<_InputIterator>>
        -: 1729:	iterator
        -: 1730:	insert(const_iterator __position, _InputIterator __first,
        -: 1731:	       _InputIterator __last)
        -: 1732:	{
        -: 1733:	  difference_type __offset = __position - cbegin();
        -: 1734:	  _M_range_insert_aux(__position._M_const_cast(), __first, __last,
        -: 1735:			      std::__iterator_category(__first));
        -: 1736:	  return begin() + __offset;
        -: 1737:	}
        -: 1738:#else
        -: 1739:      /**
        -: 1740:       *  @brief  Inserts a range into the %deque.
        -: 1741:       *  @param  __position  An iterator into the %deque.
        -: 1742:       *  @param  __first  An input iterator.
        -: 1743:       *  @param  __last   An input iterator.
        -: 1744:       *
        -: 1745:       *  This function will insert copies of the data in the range
        -: 1746:       *  [__first,__last) into the %deque before the location specified
        -: 1747:       *  by @a __position.  This is known as <em>range insert</em>.
        -: 1748:       */
        -: 1749:      template<typename _InputIterator>
        -: 1750:	void
        -: 1751:	insert(iterator __position, _InputIterator __first,
        -: 1752:	       _InputIterator __last)
        -: 1753:	{
        -: 1754:	  // Check whether it's an integral type.  If so, it's not an iterator.
        -: 1755:	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
        -: 1756:	  _M_insert_dispatch(__position, __first, __last, _Integral());
        -: 1757:	}
        -: 1758:#endif
        -: 1759:
        -: 1760:      /**
        -: 1761:       *  @brief  Remove element at given position.
        -: 1762:       *  @param  __position  Iterator pointing to element to be erased.
        -: 1763:       *  @return  An iterator pointing to the next element (or end()).
        -: 1764:       *
        -: 1765:       *  This function will erase the element at the given position and thus
        -: 1766:       *  shorten the %deque by one.
        -: 1767:       *
        -: 1768:       *  The user is cautioned that
        -: 1769:       *  this function only erases the element, and that if the element is
        -: 1770:       *  itself a pointer, the pointed-to memory is not touched in any way.
        -: 1771:       *  Managing the pointer is the user's responsibility.
        -: 1772:       */
        -: 1773:      iterator
        -: 1774:#if __cplusplus >= 201103L
        -: 1775:      erase(const_iterator __position)
        -: 1776:#else
        -: 1777:      erase(iterator __position)
        -: 1778:#endif
        -: 1779:      { return _M_erase(__position._M_const_cast()); }
        -: 1780:
        -: 1781:      /**
        -: 1782:       *  @brief  Remove a range of elements.
        -: 1783:       *  @param  __first  Iterator pointing to the first element to be erased.
        -: 1784:       *  @param  __last  Iterator pointing to one past the last element to be
        -: 1785:       *                erased.
        -: 1786:       *  @return  An iterator pointing to the element pointed to by @a last
        -: 1787:       *           prior to erasing (or end()).
        -: 1788:       *
        -: 1789:       *  This function will erase the elements in the range
        -: 1790:       *  [__first,__last) and shorten the %deque accordingly.
        -: 1791:       *
        -: 1792:       *  The user is cautioned that
        -: 1793:       *  this function only erases the elements, and that if the elements
        -: 1794:       *  themselves are pointers, the pointed-to memory is not touched in any
        -: 1795:       *  way.  Managing the pointer is the user's responsibility.
        -: 1796:       */
        -: 1797:      iterator
        -: 1798:#if __cplusplus >= 201103L
        -: 1799:      erase(const_iterator __first, const_iterator __last)
        -: 1800:#else
        -: 1801:      erase(iterator __first, iterator __last)
        -: 1802:#endif
        -: 1803:      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }
        -: 1804:
        -: 1805:      /**
        -: 1806:       *  @brief  Swaps data with another %deque.
        -: 1807:       *  @param  __x  A %deque of the same element and allocator types.
        -: 1808:       *
        -: 1809:       *  This exchanges the elements between two deques in constant time.
        -: 1810:       *  (Four pointers, so it should be quite fast.)
        -: 1811:       *  Note that the global std::swap() function is specialized such that
        -: 1812:       *  std::swap(d1,d2) will feed to this function.
        -: 1813:       *
        -: 1814:       *  Whether the allocators are swapped depends on the allocator traits.
        -: 1815:       */
        -: 1816:      void
        -: 1817:      swap(deque& __x) _GLIBCXX_NOEXCEPT
        -: 1818:      {
        -: 1819:#if __cplusplus >= 201103L
        -: 1820:	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
        -: 1821:			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
        -: 1822:#endif
        -: 1823:	_M_impl._M_swap_data(__x._M_impl);
        -: 1824:	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
        -: 1825:				  __x._M_get_Tp_allocator());
        -: 1826:      }
        -: 1827:
        -: 1828:      /**
        -: 1829:       *  Erases all the elements.  Note that this function only erases the
        -: 1830:       *  elements, and that if the elements themselves are pointers, the
        -: 1831:       *  pointed-to memory is not touched in any way.  Managing the pointer is
        -: 1832:       *  the user's responsibility.
        -: 1833:       */
        -: 1834:      void
    #####: 1835:      clear() _GLIBCXX_NOEXCEPT
    #####: 1836:      { _M_erase_at_end(begin()); }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE5clearEv:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE5clearEv called 0 returned 0% blocks executed 0%
    #####: 1835:      clear() _GLIBCXX_NOEXCEPT
    #####: 1836:      { _M_erase_at_end(begin()); }
    %%%%%: 1836-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5clearEv:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE5clearEv called 0 returned 0% blocks executed 0%
    #####: 1835:      clear() _GLIBCXX_NOEXCEPT
    #####: 1836:      { _M_erase_at_end(begin()); }
    %%%%%: 1836-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
        -: 1837:
        -: 1838:    protected:
        -: 1839:      // Internal constructor functions follow.
        -: 1840:
        -: 1841:#if __cplusplus < 201103L
        -: 1842:      // called by the range constructor to implement [23.1.1]/9
        -: 1843:
        -: 1844:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1845:      // 438. Ambiguity in the "do the right thing" clause
        -: 1846:      template<typename _Integer>
        -: 1847:	void
        -: 1848:	_M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
        -: 1849:	{
        -: 1850:	  _M_initialize_map(_S_check_init_len(static_cast<size_type>(__n),
        -: 1851:					      _M_get_Tp_allocator()));
        -: 1852:	  _M_fill_initialize(__x);
        -: 1853:	}
        -: 1854:
        -: 1855:      // called by the range constructor to implement [23.1.1]/9
        -: 1856:      template<typename _InputIterator>
        -: 1857:	void
        -: 1858:	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        -: 1859:			       __false_type)
        -: 1860:	{
        -: 1861:	  _M_range_initialize(__first, __last,
        -: 1862:			      std::__iterator_category(__first));
        -: 1863:	}
        -: 1864:#endif
        -: 1865:
        -: 1866:      static size_t
        -: 1867:      _S_check_init_len(size_t __n, const allocator_type& __a)
        -: 1868:      {
        -: 1869:	if (__n > _S_max_size(__a))
        -: 1870:	  __throw_length_error(
        -: 1871:	      __N("cannot create std::deque larger than max_size()"));
        -: 1872:	return __n;
        -: 1873:      }
        -: 1874:
        -: 1875:      static size_type
    #####: 1876:      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        -: 1877:      {
    #####: 1878:	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
    #####: 1879:	const size_t __allocmax = _Alloc_traits::max_size(__a);
    #####: 1880:	return (std::min)(__diffmax, __allocmax);
        -: 1881:      }
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EE11_S_max_sizeERKS3_:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE11_S_max_sizeERKS3_ called 0 returned 0% blocks executed 0%
    #####: 1876:      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        -: 1877:      {
    #####: 1878:	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
    #####: 1879:	const size_t __allocmax = _Alloc_traits::max_size(__a);
    %%%%%: 1879-block  0
Aufruf  0 niemals ausgeführt
    #####: 1880:	return (std::min)(__diffmax, __allocmax);
Aufruf  0 niemals ausgeführt
        -: 1881:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE11_S_max_sizeERKS3_:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE11_S_max_sizeERKS3_ called 0 returned 0% blocks executed 0%
    #####: 1876:      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        -: 1877:      {
    #####: 1878:	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
    #####: 1879:	const size_t __allocmax = _Alloc_traits::max_size(__a);
    %%%%%: 1879-block  0
Aufruf  0 niemals ausgeführt
    #####: 1880:	return (std::min)(__diffmax, __allocmax);
Aufruf  0 niemals ausgeführt
        -: 1881:      }
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE11_S_max_sizeERKS3_:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE11_S_max_sizeERKS3_ called 0 returned 0% blocks executed 0%
    #####: 1876:      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        -: 1877:      {
    #####: 1878:	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
    #####: 1879:	const size_t __allocmax = _Alloc_traits::max_size(__a);
    %%%%%: 1879-block  0
Aufruf  0 niemals ausgeführt
    #####: 1880:	return (std::min)(__diffmax, __allocmax);
Aufruf  0 niemals ausgeführt
        -: 1881:      }
------------------
        -: 1882:
        -: 1883:      // called by the second initialize_dispatch above
        -: 1884:      ///@{
        -: 1885:      /**
        -: 1886:       *  @brief Fills the deque with whatever is in [first,last).
        -: 1887:       *  @param  __first  An input iterator.
        -: 1888:       *  @param  __last  An input iterator.
        -: 1889:       *  @return   Nothing.
        -: 1890:       *
        -: 1891:       *  If the iterators are actually forward iterators (or better), then the
        -: 1892:       *  memory layout can be done all at once.  Else we move forward using
        -: 1893:       *  push_back on each value from the iterator.
        -: 1894:       */
        -: 1895:      template<typename _InputIterator>
        -: 1896:	void
        -: 1897:	_M_range_initialize(_InputIterator __first, _InputIterator __last,
        -: 1898:			    std::input_iterator_tag);
        -: 1899:
        -: 1900:      // called by the second initialize_dispatch above
        -: 1901:      template<typename _ForwardIterator>
        -: 1902:	void
        -: 1903:	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
        -: 1904:			    std::forward_iterator_tag);
        -: 1905:      ///@}
        -: 1906:
        -: 1907:      /**
        -: 1908:       *  @brief Fills the %deque with copies of value.
        -: 1909:       *  @param  __value  Initial value.
        -: 1910:       *  @return   Nothing.
        -: 1911:       *  @pre _M_start and _M_finish have already been initialized,
        -: 1912:       *  but none of the %deque's elements have yet been constructed.
        -: 1913:       *
        -: 1914:       *  This function is called only when the user provides an explicit size
        -: 1915:       *  (with or without an explicit exemplar value).
        -: 1916:       */
        -: 1917:      void
        -: 1918:      _M_fill_initialize(const value_type& __value);
        -: 1919:
        -: 1920:#if __cplusplus >= 201103L
        -: 1921:      // called by deque(n).
        -: 1922:      void
        -: 1923:      _M_default_initialize();
        -: 1924:#endif
        -: 1925:
        -: 1926:      // Internal assign functions follow.  The *_aux functions do the actual
        -: 1927:      // assignment work for the range versions.
        -: 1928:
        -: 1929:#if __cplusplus < 201103L
        -: 1930:      // called by the range assign to implement [23.1.1]/9
        -: 1931:
        -: 1932:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1933:      // 438. Ambiguity in the "do the right thing" clause
        -: 1934:      template<typename _Integer>
        -: 1935:	void
        -: 1936:	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        -: 1937:	{ _M_fill_assign(__n, __val); }
        -: 1938:
        -: 1939:      // called by the range assign to implement [23.1.1]/9
        -: 1940:      template<typename _InputIterator>
        -: 1941:	void
        -: 1942:	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
        -: 1943:			   __false_type)
        -: 1944:	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
        -: 1945:#endif
        -: 1946:
        -: 1947:      // called by the second assign_dispatch above
        -: 1948:      template<typename _InputIterator>
        -: 1949:	void
        -: 1950:	_M_assign_aux(_InputIterator __first, _InputIterator __last,
        -: 1951:		      std::input_iterator_tag);
        -: 1952:
        -: 1953:      // called by the second assign_dispatch above
        -: 1954:      template<typename _ForwardIterator>
        -: 1955:	void
        -: 1956:	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        -: 1957:		      std::forward_iterator_tag)
        -: 1958:	{
        -: 1959:	  const size_type __len = std::distance(__first, __last);
        -: 1960:	  if (__len > size())
        -: 1961:	    {
        -: 1962:	      _ForwardIterator __mid = __first;
        -: 1963:	      std::advance(__mid, size());
        -: 1964:	      std::copy(__first, __mid, begin());
        -: 1965:	      _M_range_insert_aux(end(), __mid, __last,
        -: 1966:				  std::__iterator_category(__first));
        -: 1967:	    }
        -: 1968:	  else
        -: 1969:	    _M_erase_at_end(std::copy(__first, __last, begin()));
        -: 1970:	}
        -: 1971:
        -: 1972:      // Called by assign(n,t), and the range assign when it turns out
        -: 1973:      // to be the same thing.
        -: 1974:      void
        -: 1975:      _M_fill_assign(size_type __n, const value_type& __val)
        -: 1976:      {
        -: 1977:	if (__n > size())
        -: 1978:	  {
        -: 1979:	    std::fill(begin(), end(), __val);
        -: 1980:	    _M_fill_insert(end(), __n - size(), __val);
        -: 1981:	  }
        -: 1982:	else
        -: 1983:	  {
        -: 1984:	    _M_erase_at_end(begin() + difference_type(__n));
        -: 1985:	    std::fill(begin(), end(), __val);
        -: 1986:	  }
        -: 1987:      }
        -: 1988:
        -: 1989:      ///@{
        -: 1990:      /// Helper functions for push_* and pop_*.
        -: 1991:#if __cplusplus < 201103L
        -: 1992:      void _M_push_back_aux(const value_type&);
        -: 1993:
        -: 1994:      void _M_push_front_aux(const value_type&);
        -: 1995:#else
        -: 1996:      template<typename... _Args>
        -: 1997:	void _M_push_back_aux(_Args&&... __args);
        -: 1998:
        -: 1999:      template<typename... _Args>
        -: 2000:	void _M_push_front_aux(_Args&&... __args);
        -: 2001:#endif
        -: 2002:
        -: 2003:      void _M_pop_back_aux();
        -: 2004:
        -: 2005:      void _M_pop_front_aux();
        -: 2006:      ///@}
        -: 2007:
        -: 2008:      // Internal insert functions follow.  The *_aux functions do the actual
        -: 2009:      // insertion work when all shortcuts fail.
        -: 2010:
        -: 2011:#if __cplusplus < 201103L
        -: 2012:      // called by the range insert to implement [23.1.1]/9
        -: 2013:
        -: 2014:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 2015:      // 438. Ambiguity in the "do the right thing" clause
        -: 2016:      template<typename _Integer>
        -: 2017:	void
        -: 2018:	_M_insert_dispatch(iterator __pos,
        -: 2019:			   _Integer __n, _Integer __x, __true_type)
        -: 2020:	{ _M_fill_insert(__pos, __n, __x); }
        -: 2021:
        -: 2022:      // called by the range insert to implement [23.1.1]/9
        -: 2023:      template<typename _InputIterator>
        -: 2024:	void
        -: 2025:	_M_insert_dispatch(iterator __pos,
        -: 2026:			   _InputIterator __first, _InputIterator __last,
        -: 2027:			   __false_type)
        -: 2028:	{
        -: 2029:	  _M_range_insert_aux(__pos, __first, __last,
        -: 2030:			      std::__iterator_category(__first));
        -: 2031:	}
        -: 2032:#endif
        -: 2033:
        -: 2034:      // called by the second insert_dispatch above
        -: 2035:      template<typename _InputIterator>
        -: 2036:	void
        -: 2037:	_M_range_insert_aux(iterator __pos, _InputIterator __first,
        -: 2038:			    _InputIterator __last, std::input_iterator_tag);
        -: 2039:
        -: 2040:      // called by the second insert_dispatch above
        -: 2041:      template<typename _ForwardIterator>
        -: 2042:	void
        -: 2043:	_M_range_insert_aux(iterator __pos, _ForwardIterator __first,
        -: 2044:			    _ForwardIterator __last, std::forward_iterator_tag);
        -: 2045:
        -: 2046:      // Called by insert(p,n,x), and the range insert when it turns out to be
        -: 2047:      // the same thing.  Can use fill functions in optimal situations,
        -: 2048:      // otherwise passes off to insert_aux(p,n,x).
        -: 2049:      void
        -: 2050:      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
        -: 2051:
        -: 2052:      // called by insert(p,x)
        -: 2053:#if __cplusplus < 201103L
        -: 2054:      iterator
        -: 2055:      _M_insert_aux(iterator __pos, const value_type& __x);
        -: 2056:#else
        -: 2057:      template<typename... _Args>
        -: 2058:	iterator
        -: 2059:	_M_insert_aux(iterator __pos, _Args&&... __args);
        -: 2060:#endif
        -: 2061:
        -: 2062:      // called by insert(p,n,x) via fill_insert
        -: 2063:      void
        -: 2064:      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);
        -: 2065:
        -: 2066:      // called by range_insert_aux for forward iterators
        -: 2067:      template<typename _ForwardIterator>
        -: 2068:	void
        -: 2069:	_M_insert_aux(iterator __pos,
        -: 2070:		      _ForwardIterator __first, _ForwardIterator __last,
        -: 2071:		      size_type __n);
        -: 2072:
        -: 2073:
        -: 2074:      // Internal erase functions follow.
        -: 2075:
        -: 2076:      void
        -: 2077:      _M_destroy_data_aux(iterator __first, iterator __last);
        -: 2078:
        -: 2079:      // Called by ~deque().
        -: 2080:      // NB: Doesn't deallocate the nodes.
        -: 2081:      template<typename _Alloc1>
        -: 2082:	void
        -: 2083:	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        -: 2084:	{ _M_destroy_data_aux(__first, __last); }
        -: 2085:
        -: 2086:      void
    #####: 2087:      _M_destroy_data(iterator __first, iterator __last,
        -: 2088:		      const std::allocator<_Tp>&)
        -: 2089:      {
        -: 2090:	if (!__has_trivial_destructor(value_type))
    #####: 2091:	  _M_destroy_data_aux(__first, __last);
    #####: 2092:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_ called 0 returned 0% blocks executed 0%
    #####: 2087:      _M_destroy_data(iterator __first, iterator __last,
    %%%%%: 2087-block  0
        -: 2088:		      const std::allocator<_Tp>&)
        -: 2089:      {
        -: 2090:	if (!__has_trivial_destructor(value_type))
    #####: 2091:	  _M_destroy_data_aux(__first, __last);
    %%%%%: 2091-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2091-block  1
    $$$$$: 2091-block  2
    #####: 2092:      }
    %%%%%: 2092-block  0
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_ called 0 returned 0% blocks executed 0%
    #####: 2087:      _M_destroy_data(iterator __first, iterator __last,
    %%%%%: 2087-block  0
        -: 2088:		      const std::allocator<_Tp>&)
        -: 2089:      {
        -: 2090:	if (!__has_trivial_destructor(value_type))
    #####: 2091:	  _M_destroy_data_aux(__first, __last);
    %%%%%: 2091-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2091-block  1
    $$$$$: 2091-block  2
    #####: 2092:      }
    %%%%%: 2092-block  0
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE15_M_destroy_dataESt15_Deque_iteratorIS2_RS2_PS2_ES8_RKS3_ called 0 returned 0% blocks executed 0%
    #####: 2087:      _M_destroy_data(iterator __first, iterator __last,
    %%%%%: 2087-block  0
        -: 2088:		      const std::allocator<_Tp>&)
        -: 2089:      {
        -: 2090:	if (!__has_trivial_destructor(value_type))
        -: 2091:	  _M_destroy_data_aux(__first, __last);
    #####: 2092:      }
------------------
        -: 2093:
        -: 2094:      // Called by erase(q1, q2).
        -: 2095:      void
        -: 2096:      _M_erase_at_begin(iterator __pos)
        -: 2097:      {
        -: 2098:	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
        -: 2099:	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
        -: 2100:	this->_M_impl._M_start = __pos;
        -: 2101:      }
        -: 2102:
        -: 2103:      // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
        -: 2104:      // _M_fill_assign, operator=.
        -: 2105:      void
    #####: 2106:      _M_erase_at_end(iterator __pos)
        -: 2107:      {
    #####: 2108:	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
    #####: 2109:	_M_destroy_nodes(__pos._M_node + 1,
    #####: 2110:			 this->_M_impl._M_finish._M_node + 1);
    #####: 2111:	this->_M_impl._M_finish = __pos;
    #####: 2112:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_erase_at_endESt15_Deque_iteratorIS2_RS2_PS2_E:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE15_M_erase_at_endESt15_Deque_iteratorIS2_RS2_PS2_E called 0 returned 0% blocks executed 0%
    #####: 2106:      _M_erase_at_end(iterator __pos)
        -: 2107:      {
    #####: 2108:	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
    %%%%%: 2108-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    $$$$$: 2108-block  1
    #####: 2109:	_M_destroy_nodes(__pos._M_node + 1,
    #####: 2110:			 this->_M_impl._M_finish._M_node + 1);
    %%%%%: 2110-block  0
Aufruf  0 niemals ausgeführt
    #####: 2111:	this->_M_impl._M_finish = __pos;
    #####: 2112:      }
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE15_M_erase_at_endESt15_Deque_iteratorIS2_RS2_PS2_E:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE15_M_erase_at_endESt15_Deque_iteratorIS2_RS2_PS2_E called 0 returned 0% blocks executed 0%
    #####: 2106:      _M_erase_at_end(iterator __pos)
        -: 2107:      {
    #####: 2108:	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
    %%%%%: 2108-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    $$$$$: 2108-block  1
    #####: 2109:	_M_destroy_nodes(__pos._M_node + 1,
    #####: 2110:			 this->_M_impl._M_finish._M_node + 1);
    %%%%%: 2110-block  0
Aufruf  0 niemals ausgeführt
    #####: 2111:	this->_M_impl._M_finish = __pos;
    #####: 2112:      }
------------------
        -: 2113:
        -: 2114:      iterator
        -: 2115:      _M_erase(iterator __pos);
        -: 2116:
        -: 2117:      iterator
        -: 2118:      _M_erase(iterator __first, iterator __last);
        -: 2119:
        -: 2120:#if __cplusplus >= 201103L
        -: 2121:      // Called by resize(sz).
        -: 2122:      void
        -: 2123:      _M_default_append(size_type __n);
        -: 2124:
        -: 2125:      bool
        -: 2126:      _M_shrink_to_fit();
        -: 2127:#endif
        -: 2128:
        -: 2129:      ///@{
        -: 2130:      /// Memory-handling helpers for the previous internal insert functions.
        -: 2131:      iterator
        -: 2132:      _M_reserve_elements_at_front(size_type __n)
        -: 2133:      {
        -: 2134:	const size_type __vacancies = this->_M_impl._M_start._M_cur
        -: 2135:				      - this->_M_impl._M_start._M_first;
        -: 2136:	if (__n > __vacancies)
        -: 2137:	  _M_new_elements_at_front(__n - __vacancies);
        -: 2138:	return this->_M_impl._M_start - difference_type(__n);
        -: 2139:      }
        -: 2140:
        -: 2141:      iterator
    #####: 2142:      _M_reserve_elements_at_back(size_type __n)
        -: 2143:      {
    #####: 2144:	const size_type __vacancies = (this->_M_impl._M_finish._M_last
    #####: 2145:				       - this->_M_impl._M_finish._M_cur) - 1;
    #####: 2146:	if (__n > __vacancies)
    #####: 2147:	  _M_new_elements_at_back(__n - __vacancies);
    #####: 2148:	return this->_M_impl._M_finish + difference_type(__n);
        -: 2149:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE27_M_reserve_elements_at_backEm:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE27_M_reserve_elements_at_backEm called 0 returned 0% blocks executed 0%
    #####: 2142:      _M_reserve_elements_at_back(size_type __n)
        -: 2143:      {
    #####: 2144:	const size_type __vacancies = (this->_M_impl._M_finish._M_last
    #####: 2145:				       - this->_M_impl._M_finish._M_cur) - 1;
    #####: 2146:	if (__n > __vacancies)
    %%%%%: 2146-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2147:	  _M_new_elements_at_back(__n - __vacancies);
    %%%%%: 2147-block  0
Aufruf  0 niemals ausgeführt
    #####: 2148:	return this->_M_impl._M_finish + difference_type(__n);
    %%%%%: 2148-block  0
Aufruf  0 niemals ausgeführt
        -: 2149:      }
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE27_M_reserve_elements_at_backEm:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE27_M_reserve_elements_at_backEm called 0 returned 0% blocks executed 0%
    #####: 2142:      _M_reserve_elements_at_back(size_type __n)
        -: 2143:      {
    #####: 2144:	const size_type __vacancies = (this->_M_impl._M_finish._M_last
    #####: 2145:				       - this->_M_impl._M_finish._M_cur) - 1;
    #####: 2146:	if (__n > __vacancies)
    %%%%%: 2146-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2147:	  _M_new_elements_at_back(__n - __vacancies);
    %%%%%: 2147-block  0
Aufruf  0 niemals ausgeführt
    #####: 2148:	return this->_M_impl._M_finish + difference_type(__n);
    %%%%%: 2148-block  0
Aufruf  0 niemals ausgeführt
        -: 2149:      }
------------------
        -: 2150:
        -: 2151:      void
        -: 2152:      _M_new_elements_at_front(size_type __new_elements);
        -: 2153:
        -: 2154:      void
        -: 2155:      _M_new_elements_at_back(size_type __new_elements);
        -: 2156:      ///@}
        -: 2157:
        -: 2158:
        -: 2159:      ///@{
        -: 2160:      /**
        -: 2161:       *  @brief Memory-handling helpers for the major %map.
        -: 2162:       *
        -: 2163:       *  Makes sure the _M_map has space for new nodes.  Does not
        -: 2164:       *  actually add the nodes.  Can invalidate _M_map pointers.
        -: 2165:       *  (And consequently, %deque iterators.)
        -: 2166:       */
        -: 2167:      void
    #####: 2168:      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
        -: 2169:      {
    #####: 2170:	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
    #####: 2171:	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
    #####: 2172:	  _M_reallocate_map(__nodes_to_add, false);
    #####: 2173:      }
------------------
_ZNSt5dequeIPN4Json5ValueESaIS2_EE22_M_reserve_map_at_backEm:
function _ZNSt5dequeIPN4Json5ValueESaIS2_EE22_M_reserve_map_at_backEm called 0 returned 0% blocks executed 0%
    #####: 2168:      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
        -: 2169:      {
    #####: 2170:	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
    #####: 2171:	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
    %%%%%: 2171-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2172:	  _M_reallocate_map(__nodes_to_add, false);
    %%%%%: 2172-block  0
Aufruf  0 niemals ausgeführt
    #####: 2173:      }
------------------
_ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE22_M_reserve_map_at_backEm:
function _ZNSt5dequeIN4Json9OurReader9ErrorInfoESaIS2_EE22_M_reserve_map_at_backEm called 0 returned 0% blocks executed 0%
    #####: 2168:      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
        -: 2169:      {
    #####: 2170:	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
    #####: 2171:	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
    %%%%%: 2171-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2172:	  _M_reallocate_map(__nodes_to_add, false);
    %%%%%: 2172-block  0
Aufruf  0 niemals ausgeführt
    #####: 2173:      }
------------------
_ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE22_M_reserve_map_at_backEm:
function _ZNSt5dequeIN4Json6Reader9ErrorInfoESaIS2_EE22_M_reserve_map_at_backEm called 0 returned 0% blocks executed 0%
    #####: 2168:      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
        -: 2169:      {
    #####: 2170:	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
    #####: 2171:	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
    %%%%%: 2171-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2172:	  _M_reallocate_map(__nodes_to_add, false);
    %%%%%: 2172-block  0
Aufruf  0 niemals ausgeführt
    #####: 2173:      }
------------------
        -: 2174:
        -: 2175:      void
        -: 2176:      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
        -: 2177:      {
        -: 2178:	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
        -: 2179:				       - this->_M_impl._M_map))
        -: 2180:	  _M_reallocate_map(__nodes_to_add, true);
        -: 2181:      }
        -: 2182:
        -: 2183:      void
        -: 2184:      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);
        -: 2185:      ///@}
        -: 2186:
        -: 2187:#if __cplusplus >= 201103L
        -: 2188:      // Constant-time, nothrow move assignment when source object's memory
        -: 2189:      // can be moved because the allocators are equal.
        -: 2190:      void
        -: 2191:      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
        -: 2192:      {
        -: 2193:	this->_M_impl._M_swap_data(__x._M_impl);
        -: 2194:	__x.clear();
        -: 2195:	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
        -: 2196:      }
        -: 2197:
        -: 2198:      // When the allocators are not equal the operation could throw, because
        -: 2199:      // we might need to allocate a new map for __x after moving from it
        -: 2200:      // or we might need to allocate new elements for *this.
        -: 2201:      void
        -: 2202:      _M_move_assign1(deque&& __x, /* always equal: */ false_type)
        -: 2203:      {
        -: 2204:	if (_M_get_Tp_allocator() == __x._M_get_Tp_allocator())
        -: 2205:	  return _M_move_assign1(std::move(__x), true_type());
        -: 2206:
        -: 2207:	constexpr bool __move_storage =
        -: 2208:	  _Alloc_traits::_S_propagate_on_move_assign();
        -: 2209:	_M_move_assign2(std::move(__x), __bool_constant<__move_storage>());
        -: 2210:      }
        -: 2211:
        -: 2212:      // Destroy all elements and deallocate all memory, then replace
        -: 2213:      // with elements created from __args.
        -: 2214:      template<typename... _Args>
        -: 2215:      void
        -: 2216:      _M_replace_map(_Args&&... __args)
        -: 2217:      {
        -: 2218:	// Create new data first, so if allocation fails there are no effects.
        -: 2219:	deque __newobj(std::forward<_Args>(__args)...);
        -: 2220:	// Free existing storage using existing allocator.
        -: 2221:	clear();
        -: 2222:	_M_deallocate_node(*begin()._M_node); // one node left after clear()
        -: 2223:	_M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
        -: 2224:	this->_M_impl._M_map = nullptr;
        -: 2225:	this->_M_impl._M_map_size = 0;
        -: 2226:	// Take ownership of replacement memory.
        -: 2227:	this->_M_impl._M_swap_data(__newobj._M_impl);
        -: 2228:      }
        -: 2229:
        -: 2230:      // Do move assignment when the allocator propagates.
        -: 2231:      void
        -: 2232:      _M_move_assign2(deque&& __x, /* propagate: */ true_type)
        -: 2233:      {
        -: 2234:	// Make a copy of the original allocator state.
        -: 2235:	auto __alloc = __x._M_get_Tp_allocator();
        -: 2236:	// The allocator propagates so storage can be moved from __x,
        -: 2237:	// leaving __x in a valid empty state with a moved-from allocator.
        -: 2238:	_M_replace_map(std::move(__x));
        -: 2239:	// Move the corresponding allocator state too.
        -: 2240:	_M_get_Tp_allocator() = std::move(__alloc);
        -: 2241:      }
        -: 2242:
        -: 2243:      // Do move assignment when it may not be possible to move source
        -: 2244:      // object's memory, resulting in a linear-time operation.
        -: 2245:      void
        -: 2246:      _M_move_assign2(deque&& __x, /* propagate: */ false_type)
        -: 2247:      {
        -: 2248:	if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
        -: 2249:	  {
        -: 2250:	    // The allocators are equal so storage can be moved from __x,
        -: 2251:	    // leaving __x in a valid empty state with its current allocator.
        -: 2252:	    _M_replace_map(std::move(__x), __x.get_allocator());
        -: 2253:	  }
        -: 2254:	else
        -: 2255:	  {
        -: 2256:	    // The rvalue's allocator cannot be moved and is not equal,
        -: 2257:	    // so we need to individually move each element.
        -: 2258:	    _M_assign_aux(std::make_move_iterator(__x.begin()),
        -: 2259:			  std::make_move_iterator(__x.end()),
        -: 2260:			  std::random_access_iterator_tag());
        -: 2261:	    __x.clear();
        -: 2262:	  }
        -: 2263:      }
        -: 2264:#endif
        -: 2265:    };
        -: 2266:
        -: 2267:#if __cpp_deduction_guides >= 201606
        -: 2268:  template<typename _InputIterator, typename _ValT
        -: 2269:	     = typename iterator_traits<_InputIterator>::value_type,
        -: 2270:	   typename _Allocator = allocator<_ValT>,
        -: 2271:	   typename = _RequireInputIter<_InputIterator>,
        -: 2272:	   typename = _RequireAllocator<_Allocator>>
        -: 2273:    deque(_InputIterator, _InputIterator, _Allocator = _Allocator())
        -: 2274:      -> deque<_ValT, _Allocator>;
        -: 2275:#endif
        -: 2276:
        -: 2277:  /**
        -: 2278:   *  @brief  Deque equality comparison.
        -: 2279:   *  @param  __x  A %deque.
        -: 2280:   *  @param  __y  A %deque of the same type as @a __x.
        -: 2281:   *  @return  True iff the size and elements of the deques are equal.
        -: 2282:   *
        -: 2283:   *  This is an equivalence relation.  It is linear in the size of the
        -: 2284:   *  deques.  Deques are considered equivalent if their sizes are equal,
        -: 2285:   *  and if corresponding elements compare equal.
        -: 2286:  */
        -: 2287:  template<typename _Tp, typename _Alloc>
        -: 2288:    _GLIBCXX_NODISCARD
        -: 2289:    inline bool
        -: 2290:    operator==(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2291:    { return __x.size() == __y.size()
        -: 2292:	     && std::equal(__x.begin(), __x.end(), __y.begin()); }
        -: 2293:
        -: 2294:#if __cpp_lib_three_way_comparison
        -: 2295:  /**
        -: 2296:   *  @brief  Deque ordering relation.
        -: 2297:   *  @param  __x  A `deque`.
        -: 2298:   *  @param  __y  A `deque` of the same type as `__x`.
        -: 2299:   *  @return  A value indicating whether `__x` is less than, equal to,
        -: 2300:   *           greater than, or incomparable with `__y`.
        -: 2301:   *
        -: 2302:   *  See `std::lexicographical_compare_three_way()` for how the determination
        -: 2303:   *  is made. This operator is used to synthesize relational operators like
        -: 2304:   *  `<` and `>=` etc.
        -: 2305:  */
        -: 2306:  template<typename _Tp, typename _Alloc>
        -: 2307:    [[nodiscard]]
        -: 2308:    inline __detail::__synth3way_t<_Tp>
        -: 2309:    operator<=>(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2310:    {
        -: 2311:      return std::lexicographical_compare_three_way(__x.begin(), __x.end(),
        -: 2312:						    __y.begin(), __y.end(),
        -: 2313:						    __detail::__synth3way);
        -: 2314:    }
        -: 2315:#else
        -: 2316:  /**
        -: 2317:   *  @brief  Deque ordering relation.
        -: 2318:   *  @param  __x  A %deque.
        -: 2319:   *  @param  __y  A %deque of the same type as @a __x.
        -: 2320:   *  @return  True iff @a x is lexicographically less than @a __y.
        -: 2321:   *
        -: 2322:   *  This is a total ordering relation.  It is linear in the size of the
        -: 2323:   *  deques.  The elements must be comparable with @c <.
        -: 2324:   *
        -: 2325:   *  See std::lexicographical_compare() for how the determination is made.
        -: 2326:  */
        -: 2327:  template<typename _Tp, typename _Alloc>
        -: 2328:    _GLIBCXX_NODISCARD
        -: 2329:    inline bool
        -: 2330:    operator<(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2331:    { return std::lexicographical_compare(__x.begin(), __x.end(),
        -: 2332:					  __y.begin(), __y.end()); }
        -: 2333:
        -: 2334:  /// Based on operator==
        -: 2335:  template<typename _Tp, typename _Alloc>
        -: 2336:    _GLIBCXX_NODISCARD
        -: 2337:    inline bool
        -: 2338:    operator!=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2339:    { return !(__x == __y); }
        -: 2340:
        -: 2341:  /// Based on operator<
        -: 2342:  template<typename _Tp, typename _Alloc>
        -: 2343:    _GLIBCXX_NODISCARD
        -: 2344:    inline bool
        -: 2345:    operator>(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2346:    { return __y < __x; }
        -: 2347:
        -: 2348:  /// Based on operator<
        -: 2349:  template<typename _Tp, typename _Alloc>
        -: 2350:    _GLIBCXX_NODISCARD
        -: 2351:    inline bool
        -: 2352:    operator<=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2353:    { return !(__y < __x); }
        -: 2354:
        -: 2355:  /// Based on operator<
        -: 2356:  template<typename _Tp, typename _Alloc>
        -: 2357:    _GLIBCXX_NODISCARD
        -: 2358:    inline bool
        -: 2359:    operator>=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
        -: 2360:    { return !(__x < __y); }
        -: 2361:#endif // three-way comparison
        -: 2362:
        -: 2363:  /// See std::deque::swap().
        -: 2364:  template<typename _Tp, typename _Alloc>
        -: 2365:    inline void
        -: 2366:    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
        -: 2367:    _GLIBCXX_NOEXCEPT_IF(noexcept(__x.swap(__y)))
        -: 2368:    { __x.swap(__y); }
        -: 2369:
        -: 2370:#undef _GLIBCXX_DEQUE_BUF_SIZE
        -: 2371:
        -: 2372:_GLIBCXX_END_NAMESPACE_CONTAINER
        -: 2373:
        -: 2374:#if __cplusplus >= 201103L
        -: 2375:  // std::allocator is safe, but it is not the only allocator
        -: 2376:  // for which this is valid.
        -: 2377:  template<class _Tp>
        -: 2378:    struct __is_bitwise_relocatable<_GLIBCXX_STD_C::deque<_Tp>>
        -: 2379:    : true_type { };
        -: 2380:#endif
        -: 2381:
        -: 2382:_GLIBCXX_END_NAMESPACE_VERSION
        -: 2383:} // namespace std
        -: 2384:
        -: 2385:#endif /* _STL_DEQUE_H */
