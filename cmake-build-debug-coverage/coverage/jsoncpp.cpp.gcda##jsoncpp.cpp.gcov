        -:    0:Source:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/external/json/jsoncpp.cpp
        -:    0:Graph:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/external/json/jsoncpp.cpp.gcno
        -:    0:Data:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/external/json/jsoncpp.cpp.gcda
        -:    0:Runs:1
        -:    1:/// Json-cpp amalgamated source (http://jsoncpp.sourceforge.net/).
        -:    2:/// It is intended to be used with #include "json/json.h"
        -:    3:
        -:    4:// //////////////////////////////////////////////////////////////////////
        -:    5:// Beginning of content of file: LICENSE
        -:    6:// //////////////////////////////////////////////////////////////////////
        -:    7:
        -:    8:/*
        -:    9:The JsonCpp library's source code, including accompanying documentation,
        -:   10:tests and demonstration applications, are licensed under the following
        -:   11:conditions...
        -:   12:
        -:   13:Baptiste Lepilleur and The JsonCpp Authors explicitly disclaim copyright in all
        -:   14:jurisdictions which recognize such a disclaimer. In such jurisdictions,
        -:   15:this software is released into the Public Domain.
        -:   16:
        -:   17:In jurisdictions which do not recognize Public Domain property (e.g. Germany as of
        -:   18:2010), this software is Copyright (c) 2007-2010 by Baptiste Lepilleur and
        -:   19:The JsonCpp Authors, and is released under the terms of the MIT License (see below).
        -:   20:
        -:   21:In jurisdictions which recognize Public Domain property, the user of this
        -:   22:software may choose to accept it either as 1) Public Domain, 2) under the
        -:   23:conditions of the MIT License (see below), or 3) under the terms of dual
        -:   24:Public Domain/MIT License conditions described here, as they choose.
        -:   25:
        -:   26:The MIT License is about as close to Public Domain as a license can get, and is
        -:   27:described in clear, concise terms at:
        -:   28:
        -:   29:   http://en.wikipedia.org/wiki/MIT_License
        -:   30:
        -:   31:The full text of the MIT License follows:
        -:   32:
        -:   33:========================================================================
        -:   34:Copyright (c) 2007-2010 Baptiste Lepilleur and The JsonCpp Authors
        -:   35:
        -:   36:Permission is hereby granted, free of charge, to any person
        -:   37:obtaining a copy of this software and associated documentation
        -:   38:files (the "Software"), to deal in the Software without
        -:   39:restriction, including without limitation the rights to use, copy,
        -:   40:modify, merge, publish, distribute, sublicense, and/or sell copies
        -:   41:of the Software, and to permit persons to whom the Software is
        -:   42:furnished to do so, subject to the following conditions:
        -:   43:
        -:   44:The above copyright notice and this permission notice shall be
        -:   45:included in all copies or substantial portions of the Software.
        -:   46:
        -:   47:THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        -:   48:EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        -:   49:MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        -:   50:NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
        -:   51:BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
        -:   52:ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
        -:   53:CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        -:   54:SOFTWARE.
        -:   55:========================================================================
        -:   56:(END LICENSE TEXT)
        -:   57:
        -:   58:The MIT license is compatible with both the GPL and commercial
        -:   59:software, affording one all of the rights of Public Domain with the
        -:   60:minor nuisance of being required to keep the above copyright notice
        -:   61:and license text in the source code. Note also that by accepting the
        -:   62:Public Domain "license" you can re-license your copy using whatever
        -:   63:license you like.
        -:   64:
        -:   65:*/
        -:   66:
        -:   67:// //////////////////////////////////////////////////////////////////////
        -:   68:// End of content of file: LICENSE
        -:   69:// //////////////////////////////////////////////////////////////////////
        -:   70:
        -:   71:
        -:   72:
        -:   73:
        -:   74:
        -:   75:
        -:   76:#include "json.h"
        -:   77:
        -:   78:#ifndef JSON_IS_AMALGAMATION
        -:   79:#error "Compile with -I PATH_TO_JSON_DIRECTORY"
        -:   80:#endif
        -:   81:
        -:   82:
        -:   83:// //////////////////////////////////////////////////////////////////////
        -:   84:// Beginning of content of file: src/lib_json/json_tool.h
        -:   85:// //////////////////////////////////////////////////////////////////////
        -:   86:
        -:   87:// Copyright 2007-2010 Baptiste Lepilleur and The JsonCpp Authors
        -:   88:// Distributed under MIT license, or public domain if desired and
        -:   89:// recognized in your jurisdiction.
        -:   90:// See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
        -:   91:
        -:   92:#ifndef LIB_JSONCPP_JSON_TOOL_H_INCLUDED
        -:   93:#define LIB_JSONCPP_JSON_TOOL_H_INCLUDED
        -:   94:
        -:   95:#if !defined(JSON_IS_AMALGAMATION)
        -:   96:#include <json/config.h>
        -:   97:#endif
        -:   98:
        -:   99:// Also support old flag NO_LOCALE_SUPPORT
        -:  100:#ifdef NO_LOCALE_SUPPORT
        -:  101:#define JSONCPP_NO_LOCALE_SUPPORT
        -:  102:#endif
        -:  103:
        -:  104:#ifndef JSONCPP_NO_LOCALE_SUPPORT
        -:  105:#include <clocale>
        -:  106:#endif
        -:  107:
        -:  108:/* This header provides common string manipulation support, such as UTF-8,
        -:  109: * portable conversion from/to string...
        -:  110: *
        -:  111: * It is an internal header that must not be exposed.
        -:  112: */
        -:  113:
        -:  114:namespace Json {
        -:  115:static inline char getDecimalPoint() {
        -:  116:#ifdef JSONCPP_NO_LOCALE_SUPPORT
        -:  117:  return '\0';
        -:  118:#else
        -:  119:  struct lconv* lc = localeconv();
        -:  120:  return lc ? *(lc->decimal_point) : '\0';
        -:  121:#endif
        -:  122:}
        -:  123:
        -:  124:/// Converts a unicode code-point to UTF-8.
function _ZN4JsonL15codePointToUTF8Ej called 0 returned 0% blocks executed 0%
    #####:  125:static inline String codePointToUTF8(unsigned int cp) {
    #####:  126:  String result;
    %%%%%:  126-block  0
Aufruf  0 niemals ausgeführt
        -:  127:
        -:  128:  // based on description from http://en.wikipedia.org/wiki/UTF-8
        -:  129:
    #####:  130:  if (cp <= 0x7f) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  131:    result.resize(1);
    %%%%%:  131-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  132:    result[0] = static_cast<char>(cp);
    %%%%%:  132-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  132-block  1
    #####:  133:  } else if (cp <= 0x7FF) {
    %%%%%:  133-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  134:    result.resize(2);
    %%%%%:  134-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  135:    result[1] = static_cast<char>(0x80 | (0x3f & cp));
    %%%%%:  135-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  136:    result[0] = static_cast<char>(0xC0 | (0x1f & (cp >> 6)));
    %%%%%:  136-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  136-block  1
    #####:  137:  } else if (cp <= 0xFFFF) {
    %%%%%:  137-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  138:    result.resize(3);
    %%%%%:  138-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  139:    result[2] = static_cast<char>(0x80 | (0x3f & cp));
    %%%%%:  139-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  140:    result[1] = static_cast<char>(0x80 | (0x3f & (cp >> 6)));
    %%%%%:  140-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  141:    result[0] = static_cast<char>(0xE0 | (0xf & (cp >> 12)));
    %%%%%:  141-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  141-block  1
    #####:  142:  } else if (cp <= 0x10FFFF) {
    %%%%%:  142-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  143:    result.resize(4);
    %%%%%:  143-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  144:    result[3] = static_cast<char>(0x80 | (0x3f & cp));
    %%%%%:  144-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  145:    result[2] = static_cast<char>(0x80 | (0x3f & (cp >> 6)));
    %%%%%:  145-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  146:    result[1] = static_cast<char>(0x80 | (0x3f & (cp >> 12)));
    %%%%%:  146-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  147:    result[0] = static_cast<char>(0xF0 | (0x7 & (cp >> 18)));
    %%%%%:  147-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  147-block  1
        -:  148:  }
        -:  149:
    #####:  150:  return result;
    %%%%%:  150-block  0
    %%%%%:  150-block  1
    =====:  151:}
    $$$$$:  151-block  0
Aufruf  0 niemals ausgeführt
        -:  152:
        -:  153:enum {
        -:  154:  /// Constant that specify the size of the buffer that must be passed to
        -:  155:  /// uintToString.
        -:  156:  uintToStringBufferSize = 3 * sizeof(LargestUInt) + 1
        -:  157:};
        -:  158:
        -:  159:// Defines a char buffer for use with uintToString().
        -:  160:using UIntToStringBuffer = char[uintToStringBufferSize];
        -:  161:
        -:  162:/** Converts an unsigned integer to string.
        -:  163: * @param value Unsigned integer to convert to string
        -:  164: * @param current Input/Output string buffer.
        -:  165: *        Must have at least uintToStringBufferSize chars free.
        -:  166: */
function _ZN4JsonL12uintToStringEmRPc called 0 returned 0% blocks executed 0%
    #####:  167:static inline void uintToString(LargestUInt value, char*& current) {
    #####:  168:  *--current = 0;
    %%%%%:  168-block  0
        -:  169:  do {
    #####:  170:    *--current = static_cast<char>(value % 10U + static_cast<unsigned>('0'));
    #####:  171:    value /= 10;
    #####:  172:  } while (value != 0);
    %%%%%:  172-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  173:}
        -:  174:
        -:  175:/** Change ',' to '.' everywhere in buffer.
        -:  176: *
        -:  177: * We had a sophisticated way, but it did not work in WinCE.
        -:  178: * @see https://github.com/open-source-parsers/jsoncpp/pull/9
        -:  179: */
function _ZN4Json16fixNumericLocaleIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEET_SB_SB_ called 0 returned 0% blocks executed 0%
    #####:  180:template <typename Iter> Iter fixNumericLocale(Iter begin, Iter end) {
    #####:  181:  for (; begin != end; ++begin) {
    %%%%%:  181-block  0
    %%%%%:  181-block  1
Aufruf  0 niemals ausgeführt
    %%%%%:  181-block  2
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  182:    if (*begin == ',') {
    %%%%%:  182-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  183:      *begin = '.';
    %%%%%:  183-block  0
Aufruf  0 niemals ausgeführt
        -:  184:    }
        -:  185:  }
    #####:  186:  return begin;
    %%%%%:  186-block  0
        -:  187:}
        -:  188:
        -:  189:template <typename Iter> void fixNumericLocaleInput(Iter begin, Iter end) {
        -:  190:  char decimalPoint = getDecimalPoint();
        -:  191:  if (decimalPoint == '\0' || decimalPoint == '.') {
        -:  192:    return;
        -:  193:  }
        -:  194:  for (; begin != end; ++begin) {
        -:  195:    if (*begin == '.') {
        -:  196:      *begin = decimalPoint;
        -:  197:    }
        -:  198:  }
        -:  199:}
        -:  200:
        -:  201:/**
        -:  202: * Return iterator that would be the new end of the range [begin,end), if we
        -:  203: * were to delete zeros in the end of string, but not the last zero before '.'.
        -:  204: */
        -:  205:template <typename Iter>
function _ZN4Json16fixZerosInTheEndIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEET_SB_SB_j called 0 returned 0% blocks executed 0%
    #####:  206:Iter fixZerosInTheEnd(Iter begin, Iter end, unsigned int precision) {
    #####:  207:  for (; begin != end; --end) {
    %%%%%:  207-block  0
    %%%%%:  207-block  1
Aufruf  0 niemals ausgeführt
    %%%%%:  207-block  2
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  208:    if (*(end - 1) != '0') {
    %%%%%:  208-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  209:      return end;
    %%%%%:  209-block  0
        -:  210:    }
        -:  211:    // Don't delete the last zero before the decimal point.
    #####:  212:    if (begin != (end - 1) && begin != (end - 2) && *(end - 2) == '.') {
    %%%%%:  212-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  212-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%:  212-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%:  212-block  3
    %%%%%:  212-block  4
    %%%%%:  212-block  5
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    #####:  213:      if (precision) {
    %%%%%:  213-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  214:        return end;
    %%%%%:  214-block  0
        -:  215:      }
    #####:  216:      return end - 2;
    %%%%%:  216-block  0
Aufruf  0 niemals ausgeführt
        -:  217:    }
        -:  218:  }
    #####:  219:  return end;
    %%%%%:  219-block  0
        -:  220:}
        -:  221:
        -:  222:} // namespace Json
        -:  223:
        -:  224:#endif // LIB_JSONCPP_JSON_TOOL_H_INCLUDED
        -:  225:
        -:  226:// //////////////////////////////////////////////////////////////////////
        -:  227:// End of content of file: src/lib_json/json_tool.h
        -:  228:// //////////////////////////////////////////////////////////////////////
        -:  229:
        -:  230:
        -:  231:
        -:  232:
        -:  233:
        -:  234:
        -:  235:// //////////////////////////////////////////////////////////////////////
        -:  236:// Beginning of content of file: src/lib_json/json_reader.cpp
        -:  237:// //////////////////////////////////////////////////////////////////////
        -:  238:
        -:  239:// Copyright 2007-2011 Baptiste Lepilleur and The JsonCpp Authors
        -:  240:// Copyright (C) 2016 InfoTeCS JSC. All rights reserved.
        -:  241:// Distributed under MIT license, or public domain if desired and
        -:  242:// recognized in your jurisdiction.
        -:  243:// See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
        -:  244:
        -:  245:#if !defined(JSON_IS_AMALGAMATION)
        -:  246:#include "json_tool.h"
        -:  247:#include <json/assertions.h>
        -:  248:#include <json/reader.h>
        -:  249:#include <json/value.h>
        -:  250:#endif // if !defined(JSON_IS_AMALGAMATION)
        -:  251:#include <algorithm>
        -:  252:#include <cassert>
        -:  253:#include <cstring>
        -:  254:#include <iostream>
        -:  255:#include <istream>
        -:  256:#include <limits>
        -:  257:#include <memory>
        -:  258:#include <set>
        -:  259:#include <sstream>
        -:  260:#include <utility>
        -:  261:
        -:  262:#include <cstdio>
        -:  263:#if __cplusplus >= 201103L
        -:  264:
        -:  265:#if !defined(sscanf)
        -:  266:#define sscanf std::sscanf
        -:  267:#endif
        -:  268:
        -:  269:#endif //__cplusplus
        -:  270:
        -:  271:#if defined(_MSC_VER)
        -:  272:#if !defined(_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES)
        -:  273:#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1
        -:  274:#endif //_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
        -:  275:#endif //_MSC_VER
        -:  276:
        -:  277:#if defined(_MSC_VER)
        -:  278:// Disable warning about strdup being deprecated.
        -:  279:#pragma warning(disable : 4996)
        -:  280:#endif
        -:  281:
        -:  282:// Define JSONCPP_DEPRECATED_STACK_LIMIT as an appropriate integer at compile
        -:  283:// time to change the stack limit
        -:  284:#if !defined(JSONCPP_DEPRECATED_STACK_LIMIT)
        -:  285:#define JSONCPP_DEPRECATED_STACK_LIMIT 1000
        -:  286:#endif
        -:  287:
        -:  288:static size_t const stackLimit_g =
        -:  289:    JSONCPP_DEPRECATED_STACK_LIMIT; // see readValue()
        -:  290:
        -:  291:namespace Json {
        -:  292:
        -:  293:#if __cplusplus >= 201103L || (defined(_CPPLIB_VER) && _CPPLIB_VER >= 520)
        -:  294:using CharReaderPtr = std::unique_ptr<CharReader>;
        -:  295:#else
        -:  296:using CharReaderPtr = std::auto_ptr<CharReader>;
        -:  297:#endif
        -:  298:
        -:  299:// Implementation of class Features
        -:  300:// ////////////////////////////////
        -:  301:
function _ZN4Json8FeaturesC2Ev called 0 returned 0% blocks executed 0%
    #####:  302:Features::Features() = default;
        -:  303:
function _ZN4Json8Features3allEv called 0 returned 0% blocks executed 0%
    #####:  304:Features Features::all() { return {}; }
    %%%%%:  304-block  0
Aufruf  0 niemals ausgeführt
        -:  305:
function _ZN4Json8Features10strictModeEv called 0 returned 0% blocks executed 0%
    #####:  306:Features Features::strictMode() {
    #####:  307:  Features features;
    %%%%%:  307-block  0
Aufruf  0 niemals ausgeführt
    #####:  308:  features.allowComments_ = false;
    #####:  309:  features.strictRoot_ = true;
    #####:  310:  features.allowDroppedNullPlaceholders_ = false;
    #####:  311:  features.allowNumericKeys_ = false;
    #####:  312:  return features;
        -:  313:}
        -:  314:
        -:  315:// Implementation of class Reader
        -:  316:// ////////////////////////////////
        -:  317:
function _ZN4Json6Reader15containsNewLineEPKcS2_ called 0 returned 0% blocks executed 0%
    #####:  318:bool Reader::containsNewLine(Reader::Location begin, Reader::Location end) {
function _ZZN4Json6Reader15containsNewLineEPKcS2_ENKUlcE_clEc called 0 returned 0% blocks executed 0%
    #####:  319:  return std::any_of(begin, end, [](char b) { return b == '\n' || b == '\r'; });
    %%%%%:  319-block  0
Aufruf  0 niemals ausgeführt
    %%%%%:  319-block  1
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  319-block  2
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  319-block  3
    %%%%%:  319-block  4
    %%%%%:  319-block  5
        -:  320:}
        -:  321:
        -:  322:// Class Reader
        -:  323:// //////////////////////////////////////////////////////////////////
        -:  324:
function _ZN4Json6ReaderC2Ev called 0 returned 0% blocks executed 0%
    #####:  325:Reader::Reader() : features_(Features::all()) {}
    %%%%%:  325-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  325-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Aufruf  6 niemals ausgeführt
    $$$$$:  325-block  2
Aufruf  7 niemals ausgeführt
        -:  326:
function _ZN4Json6ReaderC2ERKNS_8FeaturesE called 0 returned 0% blocks executed 0%
    #####:  327:Reader::Reader(const Features& features) : features_(features) {}
    %%%%%:  327-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  327-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
    $$$$$:  327-block  2
Aufruf  6 niemals ausgeführt
        -:  328:
function _ZN4Json6Reader5parseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_5ValueEb called 0 returned 0% blocks executed 0%
    #####:  329:bool Reader::parse(const std::string& document, Value& root,
        -:  330:                   bool collectComments) {
    #####:  331:  document_.assign(document.begin(), document.end());
    %%%%%:  331-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    #####:  332:  const char* begin = document_.c_str();
Aufruf  0 niemals ausgeführt
    #####:  333:  const char* end = begin + document_.length();
Aufruf  0 niemals ausgeführt
    #####:  334:  return parse(begin, end, root, collectComments);
Aufruf  0 niemals ausgeführt
        -:  335:}
        -:  336:
function _ZN4Json6Reader5parseERSiRNS_5ValueEb called 0 returned 0% blocks executed 0%
    #####:  337:bool Reader::parse(std::istream& is, Value& root, bool collectComments) {
        -:  338:  // std::istream_iterator<char> begin(is);
        -:  339:  // std::istream_iterator<char> end;
        -:  340:  // Those would allow streamed input from a file, if parse() were a
        -:  341:  // template function.
        -:  342:
        -:  343:  // Since String is reference-counted, this at least does not
        -:  344:  // create an extra copy.
    #####:  345:  String doc(std::istreambuf_iterator<char>(is), {});
    %%%%%:  345-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  345-block  1
Aufruf  6 niemals ausgeführt
    $$$$$:  345-block  2
    $$$$$:  345-block  3
    $$$$$:  345-block  4
Aufruf  7 niemals ausgeführt
    $$$$$:  345-block  5
    #####:  346:  return parse(doc.data(), doc.data() + doc.size(), root, collectComments);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  346-block  0
    %%%%%:  346-block  1
    #####:  347:}
    %%%%%:  347-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  347-block  1
Aufruf  1 niemals ausgeführt
        -:  348:
function _ZN4Json6Reader5parseEPKcS2_RNS_5ValueEb called 0 returned 0% blocks executed 0%
    #####:  349:bool Reader::parse(const char* beginDoc, const char* endDoc, Value& root,
        -:  350:                   bool collectComments) {
    #####:  351:  if (!features_.allowComments_) {
    %%%%%:  351-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  352:    collectComments = false;
    %%%%%:  352-block  0
        -:  353:  }
        -:  354:
    #####:  355:  begin_ = beginDoc;
    #####:  356:  end_ = endDoc;
    #####:  357:  collectComments_ = collectComments;
    #####:  358:  current_ = begin_;
    #####:  359:  lastValueEnd_ = nullptr;
    #####:  360:  lastValue_ = nullptr;
    #####:  361:  commentsBefore_.clear();
    %%%%%:  361-block  0
Aufruf  0 niemals ausgeführt
    #####:  362:  errors_.clear();
Aufruf  0 niemals ausgeführt
    #####:  363:  while (!nodes_.empty())
    %%%%%:  363-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  364:    nodes_.pop();
    %%%%%:  364-block  0
Aufruf  0 niemals ausgeführt
    #####:  365:  nodes_.push(&root);
    %%%%%:  365-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$:  365-block  1
        -:  366:
    #####:  367:  bool successful = readValue();
    %%%%%:  367-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:  368:  Token token;
    #####:  369:  skipCommentTokens(token);
    %%%%%:  369-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  370:  if (collectComments_ && !commentsBefore_.empty())
    %%%%%:  370-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  370-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  370-block  2
    %%%%%:  370-block  3
    %%%%%:  370-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  371:    root.setComment(commentsBefore_, commentAfter);
    %%%%%:  371-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  371-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  371-block  2
Aufruf  6 niemals ausgeführt
    $$$$$:  371-block  3
Aufruf  7 niemals ausgeführt
    $$$$$:  371-block  4
    #####:  372:  if (features_.strictRoot_) {
    %%%%%:  372-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  373:    if (!root.isArray() && !root.isObject()) {
    %%%%%:  373-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  373-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  373-block  2
    %%%%%:  373-block  3
    %%%%%:  373-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
        -:  374:      // Set error location to start of doc, ideally should be first token found
        -:  375:      // in doc
    #####:  376:      token.type_ = tokenError;
    #####:  377:      token.start_ = beginDoc;
    #####:  378:      token.end_ = endDoc;
    #####:  379:      addError(
    %%%%%:  379-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  379-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  379-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  379-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  379-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  379-block  5
    $$$$$:  379-block  6
        -:  380:          "A valid JSON document must be either an array or an object value.",
        -:  381:          token);
    #####:  382:      return false;
        -:  383:    }
        -:  384:  }
    #####:  385:  return successful;
    %%%%%:  385-block  0
        -:  386:}
        -:  387:
function _ZN4Json6Reader9readValueEv called 0 returned 0% blocks executed 0%
    #####:  388:bool Reader::readValue() {
        -:  389:  // readValue() may call itself only if it calls readObject() or ReadArray().
        -:  390:  // These methods execute nodes_.push() just before and nodes_.pop)() just
        -:  391:  // after calling readValue(). parse() executes one nodes_.push(), so > instead
        -:  392:  // of >=.
    #####:  393:  if (nodes_.size() > stackLimit_g)
    %%%%%:  393-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  394:    throwRuntimeError("Exceeded stackLimit in readValue().");
    %%%%%:  394-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  394-block  1
Aufruf  4 niemals ausgeführt
    $$$$$:  394-block  2
Aufruf  5 niemals ausgeführt
    $$$$$:  394-block  3
Aufruf  6 niemals ausgeführt
    $$$$$:  394-block  4
    $$$$$:  394-block  5
        -:  395:
        -:  396:  Token token;
    #####:  397:  skipCommentTokens(token);
    %%%%%:  397-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  398:  bool successful = true;
        -:  399:
    #####:  400:  if (collectComments_ && !commentsBefore_.empty()) {
    %%%%%:  400-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  400-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  400-block  2
    %%%%%:  400-block  3
    %%%%%:  400-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  401:    currentValue().setComment(commentsBefore_, commentBefore);
    %%%%%:  401-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  401-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  401-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%:  401-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  401-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  401-block  5
    #####:  402:    commentsBefore_.clear();
Aufruf  0 niemals ausgeführt
        -:  403:  }
        -:  404:
    #####:  405:  switch (token.type_) {
    %%%%%:  405-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####:  406:  case tokenObjectBegin:
    #####:  407:    successful = readObject(token);
    %%%%%:  407-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  408:    currentValue().setOffsetLimit(current_ - begin_);
    %%%%%:  408-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  408-block  1
Aufruf  3 niemals ausgeführt
    #####:  409:    break;
    #####:  410:  case tokenArrayBegin:
    #####:  411:    successful = readArray(token);
    %%%%%:  411-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  412:    currentValue().setOffsetLimit(current_ - begin_);
    %%%%%:  412-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  412-block  1
Aufruf  3 niemals ausgeführt
    #####:  413:    break;
    #####:  414:  case tokenNumber:
    #####:  415:    successful = decodeNumber(token);
    %%%%%:  415-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  416:    break;
    %%%%%:  416-block  0
    #####:  417:  case tokenString:
    #####:  418:    successful = decodeString(token);
    %%%%%:  418-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  419:    break;
    %%%%%:  419-block  0
    #####:  420:  case tokenTrue: {
    #####:  421:    Value v(true);
    %%%%%:  421-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  422:    currentValue().swapPayload(v);
    %%%%%:  422-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  422-block  1
Aufruf  3 niemals ausgeführt
    #####:  423:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  423-block  0
Aufruf  3 niemals ausgeführt
    #####:  424:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  424-block  0
Aufruf  3 niemals ausgeführt
    #####:  425:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$:  425-block  0
Aufruf  1 niemals ausgeführt
    #####:  426:  case tokenFalse: {
    #####:  427:    Value v(false);
    %%%%%:  427-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  428:    currentValue().swapPayload(v);
    %%%%%:  428-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  428-block  1
Aufruf  3 niemals ausgeführt
    #####:  429:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  429-block  0
Aufruf  3 niemals ausgeführt
    #####:  430:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  430-block  0
Aufruf  3 niemals ausgeführt
    #####:  431:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$:  431-block  0
Aufruf  1 niemals ausgeführt
    #####:  432:  case tokenNull: {
    #####:  433:    Value v;
    %%%%%:  433-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  434:    currentValue().swapPayload(v);
    %%%%%:  434-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  434-block  1
Aufruf  3 niemals ausgeführt
    #####:  435:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  435-block  0
Aufruf  3 niemals ausgeführt
    #####:  436:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  436-block  0
Aufruf  3 niemals ausgeführt
    #####:  437:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$:  437-block  0
Aufruf  1 niemals ausgeführt
    #####:  438:  case tokenArraySeparator:
        -:  439:  case tokenObjectEnd:
        -:  440:  case tokenArrayEnd:
    #####:  441:    if (features_.allowDroppedNullPlaceholders_) {
    %%%%%:  441-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  442:      // "Un-read" the current token and mark the current value as a null
        -:  443:      // token.
    #####:  444:      current_--;
    #####:  445:      Value v;
    %%%%%:  445-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  446:      currentValue().swapPayload(v);
    %%%%%:  446-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  446-block  1
Aufruf  3 niemals ausgeführt
    #####:  447:      currentValue().setOffsetStart(current_ - begin_ - 1);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  447-block  0
Aufruf  3 niemals ausgeführt
    #####:  448:      currentValue().setOffsetLimit(current_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  448-block  0
Aufruf  3 niemals ausgeführt
    #####:  449:      break;
    #####:  450:    } // Else, fall through...
    %%%%%:  450-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  450-block  1
Aufruf  1 niemals ausgeführt
        -:  451:  default:
    #####:  452:    currentValue().setOffsetStart(token.start_ - begin_);
    %%%%%:  452-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  452-block  1
Aufruf  3 niemals ausgeführt
    #####:  453:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  453-block  0
Aufruf  3 niemals ausgeführt
    #####:  454:    return addError("Syntax error: value, object or array expected.", token);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  454-block  0
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  454-block  1
    %%%%%:  454-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  454-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  454-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  454-block  5
    $$$$$:  454-block  6
        -:  455:  }
        -:  456:
    #####:  457:  if (collectComments_) {
    %%%%%:  457-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  458:    lastValueEnd_ = current_;
    #####:  459:    lastValue_ = &currentValue();
    %%%%%:  459-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  459-block  1
        -:  460:  }
        -:  461:
    #####:  462:  return successful;
    %%%%%:  462-block  0
        -:  463:}
        -:  464:
function _ZN4Json6Reader17skipCommentTokensERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  465:void Reader::skipCommentTokens(Token& token) {
    #####:  466:  if (features_.allowComments_) {
    %%%%%:  466-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  467:    do {
    #####:  468:      readToken(token);
    %%%%%:  468-block  0
Aufruf  0 niemals ausgeführt
    #####:  469:    } while (token.type_ == tokenComment);
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  470:  } else {
    #####:  471:    readToken(token);
    %%%%%:  471-block  0
Aufruf  0 niemals ausgeführt
        -:  472:  }
    #####:  473:}
        -:  474:
function _ZN4Json6Reader9readTokenERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  475:bool Reader::readToken(Token& token) {
    #####:  476:  skipSpaces();
    %%%%%:  476-block  0
Aufruf  0 niemals ausgeführt
    #####:  477:  token.start_ = current_;
    #####:  478:  Char c = getNextChar();
Aufruf  0 niemals ausgeführt
    #####:  479:  bool ok = true;
    #####:  480:  switch (c) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    #####:  481:  case '{':
    #####:  482:    token.type_ = tokenObjectBegin;
    #####:  483:    break;
    %%%%%:  483-block  0
    #####:  484:  case '}':
    #####:  485:    token.type_ = tokenObjectEnd;
    #####:  486:    break;
    %%%%%:  486-block  0
    #####:  487:  case '[':
    #####:  488:    token.type_ = tokenArrayBegin;
    #####:  489:    break;
    %%%%%:  489-block  0
    #####:  490:  case ']':
    #####:  491:    token.type_ = tokenArrayEnd;
    #####:  492:    break;
    %%%%%:  492-block  0
    #####:  493:  case '"':
    #####:  494:    token.type_ = tokenString;
    #####:  495:    ok = readString();
    %%%%%:  495-block  0
Aufruf  0 niemals ausgeführt
    #####:  496:    break;
    #####:  497:  case '/':
    #####:  498:    token.type_ = tokenComment;
    #####:  499:    ok = readComment();
    %%%%%:  499-block  0
Aufruf  0 niemals ausgeführt
    #####:  500:    break;
    #####:  501:  case '0':
        -:  502:  case '1':
        -:  503:  case '2':
        -:  504:  case '3':
        -:  505:  case '4':
        -:  506:  case '5':
        -:  507:  case '6':
        -:  508:  case '7':
        -:  509:  case '8':
        -:  510:  case '9':
        -:  511:  case '-':
    #####:  512:    token.type_ = tokenNumber;
    #####:  513:    readNumber();
    %%%%%:  513-block  0
Aufruf  0 niemals ausgeführt
    #####:  514:    break;
    #####:  515:  case 't':
    #####:  516:    token.type_ = tokenTrue;
    #####:  517:    ok = match("rue", 3);
    %%%%%:  517-block  0
Aufruf  0 niemals ausgeführt
    #####:  518:    break;
    #####:  519:  case 'f':
    #####:  520:    token.type_ = tokenFalse;
    #####:  521:    ok = match("alse", 4);
    %%%%%:  521-block  0
Aufruf  0 niemals ausgeführt
    #####:  522:    break;
    #####:  523:  case 'n':
    #####:  524:    token.type_ = tokenNull;
    #####:  525:    ok = match("ull", 3);
    %%%%%:  525-block  0
Aufruf  0 niemals ausgeführt
    #####:  526:    break;
    #####:  527:  case ',':
    #####:  528:    token.type_ = tokenArraySeparator;
    #####:  529:    break;
    %%%%%:  529-block  0
    #####:  530:  case ':':
    #####:  531:    token.type_ = tokenMemberSeparator;
    #####:  532:    break;
    %%%%%:  532-block  0
    #####:  533:  case 0:
    #####:  534:    token.type_ = tokenEndOfStream;
    #####:  535:    break;
    %%%%%:  535-block  0
    #####:  536:  default:
    #####:  537:    ok = false;
    #####:  538:    break;
    %%%%%:  538-block  0
        -:  539:  }
    #####:  540:  if (!ok)
    %%%%%:  540-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  541:    token.type_ = tokenError;
    %%%%%:  541-block  0
    #####:  542:  token.end_ = current_;
    #####:  543:  return ok;
    %%%%%:  543-block  0
        -:  544:}
        -:  545:
function _ZN4Json6Reader10skipSpacesEv called 0 returned 0% blocks executed 0%
    #####:  546:void Reader::skipSpaces() {
    #####:  547:  while (current_ != end_) {
    %%%%%:  547-block  0
    %%%%%:  547-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  548:    Char c = *current_;
    #####:  549:    if (c == ' ' || c == '\t' || c == '\r' || c == '\n')
    %%%%%:  549-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  549-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  549-block  2
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  549-block  3
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####:  550:      ++current_;
    %%%%%:  550-block  0
        -:  551:    else
        -:  552:      break;
        -:  553:  }
    #####:  554:}
        -:  555:
function _ZN4Json6Reader5matchEPKci called 0 returned 0% blocks executed 0%
    #####:  556:bool Reader::match(const Char* pattern, int patternLength) {
    #####:  557:  if (end_ - current_ < patternLength)
    %%%%%:  557-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  558:    return false;
    %%%%%:  558-block  0
    #####:  559:  int index = patternLength;
    #####:  560:  while (index--)
    %%%%%:  560-block  0
    %%%%%:  560-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  561:    if (current_[index] != pattern[index])
    %%%%%:  561-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  562:      return false;
    %%%%%:  562-block  0
    #####:  563:  current_ += patternLength;
    #####:  564:  return true;
    %%%%%:  564-block  0
        -:  565:}
        -:  566:
function _ZN4Json6Reader11readCommentEv called 0 returned 0% blocks executed 0%
    #####:  567:bool Reader::readComment() {
    #####:  568:  Location commentBegin = current_ - 1;
    #####:  569:  Char c = getNextChar();
    %%%%%:  569-block  0
Aufruf  0 niemals ausgeführt
    #####:  570:  bool successful = false;
    #####:  571:  if (c == '*')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  572:    successful = readCStyleComment();
    %%%%%:  572-block  0
Aufruf  0 niemals ausgeführt
    #####:  573:  else if (c == '/')
    %%%%%:  573-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  574:    successful = readCppStyleComment();
    %%%%%:  574-block  0
Aufruf  0 niemals ausgeführt
    #####:  575:  if (!successful)
    %%%%%:  575-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  576:    return false;
    %%%%%:  576-block  0
        -:  577:
    #####:  578:  if (collectComments_) {
    %%%%%:  578-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  579:    CommentPlacement placement = commentBefore;
    #####:  580:    if (lastValueEnd_ && !containsNewLine(lastValueEnd_, commentBegin)) {
    %%%%%:  580-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  580-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  580-block  2
    %%%%%:  580-block  3
    %%%%%:  580-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  581:      if (c != '*' || !containsNewLine(commentBegin, current_))
    %%%%%:  581-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  581-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  581-block  2
    %%%%%:  581-block  3
    %%%%%:  581-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  582:        placement = commentAfterOnSameLine;
    %%%%%:  582-block  0
        -:  583:    }
        -:  584:
    #####:  585:    addComment(commentBegin, current_, placement);
    %%%%%:  585-block  0
Aufruf  0 niemals ausgeführt
        -:  586:  }
    #####:  587:  return true;
    %%%%%:  587-block  0
        -:  588:}
        -:  589:
function _ZN4Json6Reader12normalizeEOLB5cxx11EPKcS2_ called 0 returned 0% blocks executed 0%
    #####:  590:String Reader::normalizeEOL(Reader::Location begin, Reader::Location end) {
    #####:  591:  String normalized;
    %%%%%:  591-block  0
Aufruf  0 niemals ausgeführt
    #####:  592:  normalized.reserve(static_cast<size_t>(end - begin));
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  593:  Reader::Location current = begin;
    #####:  594:  while (current != end) {
    %%%%%:  594-block  0
    %%%%%:  594-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  595:    char c = *current++;
    #####:  596:    if (c == '\r') {
    %%%%%:  596-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  597:      if (current != end && *current == '\n')
    %%%%%:  597-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  597-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -:  598:        // convert dos EOL
    #####:  599:        ++current;
    %%%%%:  599-block  0
        -:  600:      // convert Mac EOL
    #####:  601:      normalized += '\n';
    %%%%%:  601-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:  602:    } else {
    #####:  603:      normalized += c;
    %%%%%:  603-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:  604:    }
        -:  605:  }
    #####:  606:  return normalized;
    %%%%%:  606-block  0
    %%%%%:  606-block  1
    =====:  607:}
    $$$$$:  607-block  0
Aufruf  0 niemals ausgeführt
        -:  608:
function _ZN4Json6Reader10addCommentEPKcS2_NS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####:  609:void Reader::addComment(Location begin, Location end,
        -:  610:                        CommentPlacement placement) {
    #####:  611:  assert(collectComments_);
    %%%%%:  611-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  611-block  1
Aufruf  2 niemals ausgeführt
    #####:  612:  const String& normalized = normalizeEOL(begin, end);
    %%%%%:  612-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  613:  if (placement == commentAfterOnSameLine) {
    %%%%%:  613-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  614:    assert(lastValue_ != nullptr);
    %%%%%:  614-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  614-block  1
Aufruf  2 niemals ausgeführt
    #####:  615:    lastValue_->setComment(normalized, placement);
    %%%%%:  615-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  615-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  615-block  2
Aufruf  6 niemals ausgeführt
    $$$$$:  615-block  3
Aufruf  7 niemals ausgeführt
    $$$$$:  615-block  4
        -:  616:  } else {
    #####:  617:    commentsBefore_ += normalized;
    %%%%%:  617-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:  618:  }
    #####:  619:}
    %%%%%:  619-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  619-block  1
Aufruf  1 niemals ausgeführt
        -:  620:
function _ZN4Json6Reader17readCStyleCommentEv called 0 returned 0% blocks executed 0%
    #####:  621:bool Reader::readCStyleComment() {
    #####:  622:  while ((current_ + 1) < end_) {
    %%%%%:  622-block  0
    %%%%%:  622-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  623:    Char c = getNextChar();
    %%%%%:  623-block  0
Aufruf  0 niemals ausgeführt
    #####:  624:    if (c == '*' && *current_ == '/')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  624-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  625:      break;
    %%%%%:  625-block  0
        -:  626:  }
    #####:  627:  return getNextChar() == '/';
    %%%%%:  627-block  0
Aufruf  0 niemals ausgeführt
        -:  628:}
        -:  629:
function _ZN4Json6Reader19readCppStyleCommentEv called 0 returned 0% blocks executed 0%
    #####:  630:bool Reader::readCppStyleComment() {
    #####:  631:  while (current_ != end_) {
    %%%%%:  631-block  0
    %%%%%:  631-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  632:    Char c = getNextChar();
    %%%%%:  632-block  0
Aufruf  0 niemals ausgeführt
    #####:  633:    if (c == '\n')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  634:      break;
    %%%%%:  634-block  0
    #####:  635:    if (c == '\r') {
    %%%%%:  635-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  636:      // Consume DOS EOL. It will be normalized in addComment.
    #####:  637:      if (current_ != end_ && *current_ == '\n')
    %%%%%:  637-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  637-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  638:        getNextChar();
    %%%%%:  638-block  0
Aufruf  0 niemals ausgeführt
        -:  639:      // Break on Moc OS 9 EOL.
    #####:  640:      break;
    %%%%%:  640-block  0
        -:  641:    }
        -:  642:  }
    #####:  643:  return true;
    %%%%%:  643-block  0
        -:  644:}
        -:  645:
function _ZN4Json6Reader10readNumberEv called 0 returned 0% blocks executed 0%
    #####:  646:void Reader::readNumber() {
    #####:  647:  Location p = current_;
    #####:  648:  char c = '0'; // stopgap for already consumed character
        -:  649:  // integral part
    #####:  650:  while (c >= '0' && c <= '9')
    %%%%%:  650-block  0
    %%%%%:  650-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  650-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  651:    c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%:  651-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  651-block  1
    %%%%%:  651-block  2
    %%%%%:  651-block  3
        -:  652:  // fractional part
    #####:  653:  if (c == '.') {
    %%%%%:  653-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  654:    c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%:  654-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  654-block  1
    %%%%%:  654-block  2
    #####:  655:    while (c >= '0' && c <= '9')
    %%%%%:  655-block  0
    %%%%%:  655-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  655-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  656:      c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%:  656-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  656-block  1
    %%%%%:  656-block  2
    %%%%%:  656-block  3
        -:  657:  }
        -:  658:  // exponential part
    #####:  659:  if (c == 'e' || c == 'E') {
    %%%%%:  659-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  659-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  660:    c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%:  660-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  660-block  1
    %%%%%:  660-block  2
    #####:  661:    if (c == '+' || c == '-')
    %%%%%:  661-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  661-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  662:      c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%:  662-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  662-block  1
    %%%%%:  662-block  2
    %%%%%:  662-block  3
    #####:  663:    while (c >= '0' && c <= '9')
    %%%%%:  663-block  0
    %%%%%:  663-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  663-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  664:      c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%:  664-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  664-block  1
    %%%%%:  664-block  2
    %%%%%:  664-block  3
        -:  665:  }
    #####:  666:}
        -:  667:
function _ZN4Json6Reader10readStringEv called 0 returned 0% blocks executed 0%
    #####:  668:bool Reader::readString() {
    #####:  669:  Char c = '\0';
    #####:  670:  while (current_ != end_) {
    %%%%%:  670-block  0
    %%%%%:  670-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  671:    c = getNextChar();
    %%%%%:  671-block  0
Aufruf  0 niemals ausgeführt
    #####:  672:    if (c == '\\')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  673:      getNextChar();
    %%%%%:  673-block  0
Aufruf  0 niemals ausgeführt
    #####:  674:    else if (c == '"')
    %%%%%:  674-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  675:      break;
    %%%%%:  675-block  0
        -:  676:  }
    #####:  677:  return c == '"';
    %%%%%:  677-block  0
        -:  678:}
        -:  679:
function _ZN4Json6Reader10readObjectERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  680:bool Reader::readObject(Token& token) {
        -:  681:  Token tokenName;
    #####:  682:  String name;
    %%%%%:  682-block  0
Aufruf  0 niemals ausgeführt
    #####:  683:  Value init(objectValue);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  684:  currentValue().swapPayload(init);
    %%%%%:  684-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  684-block  1
Aufruf  3 niemals ausgeführt
    #####:  685:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  685-block  0
Aufruf  3 niemals ausgeführt
    #####:  686:  while (readToken(tokenName)) {
    %%%%%:  686-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  686-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  687:    bool initialTokenOk = true;
    #####:  688:    while (tokenName.type_ == tokenComment && initialTokenOk)
    %%%%%:  688-block  0
    %%%%%:  688-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  688-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  689:      initialTokenOk = readToken(tokenName);
    %%%%%:  689-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  689-block  1
    #####:  690:    if (!initialTokenOk)
    %%%%%:  690-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  691:      break;
    %%%%%:  691-block  0
    %%%%%:  691-block  1
    #####:  692:    if (tokenName.type_ == tokenObjectEnd && name.empty()) // empty object
    %%%%%:  692-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  692-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  692-block  2
    %%%%%:  692-block  3
    %%%%%:  692-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  693:      return true;
    %%%%%:  693-block  0
    %%%%%:  693-block  1
    #####:  694:    name.clear();
    %%%%%:  694-block  0
Aufruf  0 niemals ausgeführt
    #####:  695:    if (tokenName.type_ == tokenString) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  696:      if (!decodeString(tokenName, name))
    %%%%%:  696-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  696-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  697:        return recoverFromError(tokenObjectEnd);
    %%%%%:  697-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  697-block  1
    #####:  698:    } else if (tokenName.type_ == tokenNumber && features_.allowNumericKeys_) {
    %%%%%:  698-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  698-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  699:      Value numberName;
    %%%%%:  699-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  700:      if (!decodeNumber(tokenName, numberName))
    %%%%%:  700-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  700-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  701:        return recoverFromError(tokenObjectEnd);
    %%%%%:  701-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  701-block  1
    #####:  702:      name = numberName.asString();
    %%%%%:  702-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  702-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$:  702-block  2
    #####:  703:    } else {
    %%%%%:  703-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$:  703-block  1
Aufruf  3 niemals ausgeführt
        -:  704:      break;
        -:  705:    }
        -:  706:
        -:  707:    Token colon;
    #####:  708:    if (!readToken(colon) || colon.type_ != tokenMemberSeparator) {
    %%%%%:  708-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  708-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  708-block  2
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  708-block  3
    %%%%%:  708-block  4
    %%%%%:  708-block  5
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####:  709:      return addErrorAndRecover("Missing ':' after object member name", colon,
    %%%%%:  709-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  709-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  709-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  709-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  709-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  709-block  5
    $$$$$:  709-block  6
    #####:  710:                                tokenObjectEnd);
    %%%%%:  710-block  0
        -:  711:    }
    #####:  712:    Value& value = currentValue()[name];
    %%%%%:  712-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  712-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####:  713:    nodes_.push(&value);
    %%%%%:  713-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$:  713-block  1
    #####:  714:    bool ok = readValue();
    %%%%%:  714-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  715:    nodes_.pop();
    %%%%%:  715-block  0
Aufruf  0 niemals ausgeführt
    #####:  716:    if (!ok) // error already set
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  717:      return recoverFromError(tokenObjectEnd);
    %%%%%:  717-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  717-block  1
        -:  718:
        -:  719:    Token comma;
    #####:  720:    if (!readToken(comma) ||
    %%%%%:  720-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  720-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:  720-block  2
    %%%%%:  720-block  3
    %%%%%:  720-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  721:        (comma.type_ != tokenObjectEnd && comma.type_ != tokenArraySeparator &&
    %%%%%:  721-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  721-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  722:         comma.type_ != tokenComment)) {
    %%%%%:  722-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  723:      return addErrorAndRecover("Missing ',' or '}' in object declaration",
    %%%%%:  723-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  723-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  723-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  723-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  723-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  723-block  5
    $$$$$:  723-block  6
    #####:  724:                                comma, tokenObjectEnd);
    %%%%%:  724-block  0
        -:  725:    }
    #####:  726:    bool finalizeTokenOk = true;
    #####:  727:    while (comma.type_ == tokenComment && finalizeTokenOk)
    %%%%%:  727-block  0
    %%%%%:  727-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  727-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  728:      finalizeTokenOk = readToken(comma);
    %%%%%:  728-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  728-block  1
    #####:  729:    if (comma.type_ == tokenObjectEnd)
    %%%%%:  729-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  730:      return true;
    %%%%%:  730-block  0
        -:  731:  }
    #####:  732:  return addErrorAndRecover("Missing '}' or object member name", tokenName,
    %%%%%:  732-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  732-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  732-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  732-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  732-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  732-block  5
    $$$$$:  732-block  6
    #####:  733:                            tokenObjectEnd);
    %%%%%:  733-block  0
    #####:  734:}
    %%%%%:  734-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$:  734-block  1
Aufruf  2 niemals ausgeführt
    $$$$$:  734-block  2
Aufruf  3 niemals ausgeführt
        -:  735:
function _ZN4Json6Reader9readArrayERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  736:bool Reader::readArray(Token& token) {
    #####:  737:  Value init(arrayValue);
    %%%%%:  737-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  738:  currentValue().swapPayload(init);
    %%%%%:  738-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  738-block  1
Aufruf  3 niemals ausgeführt
    #####:  739:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  739-block  0
Aufruf  3 niemals ausgeführt
    #####:  740:  skipSpaces();
Aufruf  0 niemals ausgeführt
    #####:  741:  if (current_ != end_ && *current_ == ']') // empty array
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  741-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -:  742:  {
        -:  743:    Token endArray;
    #####:  744:    readToken(endArray);
    %%%%%:  744-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  745:    return true;
    %%%%%:  745-block  0
        -:  746:  }
    #####:  747:  int index = 0;
    %%%%%:  747-block  0
        -:  748:  for (;;) {
    #####:  749:    Value& value = currentValue()[index++];
    %%%%%:  749-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  749-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####:  750:    nodes_.push(&value);
    %%%%%:  750-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$:  750-block  1
    #####:  751:    bool ok = readValue();
    %%%%%:  751-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  752:    nodes_.pop();
    %%%%%:  752-block  0
Aufruf  0 niemals ausgeführt
    #####:  753:    if (!ok) // error already set
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  754:      return recoverFromError(tokenArrayEnd);
    %%%%%:  754-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  754-block  1
    %%%%%:  754-block  2
        -:  755:
        -:  756:    Token currentToken;
        -:  757:    // Accept Comment after last item in the array.
    #####:  758:    ok = readToken(currentToken);
    %%%%%:  758-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  759:    while (currentToken.type_ == tokenComment && ok) {
    %%%%%:  759-block  0
    %%%%%:  759-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  759-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  760:      ok = readToken(currentToken);
    %%%%%:  760-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  760-block  1
        -:  761:    }
    #####:  762:    bool badTokenType = (currentToken.type_ != tokenArraySeparator &&
    %%%%%:  762-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  762-block  1
    %%%%%:  762-block  2
    #####:  763:                         currentToken.type_ != tokenArrayEnd);
    %%%%%:  763-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  764:    if (!ok || badTokenType) {
    %%%%%:  764-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  764-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  765:      return addErrorAndRecover("Missing ',' or ']' in array declaration",
    %%%%%:  765-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  765-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  765-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  765-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  765-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  765-block  5
    $$$$$:  765-block  6
    #####:  766:                                currentToken, tokenArrayEnd);
    %%%%%:  766-block  0
        -:  767:    }
    #####:  768:    if (currentToken.type_ == tokenArrayEnd)
    %%%%%:  768-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  769:      break;
    #####:  770:  }
    %%%%%:  770-block  0
    #####:  771:  return true;
    %%%%%:  771-block  0
    #####:  772:}
    %%%%%:  772-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  772-block  1
Aufruf  1 niemals ausgeführt
        -:  773:
function _ZN4Json6Reader12decodeNumberERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  774:bool Reader::decodeNumber(Token& token) {
    #####:  775:  Value decoded;
    %%%%%:  775-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  776:  if (!decodeNumber(token, decoded))
    %%%%%:  776-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  776-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  777:    return false;
    %%%%%:  777-block  0
    #####:  778:  currentValue().swapPayload(decoded);
    %%%%%:  778-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  778-block  1
Aufruf  3 niemals ausgeführt
    #####:  779:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  779-block  0
Aufruf  3 niemals ausgeführt
    #####:  780:  currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  780-block  0
Aufruf  3 niemals ausgeführt
    #####:  781:  return true;
    #####:  782:}
    %%%%%:  782-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  782-block  1
Aufruf  1 niemals ausgeführt
        -:  783:
function _ZN4Json6Reader12decodeNumberERNS0_5TokenERNS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  784:bool Reader::decodeNumber(Token& token, Value& decoded) {
        -:  785:  // Attempts to parse the number as an integer. If the number is
        -:  786:  // larger than the maximum supported value of an integer then
        -:  787:  // we decode the number as a double.
    #####:  788:  Location current = token.start_;
    #####:  789:  bool isNegative = *current == '-';
    #####:  790:  if (isNegative)
    %%%%%:  790-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  791:    ++current;
    %%%%%:  791-block  0
        -:  792:  // TODO: Help the compiler do the div and mod at compile time or get rid of
        -:  793:  // them.
    #####:  794:  Value::LargestUInt maxIntegerValue =
    #####:  795:      isNegative ? Value::LargestUInt(Value::maxLargestInt) + 1
    %%%%%:  795-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  795-block  1
    %%%%%:  795-block  2
        -:  796:                 : Value::maxLargestUInt;
    #####:  797:  Value::LargestUInt threshold = maxIntegerValue / 10;
    #####:  798:  Value::LargestUInt value = 0;
    #####:  799:  while (current < token.end_) {
    %%%%%:  799-block  0
    %%%%%:  799-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  800:    Char c = *current++;
    #####:  801:    if (c < '0' || c > '9')
    %%%%%:  801-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  801-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  802:      return decodeDouble(token, decoded);
    %%%%%:  802-block  0
Aufruf  0 niemals ausgeführt
    #####:  803:    auto digit(static_cast<Value::UInt>(c - '0'));
    #####:  804:    if (value >= threshold) {
    %%%%%:  804-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -:  805:      // We've hit or exceeded the max value divided by 10 (rounded down). If
        -:  806:      // a) we've only just touched the limit, b) this is the last digit, and
        -:  807:      // c) it's small enough to fit in that rounding delta, we're okay.
        -:  808:      // Otherwise treat this number as a double to avoid overflow.
    #####:  809:      if (value > threshold || current != token.end_ ||
    %%%%%:  809-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  809-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  810:          digit > maxIntegerValue % 10) {
    %%%%%:  810-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  811:        return decodeDouble(token, decoded);
    %%%%%:  811-block  0
Aufruf  0 niemals ausgeführt
        -:  812:      }
        -:  813:    }
    #####:  814:    value = value * 10 + digit;
    %%%%%:  814-block  0
        -:  815:  }
    #####:  816:  if (isNegative && value == maxIntegerValue)
    %%%%%:  816-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  816-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  817:    decoded = Value::minLargestInt;
    %%%%%:  817-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  817-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$:  817-block  2
Aufruf  5 niemals ausgeführt
    #####:  818:  else if (isNegative)
    %%%%%:  818-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  819:    decoded = -Value::LargestInt(value);
    %%%%%:  819-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  819-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$:  819-block  2
Aufruf  5 niemals ausgeführt
    #####:  820:  else if (value <= Value::LargestUInt(Value::maxInt))
    %%%%%:  820-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  821:    decoded = Value::LargestInt(value);
    %%%%%:  821-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  821-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$:  821-block  2
Aufruf  5 niemals ausgeführt
        -:  822:  else
    #####:  823:    decoded = value;
    %%%%%:  823-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  823-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    #####:  824:  return true;
    %%%%%:  824-block  0
        -:  825:}
        -:  826:
function _ZN4Json6Reader12decodeDoubleERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  827:bool Reader::decodeDouble(Token& token) {
    #####:  828:  Value decoded;
    %%%%%:  828-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  829:  if (!decodeDouble(token, decoded))
    %%%%%:  829-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  829-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  830:    return false;
    %%%%%:  830-block  0
    #####:  831:  currentValue().swapPayload(decoded);
    %%%%%:  831-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  831-block  1
Aufruf  3 niemals ausgeführt
    #####:  832:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  832-block  0
Aufruf  3 niemals ausgeführt
    #####:  833:  currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  833-block  0
Aufruf  3 niemals ausgeführt
    #####:  834:  return true;
    #####:  835:}
    %%%%%:  835-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  835-block  1
Aufruf  1 niemals ausgeführt
        -:  836:
function _ZN4Json6Reader12decodeDoubleERNS0_5TokenERNS_5ValueE called 0 returned 0% blocks executed 0%
    #####:  837:bool Reader::decodeDouble(Token& token, Value& decoded) {
    #####:  838:  double value = 0;
    #####:  839:  String buffer(token.start_, token.end_);
    %%%%%:  839-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  839-block  1
Aufruf  4 niemals ausgeführt
    $$$$$:  839-block  2
Aufruf  5 niemals ausgeführt
    $$$$$:  839-block  3
    #####:  840:  IStringStream is(buffer);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  841:  if (!(is >> value))
    %%%%%:  841-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  841-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  841-block  2
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####:  842:    return addError(
    %%%%%:  842-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  843:        "'" + String(token.start_, token.end_) + "' is not a number.", token);
    %%%%%:  843-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  843-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  843-block  2
Aufruf  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%:  843-block  3
    %%%%%:  843-block  4
Aufruf 10 niemals ausgeführt
Aufruf 11 niemals ausgeführt
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
    $$$$$:  843-block  5
Aufruf 14 niemals ausgeführt
    $$$$$:  843-block  6
Aufruf 15 niemals ausgeführt
    $$$$$:  843-block  7
Aufruf 16 niemals ausgeführt
    $$$$$:  843-block  8
Aufruf 17 niemals ausgeführt
    $$$$$:  843-block  9
    $$$$$:  843-block 10
    $$$$$:  843-block 11
    $$$$$:  843-block 12
    #####:  844:  decoded = value;
    %%%%%:  844-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  844-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$:  844-block  2
    #####:  845:  return true;
    #####:  846:}
    %%%%%:  846-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$:  846-block  1
Aufruf  2 niemals ausgeführt
    $$$$$:  846-block  2
Aufruf  3 niemals ausgeführt
        -:  847:
function _ZN4Json6Reader12decodeStringERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####:  848:bool Reader::decodeString(Token& token) {
    #####:  849:  String decoded_string;
    %%%%%:  849-block  0
Aufruf  0 niemals ausgeführt
    #####:  850:  if (!decodeString(token, decoded_string))
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  850-block  0
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  851:    return false;
    %%%%%:  851-block  0
    #####:  852:  Value decoded(decoded_string);
    %%%%%:  852-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  853:  currentValue().swapPayload(decoded);
    %%%%%:  853-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  853-block  1
Aufruf  3 niemals ausgeführt
    #####:  854:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  854-block  0
Aufruf  3 niemals ausgeführt
    #####:  855:  currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  855-block  0
Aufruf  3 niemals ausgeführt
    #####:  856:  return true;
    #####:  857:}
Aufruf  0 niemals ausgeführt
    %%%%%:  857-block  0
Aufruf  1 niemals ausgeführt
    $$$$$:  857-block  1
Aufruf  2 niemals ausgeführt
    $$$$$:  857-block  2
Aufruf  3 niemals ausgeführt
        -:  858:
function _ZN4Json6Reader12decodeStringERNS0_5TokenERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  859:bool Reader::decodeString(Token& token, String& decoded) {
    #####:  860:  decoded.reserve(static_cast<size_t>(token.end_ - token.start_ - 2));
    %%%%%:  860-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  861:  Location current = token.start_ + 1; // skip '"'
    #####:  862:  Location end = token.end_ - 1;       // do not include '"'
    #####:  863:  while (current != end) {
    %%%%%:  863-block  0
    %%%%%:  863-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  864:    Char c = *current++;
    #####:  865:    if (c == '"')
    %%%%%:  865-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  866:      break;
    %%%%%:  866-block  0
    #####:  867:    if (c == '\\') {
    %%%%%:  867-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  868:      if (current == end)
    %%%%%:  868-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  869:        return addError("Empty escape sequence in string", token, current);
    %%%%%:  869-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  869-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  869-block  2
    %%%%%:  869-block  3
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  869-block  4
Aufruf  9 niemals ausgeführt
    $$$$$:  869-block  5
Aufruf 10 niemals ausgeführt
    $$$$$:  869-block  6
    $$$$$:  869-block  7
    #####:  870:      Char escape = *current++;
    #####:  871:      switch (escape) {
    %%%%%:  871-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####:  872:      case '"':
    #####:  873:        decoded += '"';
    %%%%%:  873-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  874:        break;
    %%%%%:  874-block  0
    #####:  875:      case '/':
    #####:  876:        decoded += '/';
    %%%%%:  876-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  877:        break;
    %%%%%:  877-block  0
    #####:  878:      case '\\':
    #####:  879:        decoded += '\\';
    %%%%%:  879-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  880:        break;
    %%%%%:  880-block  0
    #####:  881:      case 'b':
    #####:  882:        decoded += '\b';
    %%%%%:  882-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  883:        break;
    %%%%%:  883-block  0
    #####:  884:      case 'f':
    #####:  885:        decoded += '\f';
    %%%%%:  885-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  886:        break;
    %%%%%:  886-block  0
    #####:  887:      case 'n':
    #####:  888:        decoded += '\n';
    %%%%%:  888-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  889:        break;
    %%%%%:  889-block  0
    #####:  890:      case 'r':
    #####:  891:        decoded += '\r';
    %%%%%:  891-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  892:        break;
    %%%%%:  892-block  0
    #####:  893:      case 't':
    #####:  894:        decoded += '\t';
    %%%%%:  894-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  895:        break;
    %%%%%:  895-block  0
    #####:  896:      case 'u': {
        -:  897:        unsigned int unicode;
    #####:  898:        if (!decodeUnicodeCodePoint(token, current, end, unicode))
    %%%%%:  898-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  898-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  899:          return false;
    %%%%%:  899-block  0
    #####:  900:        decoded += codePointToUTF8(unicode);
    %%%%%:  900-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  900-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  900-block  2
Aufruf  6 niemals ausgeführt
    $$$$$:  900-block  3
Aufruf  7 niemals ausgeführt
    $$$$$:  900-block  4
    #####:  901:      } break;
    #####:  902:      default:
    #####:  903:        return addError("Bad escape sequence in string", token, current);
    %%%%%:  903-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  903-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  903-block  2
    %%%%%:  903-block  3
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  903-block  4
Aufruf  9 niemals ausgeführt
    $$$$$:  903-block  5
Aufruf 10 niemals ausgeführt
    $$$$$:  903-block  6
    $$$$$:  903-block  7
        -:  904:      }
        -:  905:    } else {
    #####:  906:      decoded += c;
    %%%%%:  906-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:  907:    }
        -:  908:  }
    #####:  909:  return true;
    %%%%%:  909-block  0
        -:  910:}
        -:  911:
function _ZN4Json6Reader22decodeUnicodeCodePointERNS0_5TokenERPKcS4_Rj called 0 returned 0% blocks executed 0%
    #####:  912:bool Reader::decodeUnicodeCodePoint(Token& token, Location& current,
        -:  913:                                    Location end, unsigned int& unicode) {
        -:  914:
    #####:  915:  if (!decodeUnicodeEscapeSequence(token, current, end, unicode))
    %%%%%:  915-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  916:    return false;
    %%%%%:  916-block  0
    #####:  917:  if (unicode >= 0xD800 && unicode <= 0xDBFF) {
    %%%%%:  917-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  917-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -:  918:    // surrogate pairs
    #####:  919:    if (end - current < 6)
    %%%%%:  919-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  920:      return addError(
    %%%%%:  920-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  920-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  920-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  920-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  920-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  920-block  5
    $$$$$:  920-block  6
Aufruf 11 niemals ausgeführt
        -:  921:          "additional six characters expected to parse unicode surrogate pair.",
    #####:  922:          token, current);
    %%%%%:  922-block  0
    #####:  923:    if (*(current++) == '\\' && *(current++) == 'u') {
    %%%%%:  923-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  923-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  923-block  2
    %%%%%:  923-block  3
    %%%%%:  923-block  4
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -:  924:      unsigned int surrogatePair;
    #####:  925:      if (decodeUnicodeEscapeSequence(token, current, end, surrogatePair)) {
    %%%%%:  925-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  925-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  926:        unicode = 0x10000 + ((unicode & 0x3FF) << 10) + (surrogatePair & 0x3FF);
    %%%%%:  926-block  0
        -:  927:      } else
    #####:  928:        return false;
    %%%%%:  928-block  0
        -:  929:    } else
    #####:  930:      return addError("expecting another \\u token to begin the second half of "
    %%%%%:  930-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  930-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  930-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  930-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  930-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  930-block  5
        -:  931:                      "a unicode surrogate pair",
    #####:  932:                      token, current);
    %%%%%:  932-block  0
        -:  933:  }
    #####:  934:  return true;
    %%%%%:  934-block  0
        -:  935:}
        -:  936:
function _ZN4Json6Reader27decodeUnicodeEscapeSequenceERNS0_5TokenERPKcS4_Rj called 0 returned 0% blocks executed 0%
    #####:  937:bool Reader::decodeUnicodeEscapeSequence(Token& token, Location& current,
        -:  938:                                         Location end,
        -:  939:                                         unsigned int& ret_unicode) {
    #####:  940:  if (end - current < 4)
    %%%%%:  940-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  941:    return addError(
    %%%%%:  941-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  941-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  941-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  941-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  941-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  941-block  5
    $$$$$:  941-block  6
Aufruf 11 niemals ausgeführt
        -:  942:        "Bad unicode escape sequence in string: four digits expected.", token,
    #####:  943:        current);
    %%%%%:  943-block  0
    #####:  944:  int unicode = 0;
    #####:  945:  for (int index = 0; index < 4; ++index) {
    %%%%%:  945-block  0
    %%%%%:  945-block  1
    %%%%%:  945-block  2
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  946:    Char c = *current++;
    #####:  947:    unicode *= 16;
    #####:  948:    if (c >= '0' && c <= '9')
    %%%%%:  948-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  948-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  949:      unicode += c - '0';
    %%%%%:  949-block  0
    #####:  950:    else if (c >= 'a' && c <= 'f')
    %%%%%:  950-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  950-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  951:      unicode += c - 'a' + 10;
    %%%%%:  951-block  0
    #####:  952:    else if (c >= 'A' && c <= 'F')
    %%%%%:  952-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  952-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####:  953:      unicode += c - 'A' + 10;
    %%%%%:  953-block  0
        -:  954:    else
    #####:  955:      return addError(
    %%%%%:  955-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%:  955-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:  955-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$:  955-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:  955-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:  955-block  5
        -:  956:          "Bad unicode escape sequence in string: hexadecimal digit expected.",
    #####:  957:          token, current);
    %%%%%:  957-block  0
        -:  958:  }
    #####:  959:  ret_unicode = static_cast<unsigned int>(unicode);
    #####:  960:  return true;
    %%%%%:  960-block  0
        -:  961:}
        -:  962:
function _ZN4Json6Reader8addErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS0_5TokenEPKc called 0 returned 0% blocks executed 0%
    #####:  963:bool Reader::addError(const String& message, Token& token, Location extra) {
    #####:  964:  ErrorInfo info;
    %%%%%:  964-block  0
Aufruf  0 niemals ausgeführt
    #####:  965:  info.token_ = token;
    #####:  966:  info.message_ = message;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  967:  info.extra_ = extra;
    #####:  968:  errors_.push_back(info);
    %%%%%:  968-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  969:  return false;
    %%%%%:  969-block  0
    #####:  970:}
    %%%%%:  970-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  970-block  1
Aufruf  1 niemals ausgeführt
        -:  971:
function _ZN4Json6Reader16recoverFromErrorENS0_9TokenTypeE called 0 returned 0% blocks executed 0%
    #####:  972:bool Reader::recoverFromError(TokenType skipUntilToken) {
    #####:  973:  size_t const errorCount = errors_.size();
    %%%%%:  973-block  0
Aufruf  0 niemals ausgeführt
        -:  974:  Token skip;
        -:  975:  for (;;) {
    #####:  976:    if (!readToken(skip))
    %%%%%:  976-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  976-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####:  977:      errors_.resize(errorCount); // discard errors caused by recovery
    %%%%%:  977-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  978:    if (skip.type_ == skipUntilToken || skip.type_ == tokenEndOfStream)
    %%%%%:  978-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%:  978-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -:  979:      break;
        -:  980:  }
    #####:  981:  errors_.resize(errorCount);
    %%%%%:  981-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  982:  return false;
    %%%%%:  982-block  0
    %%%%%:  982-block  1
        -:  983:}
        -:  984:
function _ZN4Json6Reader18addErrorAndRecoverERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS0_5TokenENS0_9TokenTypeE called 0 returned 0% blocks executed 0%
    #####:  985:bool Reader::addErrorAndRecover(const String& message, Token& token,
        -:  986:                                TokenType skipUntilToken) {
    #####:  987:  addError(message, token);
    %%%%%:  987-block  0
Aufruf  0 niemals ausgeführt
    #####:  988:  return recoverFromError(skipUntilToken);
Aufruf  0 niemals ausgeführt
        -:  989:}
        -:  990:
function _ZN4Json6Reader12currentValueEv called 0 returned 0% blocks executed 0%
    #####:  991:Value& Reader::currentValue() { return *(nodes_.top()); }
    %%%%%:  991-block  0
Aufruf  0 niemals ausgeführt
        -:  992:
function _ZN4Json6Reader11getNextCharEv called 0 returned 0% blocks executed 0%
    #####:  993:Reader::Char Reader::getNextChar() {
    #####:  994:  if (current_ == end_)
    %%%%%:  994-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####:  995:    return 0;
    %%%%%:  995-block  0
    #####:  996:  return *current_++;
    %%%%%:  996-block  0
        -:  997:}
        -:  998:
function _ZNK4Json6Reader24getLocationLineAndColumnEPKcRiS3_ called 0 returned 0% blocks executed 0%
    #####:  999:void Reader::getLocationLineAndColumn(Location location, int& line,
        -: 1000:                                      int& column) const {
    #####: 1001:  Location current = begin_;
    #####: 1002:  Location lastLineStart = current;
    #####: 1003:  line = 0;
    #####: 1004:  while (current < location && current != end_) {
    %%%%%: 1004-block  0
    %%%%%: 1004-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1004-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1005:    Char c = *current++;
    #####: 1006:    if (c == '\r') {
    %%%%%: 1006-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1007:      if (*current == '\n')
    %%%%%: 1007-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1008:        ++current;
    %%%%%: 1008-block  0
    #####: 1009:      lastLineStart = current;
    #####: 1010:      ++line;
    %%%%%: 1010-block  0
    #####: 1011:    } else if (c == '\n') {
    %%%%%: 1011-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1012:      lastLineStart = current;
    #####: 1013:      ++line;
    %%%%%: 1013-block  0
        -: 1014:    }
        -: 1015:  }
        -: 1016:  // column & line start at 1
    #####: 1017:  column = int(location - lastLineStart) + 1;
    #####: 1018:  ++line;
    #####: 1019:}
        -: 1020:
function _ZNK4Json6Reader24getLocationLineAndColumnB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 1021:String Reader::getLocationLineAndColumn(Location location) const {
        -: 1022:  int line, column;
    #####: 1023:  getLocationLineAndColumn(location, line, column);
    %%%%%: 1023-block  0
Aufruf  0 niemals ausgeführt
        -: 1024:  char buffer[18 + 16 + 16 + 1];
    #####: 1025:  jsoncpp_snprintf(buffer, sizeof(buffer), "Line %d, Column %d", line, column);
    #####: 1026:  return buffer;
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1026-block  0
Aufruf  4 niemals ausgeführt
    %%%%%: 1026-block  1
    $$$$$: 1026-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 1026-block  3
        -: 1027:}
        -: 1028:
        -: 1029:// Deprecated. Preserved for backward compatibility
function _ZNK4Json6Reader24getFormatedErrorMessagesB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1030:String Reader::getFormatedErrorMessages() const {
    #####: 1031:  return getFormattedErrorMessages();
    %%%%%: 1031-block  0
Aufruf  0 niemals ausgeführt
        -: 1032:}
        -: 1033:
function _ZNK4Json6Reader25getFormattedErrorMessagesB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 1034:String Reader::getFormattedErrorMessages() const {
    #####: 1035:  String formattedMessage;
    %%%%%: 1035-block  0
Aufruf  0 niemals ausgeführt
    #####: 1036:  for (const auto& error : errors_) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 1036-block  0
Aufruf  2 niemals ausgeführt
    %%%%%: 1036-block  1
Aufruf  3 niemals ausgeführt
    %%%%%: 1036-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
        -: 1037:    formattedMessage +=
    #####: 1038:        "* " + getLocationLineAndColumn(error.token_.start_) + "\n";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1038-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1038-block  1
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 1038-block  2
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 1038-block  3
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
Aufruf 14 niemals ausgeführt
    $$$$$: 1038-block  4
Aufruf 15 niemals ausgeführt
    $$$$$: 1038-block  5
Aufruf 16 niemals ausgeführt
    $$$$$: 1038-block  6
Aufruf 17 niemals ausgeführt
    $$$$$: 1038-block  7
    $$$$$: 1038-block  8
    $$$$$: 1038-block  9
    #####: 1039:    formattedMessage += "  " + error.message_ + "\n";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1039-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1039-block  1
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 1039-block  2
Aufruf  9 niemals ausgeführt
Aufruf 10 niemals ausgeführt
    $$$$$: 1039-block  3
Aufruf 11 niemals ausgeführt
    $$$$$: 1039-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 1039-block  5
    $$$$$: 1039-block  6
    #####: 1040:    if (error.extra_)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1041:      formattedMessage +=
    #####: 1042:          "See " + getLocationLineAndColumn(error.extra_) + " for detail.\n";
    %%%%%: 1042-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1042-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1042-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 1042-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 1042-block  4
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
Aufruf 14 niemals ausgeführt
    $$$$$: 1042-block  5
Aufruf 15 niemals ausgeführt
    $$$$$: 1042-block  6
Aufruf 16 niemals ausgeführt
    $$$$$: 1042-block  7
Aufruf 17 niemals ausgeführt
    $$$$$: 1042-block  8
    $$$$$: 1042-block  9
    $$$$$: 1042-block 10
        -: 1043:  }
    #####: 1044:  return formattedMessage;
    %%%%%: 1044-block  0
    %%%%%: 1044-block  1
    =====: 1045:}
    $$$$$: 1045-block  0
Aufruf  0 niemals ausgeführt
        -: 1046:
function _ZNK4Json6Reader19getStructuredErrorsEv called 0 returned 0% blocks executed 0%
    #####: 1047:std::vector<Reader::StructuredError> Reader::getStructuredErrors() const {
    #####: 1048:  std::vector<Reader::StructuredError> allErrors;
    %%%%%: 1048-block  0
Aufruf  0 niemals ausgeführt
    #####: 1049:  for (const auto& error : errors_) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 1049-block  0
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
    %%%%%: 1049-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 1050:    Reader::StructuredError structured;
Aufruf  0 niemals ausgeführt
    #####: 1051:    structured.offset_start = error.token_.start_ - begin_;
    #####: 1052:    structured.offset_limit = error.token_.end_ - begin_;
    #####: 1053:    structured.message = error.message_;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1054:    allErrors.push_back(structured);
    %%%%%: 1054-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1055:  }
    %%%%%: 1055-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1055-block  1
Aufruf  1 niemals ausgeführt
    #####: 1056:  return allErrors;
    %%%%%: 1056-block  0
    %%%%%: 1056-block  1
    =====: 1057:}
    $$$$$: 1057-block  0
Aufruf  0 niemals ausgeführt
        -: 1058:
function _ZN4Json6Reader9pushErrorERKNS_5ValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1059:bool Reader::pushError(const Value& value, const String& message) {
    #####: 1060:  ptrdiff_t const length = end_ - begin_;
    #####: 1061:  if (value.getOffsetStart() > length || value.getOffsetLimit() > length)
    %%%%%: 1061-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1061-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1061-block  2
    %%%%%: 1061-block  3
    %%%%%: 1061-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 1062:    return false;
    %%%%%: 1062-block  0
        -: 1063:  Token token;
    #####: 1064:  token.type_ = tokenError;
    #####: 1065:  token.start_ = begin_ + value.getOffsetStart();
    %%%%%: 1065-block  0
Aufruf  0 niemals ausgeführt
    #####: 1066:  token.end_ = begin_ + value.getOffsetLimit();
Aufruf  0 niemals ausgeführt
    #####: 1067:  ErrorInfo info;
Aufruf  0 niemals ausgeführt
    #####: 1068:  info.token_ = token;
    #####: 1069:  info.message_ = message;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1070:  info.extra_ = nullptr;
    #####: 1071:  errors_.push_back(info);
    %%%%%: 1071-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1072:  return true;
    #####: 1073:}
    %%%%%: 1073-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1073-block  1
Aufruf  1 niemals ausgeführt
        -: 1074:
function _ZN4Json6Reader9pushErrorERKNS_5ValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES3_ called 0 returned 0% blocks executed 0%
    #####: 1075:bool Reader::pushError(const Value& value, const String& message,
        -: 1076:                       const Value& extra) {
    #####: 1077:  ptrdiff_t const length = end_ - begin_;
    #####: 1078:  if (value.getOffsetStart() > length || value.getOffsetLimit() > length ||
    %%%%%: 1078-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1078-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 1078-block  2
    %%%%%: 1078-block  3
    %%%%%: 1078-block  4
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####: 1079:      extra.getOffsetLimit() > length)
    %%%%%: 1079-block  0
Aufruf  0 niemals ausgeführt
    #####: 1080:    return false;
    %%%%%: 1080-block  0
        -: 1081:  Token token;
    #####: 1082:  token.type_ = tokenError;
    #####: 1083:  token.start_ = begin_ + value.getOffsetStart();
    %%%%%: 1083-block  0
Aufruf  0 niemals ausgeführt
    #####: 1084:  token.end_ = begin_ + value.getOffsetLimit();
Aufruf  0 niemals ausgeführt
    #####: 1085:  ErrorInfo info;
Aufruf  0 niemals ausgeführt
    #####: 1086:  info.token_ = token;
    #####: 1087:  info.message_ = message;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1088:  info.extra_ = begin_ + extra.getOffsetStart();
    %%%%%: 1088-block  0
Aufruf  0 niemals ausgeführt
    #####: 1089:  errors_.push_back(info);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1090:  return true;
    #####: 1091:}
    %%%%%: 1091-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1091-block  1
Aufruf  1 niemals ausgeführt
        -: 1092:
function _ZNK4Json6Reader4goodEv called 0 returned 0% blocks executed 0%
    #####: 1093:bool Reader::good() const { return errors_.empty(); }
    %%%%%: 1093-block  0
Aufruf  0 niemals ausgeführt
        -: 1094:
        -: 1095:// Originally copied from the Features class (now deprecated), used internally
        -: 1096:// for features implementation.
        -: 1097:class OurFeatures {
        -: 1098:public:
        -: 1099:  static OurFeatures all();
        -: 1100:  bool allowComments_;
        -: 1101:  bool allowTrailingCommas_;
        -: 1102:  bool strictRoot_;
        -: 1103:  bool allowDroppedNullPlaceholders_;
        -: 1104:  bool allowNumericKeys_;
        -: 1105:  bool allowSingleQuotes_;
        -: 1106:  bool failIfExtra_;
        -: 1107:  bool rejectDupKeys_;
        -: 1108:  bool allowSpecialFloats_;
        -: 1109:  bool skipBom_;
        -: 1110:  size_t stackLimit_;
        -: 1111:}; // OurFeatures
        -: 1112:
function _ZN4Json11OurFeatures3allEv called 0 returned 0% blocks executed 0%
    #####: 1113:OurFeatures OurFeatures::all() { return {}; }
    %%%%%: 1113-block  0
        -: 1114:
        -: 1115:// Implementation of class Reader
        -: 1116:// ////////////////////////////////
        -: 1117:
        -: 1118:// Originally copied from the Reader class (now deprecated), used internally
        -: 1119:// for implementing JSON reading.
        -: 1120:class OurReader {
        -: 1121:public:
        -: 1122:  using Char = char;
        -: 1123:  using Location = const Char*;
        -: 1124:  struct StructuredError {
        -: 1125:    ptrdiff_t offset_start;
        -: 1126:    ptrdiff_t offset_limit;
        -: 1127:    String message;
        -: 1128:  };
        -: 1129:
        -: 1130:  explicit OurReader(OurFeatures const& features);
        -: 1131:  bool parse(const char* beginDoc, const char* endDoc, Value& root,
        -: 1132:             bool collectComments = true);
        -: 1133:  String getFormattedErrorMessages() const;
        -: 1134:  std::vector<StructuredError> getStructuredErrors() const;
        -: 1135:
        -: 1136:private:
        -: 1137:  OurReader(OurReader const&);      // no impl
        -: 1138:  void operator=(OurReader const&); // no impl
        -: 1139:
        -: 1140:  enum TokenType {
        -: 1141:    tokenEndOfStream = 0,
        -: 1142:    tokenObjectBegin,
        -: 1143:    tokenObjectEnd,
        -: 1144:    tokenArrayBegin,
        -: 1145:    tokenArrayEnd,
        -: 1146:    tokenString,
        -: 1147:    tokenNumber,
        -: 1148:    tokenTrue,
        -: 1149:    tokenFalse,
        -: 1150:    tokenNull,
        -: 1151:    tokenNaN,
        -: 1152:    tokenPosInf,
        -: 1153:    tokenNegInf,
        -: 1154:    tokenArraySeparator,
        -: 1155:    tokenMemberSeparator,
        -: 1156:    tokenComment,
        -: 1157:    tokenError
        -: 1158:  };
        -: 1159:
        -: 1160:  class Token {
        -: 1161:  public:
        -: 1162:    TokenType type_;
        -: 1163:    Location start_;
        -: 1164:    Location end_;
        -: 1165:  };
        -: 1166:
        -: 1167:  class ErrorInfo {
        -: 1168:  public:
        -: 1169:    Token token_;
        -: 1170:    String message_;
        -: 1171:    Location extra_;
        -: 1172:  };
        -: 1173:
        -: 1174:  using Errors = std::deque<ErrorInfo>;
        -: 1175:
        -: 1176:  bool readToken(Token& token);
        -: 1177:  void skipSpaces();
        -: 1178:  void skipBom(bool skipBom);
        -: 1179:  bool match(const Char* pattern, int patternLength);
        -: 1180:  bool readComment();
        -: 1181:  bool readCStyleComment(bool* containsNewLineResult);
        -: 1182:  bool readCppStyleComment();
        -: 1183:  bool readString();
        -: 1184:  bool readStringSingleQuote();
        -: 1185:  bool readNumber(bool checkInf);
        -: 1186:  bool readValue();
        -: 1187:  bool readObject(Token& token);
        -: 1188:  bool readArray(Token& token);
        -: 1189:  bool decodeNumber(Token& token);
        -: 1190:  bool decodeNumber(Token& token, Value& decoded);
        -: 1191:  bool decodeString(Token& token);
        -: 1192:  bool decodeString(Token& token, String& decoded);
        -: 1193:  bool decodeDouble(Token& token);
        -: 1194:  bool decodeDouble(Token& token, Value& decoded);
        -: 1195:  bool decodeUnicodeCodePoint(Token& token, Location& current, Location end,
        -: 1196:                              unsigned int& unicode);
        -: 1197:  bool decodeUnicodeEscapeSequence(Token& token, Location& current,
        -: 1198:                                   Location end, unsigned int& unicode);
        -: 1199:  bool addError(const String& message, Token& token, Location extra = nullptr);
        -: 1200:  bool recoverFromError(TokenType skipUntilToken);
        -: 1201:  bool addErrorAndRecover(const String& message, Token& token,
        -: 1202:                          TokenType skipUntilToken);
        -: 1203:  void skipUntilSpace();
        -: 1204:  Value& currentValue();
        -: 1205:  Char getNextChar();
        -: 1206:  void getLocationLineAndColumn(Location location, int& line,
        -: 1207:                                int& column) const;
        -: 1208:  String getLocationLineAndColumn(Location location) const;
        -: 1209:  void addComment(Location begin, Location end, CommentPlacement placement);
        -: 1210:  void skipCommentTokens(Token& token);
        -: 1211:
        -: 1212:  static String normalizeEOL(Location begin, Location end);
        -: 1213:  static bool containsNewLine(Location begin, Location end);
        -: 1214:
        -: 1215:  using Nodes = std::stack<Value*>;
        -: 1216:
        -: 1217:  Nodes nodes_{};
        -: 1218:  Errors errors_{};
        -: 1219:  String document_{};
        -: 1220:  Location begin_ = nullptr;
        -: 1221:  Location end_ = nullptr;
        -: 1222:  Location current_ = nullptr;
        -: 1223:  Location lastValueEnd_ = nullptr;
        -: 1224:  Value* lastValue_ = nullptr;
        -: 1225:  bool lastValueHasAComment_ = false;
        -: 1226:  String commentsBefore_{};
        -: 1227:
        -: 1228:  OurFeatures const features_;
        -: 1229:  bool collectComments_ = false;
        -: 1230:}; // OurReader
        -: 1231:
        -: 1232:// complete copy of Read impl, for OurReader
        -: 1233:
function _ZN4Json9OurReader15containsNewLineEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1234:bool OurReader::containsNewLine(OurReader::Location begin,
        -: 1235:                                OurReader::Location end) {
function _ZZN4Json9OurReader15containsNewLineEPKcS2_ENKUlcE_clEc called 0 returned 0% blocks executed 0%
    #####: 1236:  return std::any_of(begin, end, [](char b) { return b == '\n' || b == '\r'; });
    %%%%%: 1236-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 1236-block  1
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1236-block  2
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1236-block  3
    %%%%%: 1236-block  4
    %%%%%: 1236-block  5
        -: 1237:}
        -: 1238:
function _ZN4Json9OurReaderC2ERKNS_11OurFeaturesE called 0 returned 0% blocks executed 0%
    #####: 1239:OurReader::OurReader(OurFeatures const& features) : features_(features) {}
    %%%%%: 1239-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1239-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
    $$$$$: 1239-block  2
Aufruf  6 niemals ausgeführt
        -: 1240:
function _ZN4Json9OurReader5parseEPKcS2_RNS_5ValueEb called 0 returned 0% blocks executed 0%
    #####: 1241:bool OurReader::parse(const char* beginDoc, const char* endDoc, Value& root,
        -: 1242:                      bool collectComments) {
    #####: 1243:  if (!features_.allowComments_) {
    %%%%%: 1243-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1244:    collectComments = false;
    %%%%%: 1244-block  0
        -: 1245:  }
        -: 1246:
    #####: 1247:  begin_ = beginDoc;
    #####: 1248:  end_ = endDoc;
    #####: 1249:  collectComments_ = collectComments;
    #####: 1250:  current_ = begin_;
    #####: 1251:  lastValueEnd_ = nullptr;
    #####: 1252:  lastValue_ = nullptr;
    #####: 1253:  commentsBefore_.clear();
    %%%%%: 1253-block  0
Aufruf  0 niemals ausgeführt
    #####: 1254:  errors_.clear();
Aufruf  0 niemals ausgeführt
    #####: 1255:  while (!nodes_.empty())
    %%%%%: 1255-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1256:    nodes_.pop();
    %%%%%: 1256-block  0
Aufruf  0 niemals ausgeführt
    #####: 1257:  nodes_.push(&root);
    %%%%%: 1257-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 1257-block  1
        -: 1258:
        -: 1259:  // skip byte order mark if it exists at the beginning of the UTF-8 text.
    #####: 1260:  skipBom(features_.skipBom_);
    %%%%%: 1260-block  0
Aufruf  0 niemals ausgeführt
    #####: 1261:  bool successful = readValue();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1262:  nodes_.pop();
    %%%%%: 1262-block  0
Aufruf  0 niemals ausgeführt
        -: 1263:  Token token;
    #####: 1264:  skipCommentTokens(token);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1265:  if (features_.failIfExtra_ && (token.type_ != tokenEndOfStream)) {
    %%%%%: 1265-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1265-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1266:    addError("Extra non-whitespace after JSON value.", token);
    %%%%%: 1266-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1266-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1266-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1266-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1266-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1266-block  5
    $$$$$: 1266-block  6
    #####: 1267:    return false;
        -: 1268:  }
    #####: 1269:  if (collectComments_ && !commentsBefore_.empty())
    %%%%%: 1269-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1269-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1269-block  2
    %%%%%: 1269-block  3
    %%%%%: 1269-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 1270:    root.setComment(commentsBefore_, commentAfter);
    %%%%%: 1270-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1270-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1270-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 1270-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 1270-block  4
    #####: 1271:  if (features_.strictRoot_) {
    %%%%%: 1271-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1272:    if (!root.isArray() && !root.isObject()) {
    %%%%%: 1272-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1272-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1272-block  2
    %%%%%: 1272-block  3
    %%%%%: 1272-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
        -: 1273:      // Set error location to start of doc, ideally should be first token found
        -: 1274:      // in doc
    #####: 1275:      token.type_ = tokenError;
    #####: 1276:      token.start_ = beginDoc;
    #####: 1277:      token.end_ = endDoc;
    #####: 1278:      addError(
    %%%%%: 1278-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1278-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1278-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1278-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1278-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1278-block  5
    $$$$$: 1278-block  6
        -: 1279:          "A valid JSON document must be either an array or an object value.",
        -: 1280:          token);
    #####: 1281:      return false;
        -: 1282:    }
        -: 1283:  }
    #####: 1284:  return successful;
    %%%%%: 1284-block  0
        -: 1285:}
        -: 1286:
function _ZN4Json9OurReader9readValueEv called 0 returned 0% blocks executed 0%
    #####: 1287:bool OurReader::readValue() {
        -: 1288:  //  To preserve the old behaviour we cast size_t to int.
    #####: 1289:  if (nodes_.size() > features_.stackLimit_)
    %%%%%: 1289-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1290:    throwRuntimeError("Exceeded stackLimit in readValue().");
    %%%%%: 1290-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1290-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 1290-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 1290-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 1290-block  4
    $$$$$: 1290-block  5
        -: 1291:  Token token;
    #####: 1292:  skipCommentTokens(token);
    %%%%%: 1292-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1293:  bool successful = true;
        -: 1294:
    #####: 1295:  if (collectComments_ && !commentsBefore_.empty()) {
    %%%%%: 1295-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1295-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1295-block  2
    %%%%%: 1295-block  3
    %%%%%: 1295-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 1296:    currentValue().setComment(commentsBefore_, commentBefore);
    %%%%%: 1296-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1296-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1296-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 1296-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1296-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1296-block  5
    #####: 1297:    commentsBefore_.clear();
Aufruf  0 niemals ausgeführt
        -: 1298:  }
        -: 1299:
    #####: 1300:  switch (token.type_) {
    %%%%%: 1300-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    #####: 1301:  case tokenObjectBegin:
    #####: 1302:    successful = readObject(token);
    %%%%%: 1302-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1303:    currentValue().setOffsetLimit(current_ - begin_);
    %%%%%: 1303-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1303-block  1
Aufruf  3 niemals ausgeführt
    #####: 1304:    break;
    #####: 1305:  case tokenArrayBegin:
    #####: 1306:    successful = readArray(token);
    %%%%%: 1306-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1307:    currentValue().setOffsetLimit(current_ - begin_);
    %%%%%: 1307-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1307-block  1
Aufruf  3 niemals ausgeführt
    #####: 1308:    break;
    #####: 1309:  case tokenNumber:
    #####: 1310:    successful = decodeNumber(token);
    %%%%%: 1310-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1311:    break;
    %%%%%: 1311-block  0
    #####: 1312:  case tokenString:
    #####: 1313:    successful = decodeString(token);
    %%%%%: 1313-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1314:    break;
    %%%%%: 1314-block  0
    #####: 1315:  case tokenTrue: {
    #####: 1316:    Value v(true);
    %%%%%: 1316-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1317:    currentValue().swapPayload(v);
    %%%%%: 1317-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1317-block  1
Aufruf  3 niemals ausgeführt
    #####: 1318:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1318-block  0
Aufruf  3 niemals ausgeführt
    #####: 1319:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1319-block  0
Aufruf  3 niemals ausgeführt
    #####: 1320:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$: 1320-block  0
Aufruf  1 niemals ausgeführt
    #####: 1321:  case tokenFalse: {
    #####: 1322:    Value v(false);
    %%%%%: 1322-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1323:    currentValue().swapPayload(v);
    %%%%%: 1323-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1323-block  1
Aufruf  3 niemals ausgeführt
    #####: 1324:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1324-block  0
Aufruf  3 niemals ausgeführt
    #####: 1325:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1325-block  0
Aufruf  3 niemals ausgeführt
    #####: 1326:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$: 1326-block  0
Aufruf  1 niemals ausgeführt
    #####: 1327:  case tokenNull: {
    #####: 1328:    Value v;
    %%%%%: 1328-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1329:    currentValue().swapPayload(v);
    %%%%%: 1329-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1329-block  1
Aufruf  3 niemals ausgeführt
    #####: 1330:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1330-block  0
Aufruf  3 niemals ausgeführt
    #####: 1331:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1331-block  0
Aufruf  3 niemals ausgeführt
    #####: 1332:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$: 1332-block  0
Aufruf  1 niemals ausgeführt
    #####: 1333:  case tokenNaN: {
    #####: 1334:    Value v(std::numeric_limits<double>::quiet_NaN());
    %%%%%: 1334-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1335:    currentValue().swapPayload(v);
    %%%%%: 1335-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1335-block  1
Aufruf  3 niemals ausgeführt
    #####: 1336:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1336-block  0
Aufruf  3 niemals ausgeführt
    #####: 1337:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1337-block  0
Aufruf  3 niemals ausgeführt
    #####: 1338:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$: 1338-block  0
Aufruf  1 niemals ausgeführt
    #####: 1339:  case tokenPosInf: {
    #####: 1340:    Value v(std::numeric_limits<double>::infinity());
    %%%%%: 1340-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1341:    currentValue().swapPayload(v);
    %%%%%: 1341-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1341-block  1
Aufruf  3 niemals ausgeführt
    #####: 1342:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1342-block  0
Aufruf  3 niemals ausgeführt
    #####: 1343:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1343-block  0
Aufruf  3 niemals ausgeführt
    #####: 1344:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$: 1344-block  0
Aufruf  1 niemals ausgeführt
    #####: 1345:  case tokenNegInf: {
    #####: 1346:    Value v(-std::numeric_limits<double>::infinity());
    %%%%%: 1346-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1347:    currentValue().swapPayload(v);
    %%%%%: 1347-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1347-block  1
Aufruf  3 niemals ausgeführt
    #####: 1348:    currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1348-block  0
Aufruf  3 niemals ausgeführt
    #####: 1349:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1349-block  0
Aufruf  3 niemals ausgeführt
    #####: 1350:  } break;
Aufruf  0 niemals ausgeführt
    $$$$$: 1350-block  0
Aufruf  1 niemals ausgeführt
    #####: 1351:  case tokenArraySeparator:
        -: 1352:  case tokenObjectEnd:
        -: 1353:  case tokenArrayEnd:
    #####: 1354:    if (features_.allowDroppedNullPlaceholders_) {
    %%%%%: 1354-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1355:      // "Un-read" the current token and mark the current value as a null
        -: 1356:      // token.
    #####: 1357:      current_--;
    #####: 1358:      Value v;
    %%%%%: 1358-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1359:      currentValue().swapPayload(v);
    %%%%%: 1359-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1359-block  1
Aufruf  3 niemals ausgeführt
    #####: 1360:      currentValue().setOffsetStart(current_ - begin_ - 1);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1360-block  0
Aufruf  3 niemals ausgeführt
    #####: 1361:      currentValue().setOffsetLimit(current_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1361-block  0
Aufruf  3 niemals ausgeführt
    #####: 1362:      break;
    #####: 1363:    } // else, fall through ...
    %%%%%: 1363-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1363-block  1
Aufruf  1 niemals ausgeführt
        -: 1364:  default:
    #####: 1365:    currentValue().setOffsetStart(token.start_ - begin_);
    %%%%%: 1365-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1365-block  1
Aufruf  3 niemals ausgeführt
    #####: 1366:    currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1366-block  0
Aufruf  3 niemals ausgeführt
    #####: 1367:    return addError("Syntax error: value, object or array expected.", token);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1367-block  0
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1367-block  1
    %%%%%: 1367-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1367-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1367-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1367-block  5
    $$$$$: 1367-block  6
        -: 1368:  }
        -: 1369:
    #####: 1370:  if (collectComments_) {
    %%%%%: 1370-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1371:    lastValueEnd_ = current_;
    #####: 1372:    lastValueHasAComment_ = false;
    #####: 1373:    lastValue_ = &currentValue();
    %%%%%: 1373-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1373-block  1
        -: 1374:  }
        -: 1375:
    #####: 1376:  return successful;
    %%%%%: 1376-block  0
        -: 1377:}
        -: 1378:
function _ZN4Json9OurReader17skipCommentTokensERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1379:void OurReader::skipCommentTokens(Token& token) {
    #####: 1380:  if (features_.allowComments_) {
    %%%%%: 1380-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1381:    do {
    #####: 1382:      readToken(token);
    %%%%%: 1382-block  0
Aufruf  0 niemals ausgeführt
    #####: 1383:    } while (token.type_ == tokenComment);
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1384:  } else {
    #####: 1385:    readToken(token);
    %%%%%: 1385-block  0
Aufruf  0 niemals ausgeführt
        -: 1386:  }
    #####: 1387:}
        -: 1388:
function _ZN4Json9OurReader9readTokenERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1389:bool OurReader::readToken(Token& token) {
    #####: 1390:  skipSpaces();
    %%%%%: 1390-block  0
Aufruf  0 niemals ausgeführt
    #####: 1391:  token.start_ = current_;
    #####: 1392:  Char c = getNextChar();
Aufruf  0 niemals ausgeführt
    #####: 1393:  bool ok = true;
    #####: 1394:  switch (c) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
Zweig 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
Zweig 17 niemals ausgeführt
Zweig 18 niemals ausgeführt
    #####: 1395:  case '{':
    #####: 1396:    token.type_ = tokenObjectBegin;
    #####: 1397:    break;
    %%%%%: 1397-block  0
    #####: 1398:  case '}':
    #####: 1399:    token.type_ = tokenObjectEnd;
    #####: 1400:    break;
    %%%%%: 1400-block  0
    #####: 1401:  case '[':
    #####: 1402:    token.type_ = tokenArrayBegin;
    #####: 1403:    break;
    %%%%%: 1403-block  0
    #####: 1404:  case ']':
    #####: 1405:    token.type_ = tokenArrayEnd;
    #####: 1406:    break;
    %%%%%: 1406-block  0
    #####: 1407:  case '"':
    #####: 1408:    token.type_ = tokenString;
    #####: 1409:    ok = readString();
    %%%%%: 1409-block  0
Aufruf  0 niemals ausgeführt
    #####: 1410:    break;
    #####: 1411:  case '\'':
    #####: 1412:    if (features_.allowSingleQuotes_) {
    %%%%%: 1412-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1413:      token.type_ = tokenString;
    #####: 1414:      ok = readStringSingleQuote();
    %%%%%: 1414-block  0
Aufruf  0 niemals ausgeführt
        -: 1415:    } else {
        -: 1416:      // If we don't allow single quotes, this is a failure case.
    #####: 1417:      ok = false;
    %%%%%: 1417-block  0
        -: 1418:    }
    #####: 1419:    break;
    %%%%%: 1419-block  0
    #####: 1420:  case '/':
    #####: 1421:    token.type_ = tokenComment;
    #####: 1422:    ok = readComment();
    %%%%%: 1422-block  0
Aufruf  0 niemals ausgeführt
    #####: 1423:    break;
    #####: 1424:  case '0':
        -: 1425:  case '1':
        -: 1426:  case '2':
        -: 1427:  case '3':
        -: 1428:  case '4':
        -: 1429:  case '5':
        -: 1430:  case '6':
        -: 1431:  case '7':
        -: 1432:  case '8':
        -: 1433:  case '9':
    #####: 1434:    token.type_ = tokenNumber;
    #####: 1435:    readNumber(false);
    %%%%%: 1435-block  0
Aufruf  0 niemals ausgeführt
    #####: 1436:    break;
    #####: 1437:  case '-':
    #####: 1438:    if (readNumber(true)) {
    %%%%%: 1438-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1439:      token.type_ = tokenNumber;
    %%%%%: 1439-block  0
        -: 1440:    } else {
    #####: 1441:      token.type_ = tokenNegInf;
    #####: 1442:      ok = features_.allowSpecialFloats_ && match("nfinity", 7);
    %%%%%: 1442-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1442-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1442-block  2
    %%%%%: 1442-block  3
    %%%%%: 1442-block  4
        -: 1443:    }
    #####: 1444:    break;
    %%%%%: 1444-block  0
    #####: 1445:  case '+':
    #####: 1446:    if (readNumber(true)) {
    %%%%%: 1446-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1447:      token.type_ = tokenNumber;
    %%%%%: 1447-block  0
        -: 1448:    } else {
    #####: 1449:      token.type_ = tokenPosInf;
    #####: 1450:      ok = features_.allowSpecialFloats_ && match("nfinity", 7);
    %%%%%: 1450-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1450-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1450-block  2
    %%%%%: 1450-block  3
    %%%%%: 1450-block  4
        -: 1451:    }
    #####: 1452:    break;
    %%%%%: 1452-block  0
    #####: 1453:  case 't':
    #####: 1454:    token.type_ = tokenTrue;
    #####: 1455:    ok = match("rue", 3);
    %%%%%: 1455-block  0
Aufruf  0 niemals ausgeführt
    #####: 1456:    break;
    #####: 1457:  case 'f':
    #####: 1458:    token.type_ = tokenFalse;
    #####: 1459:    ok = match("alse", 4);
    %%%%%: 1459-block  0
Aufruf  0 niemals ausgeführt
    #####: 1460:    break;
    #####: 1461:  case 'n':
    #####: 1462:    token.type_ = tokenNull;
    #####: 1463:    ok = match("ull", 3);
    %%%%%: 1463-block  0
Aufruf  0 niemals ausgeführt
    #####: 1464:    break;
    #####: 1465:  case 'N':
    #####: 1466:    if (features_.allowSpecialFloats_) {
    %%%%%: 1466-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1467:      token.type_ = tokenNaN;
    #####: 1468:      ok = match("aN", 2);
    %%%%%: 1468-block  0
Aufruf  0 niemals ausgeführt
        -: 1469:    } else {
    #####: 1470:      ok = false;
    %%%%%: 1470-block  0
        -: 1471:    }
    #####: 1472:    break;
    %%%%%: 1472-block  0
    #####: 1473:  case 'I':
    #####: 1474:    if (features_.allowSpecialFloats_) {
    %%%%%: 1474-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1475:      token.type_ = tokenPosInf;
    #####: 1476:      ok = match("nfinity", 7);
    %%%%%: 1476-block  0
Aufruf  0 niemals ausgeführt
        -: 1477:    } else {
    #####: 1478:      ok = false;
    %%%%%: 1478-block  0
        -: 1479:    }
    #####: 1480:    break;
    %%%%%: 1480-block  0
    #####: 1481:  case ',':
    #####: 1482:    token.type_ = tokenArraySeparator;
    #####: 1483:    break;
    %%%%%: 1483-block  0
    #####: 1484:  case ':':
    #####: 1485:    token.type_ = tokenMemberSeparator;
    #####: 1486:    break;
    %%%%%: 1486-block  0
    #####: 1487:  case 0:
    #####: 1488:    token.type_ = tokenEndOfStream;
    #####: 1489:    break;
    %%%%%: 1489-block  0
    #####: 1490:  default:
    #####: 1491:    ok = false;
    #####: 1492:    break;
    %%%%%: 1492-block  0
        -: 1493:  }
    #####: 1494:  if (!ok)
    %%%%%: 1494-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1495:    token.type_ = tokenError;
    %%%%%: 1495-block  0
    #####: 1496:  token.end_ = current_;
    #####: 1497:  return ok;
    %%%%%: 1497-block  0
        -: 1498:}
        -: 1499:
function _ZN4Json9OurReader10skipSpacesEv called 0 returned 0% blocks executed 0%
    #####: 1500:void OurReader::skipSpaces() {
    #####: 1501:  while (current_ != end_) {
    %%%%%: 1501-block  0
    %%%%%: 1501-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1502:    Char c = *current_;
    #####: 1503:    if (c == ' ' || c == '\t' || c == '\r' || c == '\n')
    %%%%%: 1503-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1503-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1503-block  2
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1503-block  3
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 1504:      ++current_;
    %%%%%: 1504-block  0
        -: 1505:    else
        -: 1506:      break;
        -: 1507:  }
    #####: 1508:}
        -: 1509:
function _ZN4Json9OurReader7skipBomEb called 0 returned 0% blocks executed 0%
    #####: 1510:void OurReader::skipBom(bool skipBom) {
        -: 1511:  // The default behavior is to skip BOM.
    #####: 1512:  if (skipBom) {
    %%%%%: 1512-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1513:    if ((end_ - begin_) >= 3 && strncmp(begin_, "\xEF\xBB\xBF", 3) == 0) {
    %%%%%: 1513-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1513-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1514:      begin_ += 3;
    #####: 1515:      current_ = begin_;
    %%%%%: 1515-block  0
        -: 1516:    }
        -: 1517:  }
    #####: 1518:}
        -: 1519:
function _ZN4Json9OurReader5matchEPKci called 0 returned 0% blocks executed 0%
    #####: 1520:bool OurReader::match(const Char* pattern, int patternLength) {
    #####: 1521:  if (end_ - current_ < patternLength)
    %%%%%: 1521-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1522:    return false;
    %%%%%: 1522-block  0
    #####: 1523:  int index = patternLength;
    #####: 1524:  while (index--)
    %%%%%: 1524-block  0
    %%%%%: 1524-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1525:    if (current_[index] != pattern[index])
    %%%%%: 1525-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1526:      return false;
    %%%%%: 1526-block  0
    #####: 1527:  current_ += patternLength;
    #####: 1528:  return true;
    %%%%%: 1528-block  0
        -: 1529:}
        -: 1530:
function _ZN4Json9OurReader11readCommentEv called 0 returned 0% blocks executed 0%
    #####: 1531:bool OurReader::readComment() {
    #####: 1532:  const Location commentBegin = current_ - 1;
    #####: 1533:  const Char c = getNextChar();
    %%%%%: 1533-block  0
Aufruf  0 niemals ausgeführt
    #####: 1534:  bool successful = false;
    #####: 1535:  bool cStyleWithEmbeddedNewline = false;
        -: 1536:
    #####: 1537:  const bool isCStyleComment = (c == '*');
    #####: 1538:  const bool isCppStyleComment = (c == '/');
    #####: 1539:  if (isCStyleComment) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1540:    successful = readCStyleComment(&cStyleWithEmbeddedNewline);
    %%%%%: 1540-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1540-block  1
    #####: 1541:  } else if (isCppStyleComment) {
    %%%%%: 1541-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1542:    successful = readCppStyleComment();
    %%%%%: 1542-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1542-block  1
        -: 1543:  }
        -: 1544:
    #####: 1545:  if (!successful)
    %%%%%: 1545-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1546:    return false;
    %%%%%: 1546-block  0
        -: 1547:
    #####: 1548:  if (collectComments_) {
    %%%%%: 1548-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1549:    CommentPlacement placement = commentBefore;
        -: 1550:
    #####: 1551:    if (!lastValueHasAComment_) {
    %%%%%: 1551-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1552:      if (lastValueEnd_ && !containsNewLine(lastValueEnd_, commentBegin)) {
    %%%%%: 1552-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1552-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1552-block  2
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1552-block  3
    %%%%%: 1552-block  4
    %%%%%: 1552-block  5
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####: 1553:        if (isCppStyleComment || !cStyleWithEmbeddedNewline) {
    %%%%%: 1553-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1553-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1554:          placement = commentAfterOnSameLine;
    #####: 1555:          lastValueHasAComment_ = true;
    %%%%%: 1555-block  0
        -: 1556:        }
        -: 1557:      }
        -: 1558:    }
        -: 1559:
    #####: 1560:    addComment(commentBegin, current_, placement);
    %%%%%: 1560-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 1561:  }
    #####: 1562:  return true;
    %%%%%: 1562-block  0
        -: 1563:}
        -: 1564:
function _ZN4Json9OurReader12normalizeEOLB5cxx11EPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1565:String OurReader::normalizeEOL(OurReader::Location begin,
        -: 1566:                               OurReader::Location end) {
    #####: 1567:  String normalized;
    %%%%%: 1567-block  0
Aufruf  0 niemals ausgeführt
    #####: 1568:  normalized.reserve(static_cast<size_t>(end - begin));
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1569:  OurReader::Location current = begin;
    #####: 1570:  while (current != end) {
    %%%%%: 1570-block  0
    %%%%%: 1570-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1571:    char c = *current++;
    #####: 1572:    if (c == '\r') {
    %%%%%: 1572-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1573:      if (current != end && *current == '\n')
    %%%%%: 1573-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1573-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -: 1574:        // convert dos EOL
    #####: 1575:        ++current;
    %%%%%: 1575-block  0
        -: 1576:      // convert Mac EOL
    #####: 1577:      normalized += '\n';
    %%%%%: 1577-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 1578:    } else {
    #####: 1579:      normalized += c;
    %%%%%: 1579-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 1580:    }
        -: 1581:  }
    #####: 1582:  return normalized;
    %%%%%: 1582-block  0
    %%%%%: 1582-block  1
    =====: 1583:}
    $$$$$: 1583-block  0
Aufruf  0 niemals ausgeführt
        -: 1584:
function _ZN4Json9OurReader10addCommentEPKcS2_NS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####: 1585:void OurReader::addComment(Location begin, Location end,
        -: 1586:                           CommentPlacement placement) {
    #####: 1587:  assert(collectComments_);
    %%%%%: 1587-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1587-block  1
Aufruf  2 niemals ausgeführt
    #####: 1588:  const String& normalized = normalizeEOL(begin, end);
    %%%%%: 1588-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1589:  if (placement == commentAfterOnSameLine) {
    %%%%%: 1589-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1590:    assert(lastValue_ != nullptr);
    %%%%%: 1590-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1590-block  1
Aufruf  2 niemals ausgeführt
    #####: 1591:    lastValue_->setComment(normalized, placement);
    %%%%%: 1591-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1591-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1591-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 1591-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 1591-block  4
        -: 1592:  } else {
    #####: 1593:    commentsBefore_ += normalized;
    %%%%%: 1593-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 1594:  }
    #####: 1595:}
    %%%%%: 1595-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1595-block  1
Aufruf  1 niemals ausgeführt
        -: 1596:
function _ZN4Json9OurReader17readCStyleCommentEPb called 0 returned 0% blocks executed 0%
    #####: 1597:bool OurReader::readCStyleComment(bool* containsNewLineResult) {
    #####: 1598:  *containsNewLineResult = false;
        -: 1599:
    #####: 1600:  while ((current_ + 1) < end_) {
    %%%%%: 1600-block  0
    %%%%%: 1600-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1601:    Char c = getNextChar();
    %%%%%: 1601-block  0
Aufruf  0 niemals ausgeführt
    #####: 1602:    if (c == '*' && *current_ == '/')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1602-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1603:      break;
    %%%%%: 1603-block  0
    #####: 1604:    if (c == '\n')
    %%%%%: 1604-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1605:      *containsNewLineResult = true;
    %%%%%: 1605-block  0
        -: 1606:  }
        -: 1607:
    #####: 1608:  return getNextChar() == '/';
    %%%%%: 1608-block  0
Aufruf  0 niemals ausgeführt
        -: 1609:}
        -: 1610:
function _ZN4Json9OurReader19readCppStyleCommentEv called 0 returned 0% blocks executed 0%
    #####: 1611:bool OurReader::readCppStyleComment() {
    #####: 1612:  while (current_ != end_) {
    %%%%%: 1612-block  0
    %%%%%: 1612-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1613:    Char c = getNextChar();
    %%%%%: 1613-block  0
Aufruf  0 niemals ausgeführt
    #####: 1614:    if (c == '\n')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1615:      break;
    %%%%%: 1615-block  0
    #####: 1616:    if (c == '\r') {
    %%%%%: 1616-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1617:      // Consume DOS EOL. It will be normalized in addComment.
    #####: 1618:      if (current_ != end_ && *current_ == '\n')
    %%%%%: 1618-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1618-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1619:        getNextChar();
    %%%%%: 1619-block  0
Aufruf  0 niemals ausgeführt
        -: 1620:      // Break on Moc OS 9 EOL.
    #####: 1621:      break;
    %%%%%: 1621-block  0
        -: 1622:    }
        -: 1623:  }
    #####: 1624:  return true;
    %%%%%: 1624-block  0
        -: 1625:}
        -: 1626:
function _ZN4Json9OurReader10readNumberEb called 0 returned 0% blocks executed 0%
    #####: 1627:bool OurReader::readNumber(bool checkInf) {
    #####: 1628:  Location p = current_;
    #####: 1629:  if (checkInf && p != end_ && *p == 'I') {
    %%%%%: 1629-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1629-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1629-block  2
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 1630:    current_ = ++p;
    #####: 1631:    return false;
    %%%%%: 1631-block  0
        -: 1632:  }
    #####: 1633:  char c = '0'; // stopgap for already consumed character
        -: 1634:  // integral part
    #####: 1635:  while (c >= '0' && c <= '9')
    %%%%%: 1635-block  0
    %%%%%: 1635-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1635-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1636:    c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%: 1636-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1636-block  1
    %%%%%: 1636-block  2
    %%%%%: 1636-block  3
        -: 1637:  // fractional part
    #####: 1638:  if (c == '.') {
    %%%%%: 1638-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1639:    c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%: 1639-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1639-block  1
    %%%%%: 1639-block  2
    #####: 1640:    while (c >= '0' && c <= '9')
    %%%%%: 1640-block  0
    %%%%%: 1640-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1640-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1641:      c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%: 1641-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1641-block  1
    %%%%%: 1641-block  2
    %%%%%: 1641-block  3
        -: 1642:  }
        -: 1643:  // exponential part
    #####: 1644:  if (c == 'e' || c == 'E') {
    %%%%%: 1644-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1644-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1645:    c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%: 1645-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1645-block  1
    %%%%%: 1645-block  2
    #####: 1646:    if (c == '+' || c == '-')
    %%%%%: 1646-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1646-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1647:      c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%: 1647-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1647-block  1
    %%%%%: 1647-block  2
    %%%%%: 1647-block  3
    #####: 1648:    while (c >= '0' && c <= '9')
    %%%%%: 1648-block  0
    %%%%%: 1648-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1648-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1649:      c = (current_ = p) < end_ ? *p++ : '\0';
    %%%%%: 1649-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1649-block  1
    %%%%%: 1649-block  2
    %%%%%: 1649-block  3
        -: 1650:  }
    #####: 1651:  return true;
    %%%%%: 1651-block  0
        -: 1652:}
function _ZN4Json9OurReader10readStringEv called 0 returned 0% blocks executed 0%
    #####: 1653:bool OurReader::readString() {
    #####: 1654:  Char c = 0;
    #####: 1655:  while (current_ != end_) {
    %%%%%: 1655-block  0
    %%%%%: 1655-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1656:    c = getNextChar();
    %%%%%: 1656-block  0
Aufruf  0 niemals ausgeführt
    #####: 1657:    if (c == '\\')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1658:      getNextChar();
    %%%%%: 1658-block  0
Aufruf  0 niemals ausgeführt
    #####: 1659:    else if (c == '"')
    %%%%%: 1659-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1660:      break;
    %%%%%: 1660-block  0
        -: 1661:  }
    #####: 1662:  return c == '"';
    %%%%%: 1662-block  0
        -: 1663:}
        -: 1664:
function _ZN4Json9OurReader21readStringSingleQuoteEv called 0 returned 0% blocks executed 0%
    #####: 1665:bool OurReader::readStringSingleQuote() {
    #####: 1666:  Char c = 0;
    #####: 1667:  while (current_ != end_) {
    %%%%%: 1667-block  0
    %%%%%: 1667-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1668:    c = getNextChar();
    %%%%%: 1668-block  0
Aufruf  0 niemals ausgeführt
    #####: 1669:    if (c == '\\')
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1670:      getNextChar();
    %%%%%: 1670-block  0
Aufruf  0 niemals ausgeführt
    #####: 1671:    else if (c == '\'')
    %%%%%: 1671-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1672:      break;
    %%%%%: 1672-block  0
        -: 1673:  }
    #####: 1674:  return c == '\'';
    %%%%%: 1674-block  0
        -: 1675:}
        -: 1676:
function _ZN4Json9OurReader10readObjectERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1677:bool OurReader::readObject(Token& token) {
        -: 1678:  Token tokenName;
    #####: 1679:  String name;
    %%%%%: 1679-block  0
Aufruf  0 niemals ausgeführt
    #####: 1680:  Value init(objectValue);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1681:  currentValue().swapPayload(init);
    %%%%%: 1681-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1681-block  1
Aufruf  3 niemals ausgeführt
    #####: 1682:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1682-block  0
Aufruf  3 niemals ausgeführt
    #####: 1683:  while (readToken(tokenName)) {
    %%%%%: 1683-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1683-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1684:    bool initialTokenOk = true;
    #####: 1685:    while (tokenName.type_ == tokenComment && initialTokenOk)
    %%%%%: 1685-block  0
    %%%%%: 1685-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1685-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1686:      initialTokenOk = readToken(tokenName);
    %%%%%: 1686-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1686-block  1
    #####: 1687:    if (!initialTokenOk)
    %%%%%: 1687-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1688:      break;
    %%%%%: 1688-block  0
    %%%%%: 1688-block  1
    #####: 1689:    if (tokenName.type_ == tokenObjectEnd &&
    %%%%%: 1689-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1689-block  1
    %%%%%: 1689-block  2
    %%%%%: 1689-block  3
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 1690:        (name.empty() ||
    %%%%%: 1690-block  0
Aufruf  0 niemals ausgeführt
    #####: 1691:         features_.allowTrailingCommas_)) // empty object or trailing comma
    %%%%%: 1691-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1692:      return true;
    %%%%%: 1692-block  0
    %%%%%: 1692-block  1
    #####: 1693:    name.clear();
    %%%%%: 1693-block  0
Aufruf  0 niemals ausgeführt
    #####: 1694:    if (tokenName.type_ == tokenString) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1695:      if (!decodeString(tokenName, name))
    %%%%%: 1695-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1695-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1696:        return recoverFromError(tokenObjectEnd);
    %%%%%: 1696-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1696-block  1
    #####: 1697:    } else if (tokenName.type_ == tokenNumber && features_.allowNumericKeys_) {
    %%%%%: 1697-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1697-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1698:      Value numberName;
    %%%%%: 1698-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1699:      if (!decodeNumber(tokenName, numberName))
    %%%%%: 1699-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1699-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1700:        return recoverFromError(tokenObjectEnd);
    %%%%%: 1700-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1700-block  1
    #####: 1701:      name = numberName.asString();
    %%%%%: 1701-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1701-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 1701-block  2
    #####: 1702:    } else {
    %%%%%: 1702-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 1702-block  1
Aufruf  3 niemals ausgeführt
        -: 1703:      break;
        -: 1704:    }
    #####: 1705:    if (name.length() >= (1U << 30))
    %%%%%: 1705-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1706:      throwRuntimeError("keylength >= 2^30");
    %%%%%: 1706-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1706-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 1706-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 1706-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 1706-block  4
    $$$$$: 1706-block  5
    #####: 1707:    if (features_.rejectDupKeys_ && currentValue().isMember(name)) {
    %%%%%: 1707-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1707-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1707-block  2
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 1707-block  3
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%: 1707-block  4
    %%%%%: 1707-block  5
    %%%%%: 1707-block  6
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    #####: 1708:      String msg = "Duplicate key: '" + name + "'";
    %%%%%: 1708-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1708-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1708-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 1708-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 1708-block  4
    #####: 1709:      return addErrorAndRecover(msg, tokenName, tokenObjectEnd);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1709-block  0
    #####: 1710:    }
    %%%%%: 1710-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1710-block  1
Aufruf  1 niemals ausgeführt
        -: 1711:
        -: 1712:    Token colon;
    #####: 1713:    if (!readToken(colon) || colon.type_ != tokenMemberSeparator) {
    %%%%%: 1713-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1713-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1713-block  2
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1713-block  3
    %%%%%: 1713-block  4
    %%%%%: 1713-block  5
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####: 1714:      return addErrorAndRecover("Missing ':' after object member name", colon,
    %%%%%: 1714-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1714-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1714-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1714-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1714-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1714-block  5
    $$$$$: 1714-block  6
    #####: 1715:                                tokenObjectEnd);
    %%%%%: 1715-block  0
        -: 1716:    }
    #####: 1717:    Value& value = currentValue()[name];
    %%%%%: 1717-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1717-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 1718:    nodes_.push(&value);
    %%%%%: 1718-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 1718-block  1
    #####: 1719:    bool ok = readValue();
    %%%%%: 1719-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1720:    nodes_.pop();
    %%%%%: 1720-block  0
Aufruf  0 niemals ausgeführt
    #####: 1721:    if (!ok) // error already set
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1722:      return recoverFromError(tokenObjectEnd);
    %%%%%: 1722-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1722-block  1
        -: 1723:
        -: 1724:    Token comma;
    #####: 1725:    if (!readToken(comma) ||
    %%%%%: 1725-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1725-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 1725-block  2
    %%%%%: 1725-block  3
    %%%%%: 1725-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 1726:        (comma.type_ != tokenObjectEnd && comma.type_ != tokenArraySeparator &&
    %%%%%: 1726-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1726-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1727:         comma.type_ != tokenComment)) {
    %%%%%: 1727-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1728:      return addErrorAndRecover("Missing ',' or '}' in object declaration",
    %%%%%: 1728-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1728-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1728-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1728-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1728-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1728-block  5
    $$$$$: 1728-block  6
    #####: 1729:                                comma, tokenObjectEnd);
    %%%%%: 1729-block  0
        -: 1730:    }
    #####: 1731:    bool finalizeTokenOk = true;
    #####: 1732:    while (comma.type_ == tokenComment && finalizeTokenOk)
    %%%%%: 1732-block  0
    %%%%%: 1732-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1732-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1733:      finalizeTokenOk = readToken(comma);
    %%%%%: 1733-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1733-block  1
    #####: 1734:    if (comma.type_ == tokenObjectEnd)
    %%%%%: 1734-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1735:      return true;
    %%%%%: 1735-block  0
        -: 1736:  }
    #####: 1737:  return addErrorAndRecover("Missing '}' or object member name", tokenName,
    %%%%%: 1737-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1737-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1737-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1737-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1737-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1737-block  5
    $$$$$: 1737-block  6
    #####: 1738:                            tokenObjectEnd);
    %%%%%: 1738-block  0
    #####: 1739:}
    %%%%%: 1739-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$: 1739-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 1739-block  2
Aufruf  3 niemals ausgeführt
        -: 1740:
function _ZN4Json9OurReader9readArrayERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1741:bool OurReader::readArray(Token& token) {
    #####: 1742:  Value init(arrayValue);
    %%%%%: 1742-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1743:  currentValue().swapPayload(init);
    %%%%%: 1743-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1743-block  1
Aufruf  3 niemals ausgeführt
    #####: 1744:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1744-block  0
Aufruf  3 niemals ausgeführt
    #####: 1745:  int index = 0;
        -: 1746:  for (;;) {
    #####: 1747:    skipSpaces();
    %%%%%: 1747-block  0
Aufruf  0 niemals ausgeführt
    #####: 1748:    if (current_ != end_ && *current_ == ']' &&
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1748-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1748-block  1
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 1749:        (index == 0 ||
    #####: 1750:         (features_.allowTrailingCommas_ &&
    %%%%%: 1750-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1751:          !features_.allowDroppedNullPlaceholders_))) // empty array or trailing
    %%%%%: 1751-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1752:                                                      // comma
        -: 1753:    {
        -: 1754:      Token endArray;
    #####: 1755:      readToken(endArray);
    %%%%%: 1755-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1756:      return true;
    %%%%%: 1756-block  0
        -: 1757:    }
    #####: 1758:    Value& value = currentValue()[index++];
    %%%%%: 1758-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1758-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 1759:    nodes_.push(&value);
    %%%%%: 1759-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 1759-block  1
    #####: 1760:    bool ok = readValue();
    %%%%%: 1760-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1761:    nodes_.pop();
    %%%%%: 1761-block  0
Aufruf  0 niemals ausgeführt
    #####: 1762:    if (!ok) // error already set
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1763:      return recoverFromError(tokenArrayEnd);
    %%%%%: 1763-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1763-block  1
        -: 1764:
        -: 1765:    Token currentToken;
        -: 1766:    // Accept Comment after last item in the array.
    #####: 1767:    ok = readToken(currentToken);
    %%%%%: 1767-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1768:    while (currentToken.type_ == tokenComment && ok) {
    %%%%%: 1768-block  0
    %%%%%: 1768-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1768-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1769:      ok = readToken(currentToken);
    %%%%%: 1769-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1769-block  1
        -: 1770:    }
    #####: 1771:    bool badTokenType = (currentToken.type_ != tokenArraySeparator &&
    %%%%%: 1771-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1771-block  1
    %%%%%: 1771-block  2
    #####: 1772:                         currentToken.type_ != tokenArrayEnd);
    %%%%%: 1772-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1773:    if (!ok || badTokenType) {
    %%%%%: 1773-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1773-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1774:      return addErrorAndRecover("Missing ',' or ']' in array declaration",
    %%%%%: 1774-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1774-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1774-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1774-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1774-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1774-block  5
    $$$$$: 1774-block  6
    #####: 1775:                                currentToken, tokenArrayEnd);
    %%%%%: 1775-block  0
        -: 1776:    }
    #####: 1777:    if (currentToken.type_ == tokenArrayEnd)
    %%%%%: 1777-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1778:      break;
    #####: 1779:  }
    %%%%%: 1779-block  0
    #####: 1780:  return true;
    %%%%%: 1780-block  0
    #####: 1781:}
    %%%%%: 1781-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1781-block  1
Aufruf  1 niemals ausgeführt
        -: 1782:
function _ZN4Json9OurReader12decodeNumberERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1783:bool OurReader::decodeNumber(Token& token) {
    #####: 1784:  Value decoded;
    %%%%%: 1784-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1785:  if (!decodeNumber(token, decoded))
    %%%%%: 1785-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1785-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1786:    return false;
    %%%%%: 1786-block  0
    #####: 1787:  currentValue().swapPayload(decoded);
    %%%%%: 1787-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1787-block  1
Aufruf  3 niemals ausgeführt
    #####: 1788:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1788-block  0
Aufruf  3 niemals ausgeführt
    #####: 1789:  currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1789-block  0
Aufruf  3 niemals ausgeführt
    #####: 1790:  return true;
    #####: 1791:}
    %%%%%: 1791-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1791-block  1
Aufruf  1 niemals ausgeführt
        -: 1792:
function _ZN4Json9OurReader12decodeNumberERNS0_5TokenERNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 1793:bool OurReader::decodeNumber(Token& token, Value& decoded) {
        -: 1794:  // Attempts to parse the number as an integer. If the number is
        -: 1795:  // larger than the maximum supported value of an integer then
        -: 1796:  // we decode the number as a double.
    #####: 1797:  Location current = token.start_;
    #####: 1798:  const bool isNegative = *current == '-';
    #####: 1799:  if (isNegative) {
    %%%%%: 1799-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1800:    ++current;
    %%%%%: 1800-block  0
        -: 1801:  }
        -: 1802:
        -: 1803:  // We assume we can represent the largest and smallest integer types as
        -: 1804:  // unsigned integers with separate sign. This is only true if they can fit
        -: 1805:  // into an unsigned integer.
        -: 1806:  static_assert(Value::maxLargestInt <= Value::maxLargestUInt,
        -: 1807:                "Int must be smaller than UInt");
        -: 1808:
        -: 1809:  // We need to convert minLargestInt into a positive number. The easiest way
        -: 1810:  // to do this conversion is to assume our "threshold" value of minLargestInt
        -: 1811:  // divided by 10 can fit in maxLargestInt when absolute valued. This should
        -: 1812:  // be a safe assumption.
        -: 1813:  static_assert(Value::minLargestInt <= -Value::maxLargestInt,
        -: 1814:                "The absolute value of minLargestInt must be greater than or "
        -: 1815:                "equal to maxLargestInt");
        -: 1816:  static_assert(Value::minLargestInt / 10 >= -Value::maxLargestInt,
        -: 1817:                "The absolute value of minLargestInt must be only 1 magnitude "
        -: 1818:                "larger than maxLargest Int");
        -: 1819:
        -: 1820:  static constexpr Value::LargestUInt positive_threshold =
        -: 1821:      Value::maxLargestUInt / 10;
        -: 1822:  static constexpr Value::UInt positive_last_digit = Value::maxLargestUInt % 10;
        -: 1823:
        -: 1824:  // For the negative values, we have to be more careful. Since typically
        -: 1825:  // -Value::minLargestInt will cause an overflow, we first divide by 10 and
        -: 1826:  // then take the inverse. This assumes that minLargestInt is only a single
        -: 1827:  // power of 10 different in magnitude, which we check above. For the last
        -: 1828:  // digit, we take the modulus before negating for the same reason.
        -: 1829:  static constexpr auto negative_threshold =
        -: 1830:      Value::LargestUInt(-(Value::minLargestInt / 10));
        -: 1831:  static constexpr auto negative_last_digit =
        -: 1832:      Value::UInt(-(Value::minLargestInt % 10));
        -: 1833:
    #####: 1834:  const Value::LargestUInt threshold =
    #####: 1835:      isNegative ? negative_threshold : positive_threshold;
    %%%%%: 1835-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1835-block  1
    %%%%%: 1835-block  2
    #####: 1836:  const Value::UInt max_last_digit =
    #####: 1837:      isNegative ? negative_last_digit : positive_last_digit;
    %%%%%: 1837-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1837-block  1
    %%%%%: 1837-block  2
        -: 1838:
    #####: 1839:  Value::LargestUInt value = 0;
    #####: 1840:  while (current < token.end_) {
    %%%%%: 1840-block  0
    %%%%%: 1840-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1841:    Char c = *current++;
    #####: 1842:    if (c < '0' || c > '9')
    %%%%%: 1842-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1842-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1843:      return decodeDouble(token, decoded);
    %%%%%: 1843-block  0
Aufruf  0 niemals ausgeführt
        -: 1844:
    #####: 1845:    const auto digit(static_cast<Value::UInt>(c - '0'));
    #####: 1846:    if (value >= threshold) {
    %%%%%: 1846-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1847:      // We've hit or exceeded the max value divided by 10 (rounded down). If
        -: 1848:      // a) we've only just touched the limit, meaing value == threshold,
        -: 1849:      // b) this is the last digit, or
        -: 1850:      // c) it's small enough to fit in that rounding delta, we're okay.
        -: 1851:      // Otherwise treat this number as a double to avoid overflow.
    #####: 1852:      if (value > threshold || current != token.end_ ||
    %%%%%: 1852-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1852-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1852-block  2
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -: 1853:          digit > max_last_digit) {
    #####: 1854:        return decodeDouble(token, decoded);
    %%%%%: 1854-block  0
Aufruf  0 niemals ausgeführt
        -: 1855:      }
        -: 1856:    }
    #####: 1857:    value = value * 10 + digit;
    %%%%%: 1857-block  0
        -: 1858:  }
        -: 1859:
    #####: 1860:  if (isNegative) {
    %%%%%: 1860-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 1861:    // We use the same magnitude assumption here, just in case.
    #####: 1862:    const auto last_digit = static_cast<Value::UInt>(value % 10);
    #####: 1863:    decoded = -Value::LargestInt(value / 10) * 10 - last_digit;
    %%%%%: 1863-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1863-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 1863-block  2
Aufruf  5 niemals ausgeführt
    #####: 1864:  } else if (value <= Value::LargestUInt(Value::maxLargestInt)) {
    %%%%%: 1864-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1865:    decoded = Value::LargestInt(value);
    %%%%%: 1865-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1865-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 1865-block  2
Aufruf  5 niemals ausgeführt
        -: 1866:  } else {
    #####: 1867:    decoded = value;
    %%%%%: 1867-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1867-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
        -: 1868:  }
        -: 1869:
    #####: 1870:  return true;
    %%%%%: 1870-block  0
        -: 1871:}
        -: 1872:
function _ZN4Json9OurReader12decodeDoubleERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1873:bool OurReader::decodeDouble(Token& token) {
    #####: 1874:  Value decoded;
    %%%%%: 1874-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1875:  if (!decodeDouble(token, decoded))
    %%%%%: 1875-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1875-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1876:    return false;
    %%%%%: 1876-block  0
    #####: 1877:  currentValue().swapPayload(decoded);
    %%%%%: 1877-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1877-block  1
Aufruf  3 niemals ausgeführt
    #####: 1878:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1878-block  0
Aufruf  3 niemals ausgeführt
    #####: 1879:  currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1879-block  0
Aufruf  3 niemals ausgeführt
    #####: 1880:  return true;
    #####: 1881:}
    %%%%%: 1881-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 1881-block  1
Aufruf  1 niemals ausgeführt
        -: 1882:
function _ZN4Json9OurReader12decodeDoubleERNS0_5TokenERNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 1883:bool OurReader::decodeDouble(Token& token, Value& decoded) {
    #####: 1884:  double value = 0;
    #####: 1885:  const String buffer(token.start_, token.end_);
    %%%%%: 1885-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1885-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 1885-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 1885-block  3
    #####: 1886:  IStringStream is(buffer);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1887:  if (!(is >> value)) {
    %%%%%: 1887-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1887-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1887-block  2
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 1888:    return addError(
    %%%%%: 1888-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1889:        "'" + String(token.start_, token.end_) + "' is not a number.", token);
    %%%%%: 1889-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1889-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1889-block  2
Aufruf  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%: 1889-block  3
    %%%%%: 1889-block  4
Aufruf 10 niemals ausgeführt
Aufruf 11 niemals ausgeführt
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
    $$$$$: 1889-block  5
Aufruf 14 niemals ausgeführt
    $$$$$: 1889-block  6
Aufruf 15 niemals ausgeführt
    $$$$$: 1889-block  7
Aufruf 16 niemals ausgeführt
    $$$$$: 1889-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 1889-block  9
    $$$$$: 1889-block 10
    $$$$$: 1889-block 11
    $$$$$: 1889-block 12
        -: 1890:  }
    #####: 1891:  decoded = value;
    %%%%%: 1891-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1891-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 1891-block  2
    #####: 1892:  return true;
    #####: 1893:}
    %%%%%: 1893-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$: 1893-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 1893-block  2
Aufruf  3 niemals ausgeführt
        -: 1894:
function _ZN4Json9OurReader12decodeStringERNS0_5TokenE called 0 returned 0% blocks executed 0%
    #####: 1895:bool OurReader::decodeString(Token& token) {
    #####: 1896:  String decoded_string;
    %%%%%: 1896-block  0
Aufruf  0 niemals ausgeführt
    #####: 1897:  if (!decodeString(token, decoded_string))
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1897-block  0
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1898:    return false;
    %%%%%: 1898-block  0
    #####: 1899:  Value decoded(decoded_string);
    %%%%%: 1899-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1900:  currentValue().swapPayload(decoded);
    %%%%%: 1900-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1900-block  1
Aufruf  3 niemals ausgeführt
    #####: 1901:  currentValue().setOffsetStart(token.start_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1901-block  0
Aufruf  3 niemals ausgeführt
    #####: 1902:  currentValue().setOffsetLimit(token.end_ - begin_);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1902-block  0
Aufruf  3 niemals ausgeführt
    #####: 1903:  return true;
    #####: 1904:}
Aufruf  0 niemals ausgeführt
    %%%%%: 1904-block  0
Aufruf  1 niemals ausgeführt
    $$$$$: 1904-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 1904-block  2
Aufruf  3 niemals ausgeführt
        -: 1905:
function _ZN4Json9OurReader12decodeStringERNS0_5TokenERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1906:bool OurReader::decodeString(Token& token, String& decoded) {
    #####: 1907:  decoded.reserve(static_cast<size_t>(token.end_ - token.start_ - 2));
    %%%%%: 1907-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1908:  Location current = token.start_ + 1; // skip '"'
    #####: 1909:  Location end = token.end_ - 1;       // do not include '"'
    #####: 1910:  while (current != end) {
    %%%%%: 1910-block  0
    %%%%%: 1910-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1911:    Char c = *current++;
    #####: 1912:    if (c == '"')
    %%%%%: 1912-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1913:      break;
    %%%%%: 1913-block  0
    #####: 1914:    if (c == '\\') {
    %%%%%: 1914-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1915:      if (current == end)
    %%%%%: 1915-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1916:        return addError("Empty escape sequence in string", token, current);
    %%%%%: 1916-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1916-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1916-block  2
    %%%%%: 1916-block  3
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1916-block  4
Aufruf  9 niemals ausgeführt
    $$$$$: 1916-block  5
Aufruf 10 niemals ausgeführt
    $$$$$: 1916-block  6
    $$$$$: 1916-block  7
    #####: 1917:      Char escape = *current++;
    #####: 1918:      switch (escape) {
    %%%%%: 1918-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####: 1919:      case '"':
    #####: 1920:        decoded += '"';
    %%%%%: 1920-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1921:        break;
    %%%%%: 1921-block  0
    #####: 1922:      case '/':
    #####: 1923:        decoded += '/';
    %%%%%: 1923-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1924:        break;
    %%%%%: 1924-block  0
    #####: 1925:      case '\\':
    #####: 1926:        decoded += '\\';
    %%%%%: 1926-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1927:        break;
    %%%%%: 1927-block  0
    #####: 1928:      case 'b':
    #####: 1929:        decoded += '\b';
    %%%%%: 1929-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1930:        break;
    %%%%%: 1930-block  0
    #####: 1931:      case 'f':
    #####: 1932:        decoded += '\f';
    %%%%%: 1932-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1933:        break;
    %%%%%: 1933-block  0
    #####: 1934:      case 'n':
    #####: 1935:        decoded += '\n';
    %%%%%: 1935-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1936:        break;
    %%%%%: 1936-block  0
    #####: 1937:      case 'r':
    #####: 1938:        decoded += '\r';
    %%%%%: 1938-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1939:        break;
    %%%%%: 1939-block  0
    #####: 1940:      case 't':
    #####: 1941:        decoded += '\t';
    %%%%%: 1941-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1942:        break;
    %%%%%: 1942-block  0
    #####: 1943:      case 'u': {
        -: 1944:        unsigned int unicode;
    #####: 1945:        if (!decodeUnicodeCodePoint(token, current, end, unicode))
    %%%%%: 1945-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1945-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1946:          return false;
    %%%%%: 1946-block  0
    #####: 1947:        decoded += codePointToUTF8(unicode);
    %%%%%: 1947-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1947-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 1947-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 1947-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 1947-block  4
    #####: 1948:      } break;
    #####: 1949:      default:
    #####: 1950:        return addError("Bad escape sequence in string", token, current);
    %%%%%: 1950-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1950-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1950-block  2
    %%%%%: 1950-block  3
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1950-block  4
Aufruf  9 niemals ausgeführt
    $$$$$: 1950-block  5
Aufruf 10 niemals ausgeführt
    $$$$$: 1950-block  6
    $$$$$: 1950-block  7
        -: 1951:      }
        -: 1952:    } else {
    #####: 1953:      decoded += c;
    %%%%%: 1953-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 1954:    }
        -: 1955:  }
    #####: 1956:  return true;
    %%%%%: 1956-block  0
        -: 1957:}
        -: 1958:
function _ZN4Json9OurReader22decodeUnicodeCodePointERNS0_5TokenERPKcS4_Rj called 0 returned 0% blocks executed 0%
    #####: 1959:bool OurReader::decodeUnicodeCodePoint(Token& token, Location& current,
        -: 1960:                                       Location end, unsigned int& unicode) {
        -: 1961:
    #####: 1962:  if (!decodeUnicodeEscapeSequence(token, current, end, unicode))
    %%%%%: 1962-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 1963:    return false;
    %%%%%: 1963-block  0
    #####: 1964:  if (unicode >= 0xD800 && unicode <= 0xDBFF) {
    %%%%%: 1964-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1964-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -: 1965:    // surrogate pairs
    #####: 1966:    if (end - current < 6)
    %%%%%: 1966-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1967:      return addError(
    %%%%%: 1967-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1967-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1967-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1967-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1967-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1967-block  5
    $$$$$: 1967-block  6
Aufruf 11 niemals ausgeführt
        -: 1968:          "additional six characters expected to parse unicode surrogate pair.",
    #####: 1969:          token, current);
    %%%%%: 1969-block  0
    #####: 1970:    if (*(current++) == '\\' && *(current++) == 'u') {
    %%%%%: 1970-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1970-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1970-block  2
    %%%%%: 1970-block  3
    %%%%%: 1970-block  4
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -: 1971:      unsigned int surrogatePair;
    #####: 1972:      if (decodeUnicodeEscapeSequence(token, current, end, surrogatePair)) {
    %%%%%: 1972-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 1972-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 1973:        unicode = 0x10000 + ((unicode & 0x3FF) << 10) + (surrogatePair & 0x3FF);
    %%%%%: 1973-block  0
        -: 1974:      } else
    #####: 1975:        return false;
    %%%%%: 1975-block  0
        -: 1976:    } else
    #####: 1977:      return addError("expecting another \\u token to begin the second half of "
    %%%%%: 1977-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1977-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1977-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1977-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1977-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1977-block  5
        -: 1978:                      "a unicode surrogate pair",
    #####: 1979:                      token, current);
    %%%%%: 1979-block  0
        -: 1980:  }
    #####: 1981:  return true;
    %%%%%: 1981-block  0
        -: 1982:}
        -: 1983:
function _ZN4Json9OurReader27decodeUnicodeEscapeSequenceERNS0_5TokenERPKcS4_Rj called 0 returned 0% blocks executed 0%
    #####: 1984:bool OurReader::decodeUnicodeEscapeSequence(Token& token, Location& current,
        -: 1985:                                            Location end,
        -: 1986:                                            unsigned int& ret_unicode) {
    #####: 1987:  if (end - current < 4)
    %%%%%: 1987-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1988:    return addError(
    %%%%%: 1988-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 1988-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 1988-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 1988-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 1988-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 1988-block  5
    $$$$$: 1988-block  6
Aufruf 11 niemals ausgeführt
        -: 1989:        "Bad unicode escape sequence in string: four digits expected.", token,
    #####: 1990:        current);
    %%%%%: 1990-block  0
    #####: 1991:  int unicode = 0;
    #####: 1992:  for (int index = 0; index < 4; ++index) {
    %%%%%: 1992-block  0
    %%%%%: 1992-block  1
    %%%%%: 1992-block  2
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 1993:    Char c = *current++;
    #####: 1994:    unicode *= 16;
    #####: 1995:    if (c >= '0' && c <= '9')
    %%%%%: 1995-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1995-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1996:      unicode += c - '0';
    %%%%%: 1996-block  0
    #####: 1997:    else if (c >= 'a' && c <= 'f')
    %%%%%: 1997-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1997-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 1998:      unicode += c - 'a' + 10;
    %%%%%: 1998-block  0
    #####: 1999:    else if (c >= 'A' && c <= 'F')
    %%%%%: 1999-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 1999-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2000:      unicode += c - 'A' + 10;
    %%%%%: 2000-block  0
        -: 2001:    else
    #####: 2002:      return addError(
    %%%%%: 2002-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2002-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 2002-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 2002-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 2002-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 2002-block  5
        -: 2003:          "Bad unicode escape sequence in string: hexadecimal digit expected.",
    #####: 2004:          token, current);
    %%%%%: 2004-block  0
        -: 2005:  }
    #####: 2006:  ret_unicode = static_cast<unsigned int>(unicode);
    #####: 2007:  return true;
    %%%%%: 2007-block  0
        -: 2008:}
        -: 2009:
function _ZN4Json9OurReader8addErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS0_5TokenEPKc called 0 returned 0% blocks executed 0%
    #####: 2010:bool OurReader::addError(const String& message, Token& token, Location extra) {
    #####: 2011:  ErrorInfo info;
    %%%%%: 2011-block  0
Aufruf  0 niemals ausgeführt
    #####: 2012:  info.token_ = token;
    #####: 2013:  info.message_ = message;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2014:  info.extra_ = extra;
    #####: 2015:  errors_.push_back(info);
    %%%%%: 2015-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2016:  return false;
    %%%%%: 2016-block  0
    #####: 2017:}
    %%%%%: 2017-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 2017-block  1
Aufruf  1 niemals ausgeführt
        -: 2018:
function _ZN4Json9OurReader16recoverFromErrorENS0_9TokenTypeE called 0 returned 0% blocks executed 0%
    #####: 2019:bool OurReader::recoverFromError(TokenType skipUntilToken) {
    #####: 2020:  size_t errorCount = errors_.size();
    %%%%%: 2020-block  0
Aufruf  0 niemals ausgeführt
        -: 2021:  Token skip;
        -: 2022:  for (;;) {
    #####: 2023:    if (!readToken(skip))
    %%%%%: 2023-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2023-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 2024:      errors_.resize(errorCount); // discard errors caused by recovery
    %%%%%: 2024-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2025:    if (skip.type_ == skipUntilToken || skip.type_ == tokenEndOfStream)
    %%%%%: 2025-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2025-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -: 2026:      break;
        -: 2027:  }
    #####: 2028:  errors_.resize(errorCount);
    %%%%%: 2028-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2029:  return false;
    %%%%%: 2029-block  0
    %%%%%: 2029-block  1
        -: 2030:}
        -: 2031:
function _ZN4Json9OurReader18addErrorAndRecoverERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS0_5TokenENS0_9TokenTypeE called 0 returned 0% blocks executed 0%
    #####: 2032:bool OurReader::addErrorAndRecover(const String& message, Token& token,
        -: 2033:                                   TokenType skipUntilToken) {
    #####: 2034:  addError(message, token);
    %%%%%: 2034-block  0
Aufruf  0 niemals ausgeführt
    #####: 2035:  return recoverFromError(skipUntilToken);
Aufruf  0 niemals ausgeführt
        -: 2036:}
        -: 2037:
function _ZN4Json9OurReader12currentValueEv called 0 returned 0% blocks executed 0%
    #####: 2038:Value& OurReader::currentValue() { return *(nodes_.top()); }
    %%%%%: 2038-block  0
Aufruf  0 niemals ausgeführt
        -: 2039:
function _ZN4Json9OurReader11getNextCharEv called 0 returned 0% blocks executed 0%
    #####: 2040:OurReader::Char OurReader::getNextChar() {
    #####: 2041:  if (current_ == end_)
    %%%%%: 2041-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2042:    return 0;
    %%%%%: 2042-block  0
    #####: 2043:  return *current_++;
    %%%%%: 2043-block  0
        -: 2044:}
        -: 2045:
function _ZNK4Json9OurReader24getLocationLineAndColumnEPKcRiS3_ called 0 returned 0% blocks executed 0%
    #####: 2046:void OurReader::getLocationLineAndColumn(Location location, int& line,
        -: 2047:                                         int& column) const {
    #####: 2048:  Location current = begin_;
    #####: 2049:  Location lastLineStart = current;
    #####: 2050:  line = 0;
    #####: 2051:  while (current < location && current != end_) {
    %%%%%: 2051-block  0
    %%%%%: 2051-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2051-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2052:    Char c = *current++;
    #####: 2053:    if (c == '\r') {
    %%%%%: 2053-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2054:      if (*current == '\n')
    %%%%%: 2054-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2055:        ++current;
    %%%%%: 2055-block  0
    #####: 2056:      lastLineStart = current;
    #####: 2057:      ++line;
    %%%%%: 2057-block  0
    #####: 2058:    } else if (c == '\n') {
    %%%%%: 2058-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2059:      lastLineStart = current;
    #####: 2060:      ++line;
    %%%%%: 2060-block  0
        -: 2061:    }
        -: 2062:  }
        -: 2063:  // column & line start at 1
    #####: 2064:  column = int(location - lastLineStart) + 1;
    #####: 2065:  ++line;
    #####: 2066:}
        -: 2067:
function _ZNK4Json9OurReader24getLocationLineAndColumnB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 2068:String OurReader::getLocationLineAndColumn(Location location) const {
        -: 2069:  int line, column;
    #####: 2070:  getLocationLineAndColumn(location, line, column);
    %%%%%: 2070-block  0
Aufruf  0 niemals ausgeführt
        -: 2071:  char buffer[18 + 16 + 16 + 1];
    #####: 2072:  jsoncpp_snprintf(buffer, sizeof(buffer), "Line %d, Column %d", line, column);
    #####: 2073:  return buffer;
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2073-block  0
Aufruf  4 niemals ausgeführt
    %%%%%: 2073-block  1
    $$$$$: 2073-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 2073-block  3
        -: 2074:}
        -: 2075:
function _ZNK4Json9OurReader25getFormattedErrorMessagesB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 2076:String OurReader::getFormattedErrorMessages() const {
    #####: 2077:  String formattedMessage;
    %%%%%: 2077-block  0
Aufruf  0 niemals ausgeführt
    #####: 2078:  for (const auto& error : errors_) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 2078-block  0
Aufruf  2 niemals ausgeführt
    %%%%%: 2078-block  1
Aufruf  3 niemals ausgeführt
    %%%%%: 2078-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
        -: 2079:    formattedMessage +=
    #####: 2080:        "* " + getLocationLineAndColumn(error.token_.start_) + "\n";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2080-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2080-block  1
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 2080-block  2
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 2080-block  3
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
Aufruf 14 niemals ausgeführt
    $$$$$: 2080-block  4
Aufruf 15 niemals ausgeführt
    $$$$$: 2080-block  5
Aufruf 16 niemals ausgeführt
    $$$$$: 2080-block  6
Aufruf 17 niemals ausgeführt
    $$$$$: 2080-block  7
    $$$$$: 2080-block  8
    $$$$$: 2080-block  9
    #####: 2081:    formattedMessage += "  " + error.message_ + "\n";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2081-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2081-block  1
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 2081-block  2
Aufruf  9 niemals ausgeführt
Aufruf 10 niemals ausgeführt
    $$$$$: 2081-block  3
Aufruf 11 niemals ausgeführt
    $$$$$: 2081-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 2081-block  5
    $$$$$: 2081-block  6
    #####: 2082:    if (error.extra_)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 2083:      formattedMessage +=
    #####: 2084:          "See " + getLocationLineAndColumn(error.extra_) + " for detail.\n";
    %%%%%: 2084-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2084-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2084-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 2084-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 2084-block  4
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
Aufruf 14 niemals ausgeführt
    $$$$$: 2084-block  5
Aufruf 15 niemals ausgeführt
    $$$$$: 2084-block  6
Aufruf 16 niemals ausgeführt
    $$$$$: 2084-block  7
Aufruf 17 niemals ausgeführt
    $$$$$: 2084-block  8
    $$$$$: 2084-block  9
    $$$$$: 2084-block 10
        -: 2085:  }
    #####: 2086:  return formattedMessage;
    %%%%%: 2086-block  0
    %%%%%: 2086-block  1
    =====: 2087:}
    $$$$$: 2087-block  0
Aufruf  0 niemals ausgeführt
        -: 2088:
function _ZNK4Json9OurReader19getStructuredErrorsEv called 0 returned 0% blocks executed 0%
    #####: 2089:std::vector<OurReader::StructuredError> OurReader::getStructuredErrors() const {
    #####: 2090:  std::vector<OurReader::StructuredError> allErrors;
    %%%%%: 2090-block  0
Aufruf  0 niemals ausgeführt
    #####: 2091:  for (const auto& error : errors_) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 2091-block  0
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
    %%%%%: 2091-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 2092:    OurReader::StructuredError structured;
Aufruf  0 niemals ausgeführt
    #####: 2093:    structured.offset_start = error.token_.start_ - begin_;
    #####: 2094:    structured.offset_limit = error.token_.end_ - begin_;
    #####: 2095:    structured.message = error.message_;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2096:    allErrors.push_back(structured);
    %%%%%: 2096-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2097:  }
    %%%%%: 2097-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 2097-block  1
Aufruf  1 niemals ausgeführt
    #####: 2098:  return allErrors;
    %%%%%: 2098-block  0
    %%%%%: 2098-block  1
    =====: 2099:}
    $$$$$: 2099-block  0
Aufruf  0 niemals ausgeführt
        -: 2100:
        -: 2101:class OurCharReader : public CharReader {
        -: 2102:  bool const collectComments_;
        -: 2103:  OurReader reader_;
        -: 2104:
        -: 2105:public:
function _ZN4Json13OurCharReaderC2EbRKNS_11OurFeaturesE called 0 returned 0% blocks executed 0%
    #####: 2106:  OurCharReader(bool collectComments, OurFeatures const& features)
    #####: 2107:      : collectComments_(collectComments), reader_(features) {}
    %%%%%: 2107-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2107-block  1
    $$$$$: 2107-block  2
Aufruf  4 niemals ausgeführt
function _ZN4Json13OurCharReader5parseEPKcS2_PNS_5ValueEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2108:  bool parse(char const* beginDoc, char const* endDoc, Value* root,
        -: 2109:             String* errs) override {
    #####: 2110:    bool ok = reader_.parse(beginDoc, endDoc, *root, collectComments_);
    %%%%%: 2110-block  0
Aufruf  0 niemals ausgeführt
    #####: 2111:    if (errs) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2112:      *errs = reader_.getFormattedErrorMessages();
    %%%%%: 2112-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2112-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
        -: 2113:    }
    #####: 2114:    return ok;
    %%%%%: 2114-block  0
    %%%%%: 2114-block  1
        -: 2115:  }
        -: 2116:};
        -: 2117:
function _ZN4Json17CharReaderBuilderC2Ev called 0 returned 0% blocks executed 0%
    #####: 2118:CharReaderBuilder::CharReaderBuilder() { setDefaults(&settings_); }
    %%%%%: 2118-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2118-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 2118-block  2
    $$$$$: 2118-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 2118-block  4
Aufruf  8 niemals ausgeführt
    #####: 2119:CharReaderBuilder::~CharReaderBuilder() = default;
------------------
_ZN4Json17CharReaderBuilderD0Ev:
function _ZN4Json17CharReaderBuilderD0Ev called 0 returned 0% blocks executed 0%
    #####: 2119:CharReaderBuilder::~CharReaderBuilder() = default;
    %%%%%: 2119-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZN4Json17CharReaderBuilderD2Ev:
function _ZN4Json17CharReaderBuilderD2Ev called 0 returned 0% blocks executed 0%
    #####: 2119:CharReaderBuilder::~CharReaderBuilder() = default;
    %%%%%: 2119-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
function _ZNK4Json17CharReaderBuilder13newCharReaderEv called 0 returned 0% blocks executed 0%
    #####: 2120:CharReader* CharReaderBuilder::newCharReader() const {
    #####: 2121:  bool collectComments = settings_["collectComments"].asBool();
    %%%%%: 2121-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2121-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2122:  OurFeatures features = OurFeatures::all();
    %%%%%: 2122-block  0
Aufruf  0 niemals ausgeführt
    #####: 2123:  features.allowComments_ = settings_["allowComments"].asBool();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2123-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2124:  features.allowTrailingCommas_ = settings_["allowTrailingCommas"].asBool();
    %%%%%: 2124-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2124-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2125:  features.strictRoot_ = settings_["strictRoot"].asBool();
    %%%%%: 2125-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2125-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2126:  features.allowDroppedNullPlaceholders_ =
    #####: 2127:      settings_["allowDroppedNullPlaceholders"].asBool();
    %%%%%: 2127-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2127-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2128:  features.allowNumericKeys_ = settings_["allowNumericKeys"].asBool();
    %%%%%: 2128-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2128-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2129:  features.allowSingleQuotes_ = settings_["allowSingleQuotes"].asBool();
    %%%%%: 2129-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2129-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -: 2130:
        -: 2131:  // Stack limit is always a size_t, so we get this as an unsigned int
        -: 2132:  // regardless of it we have 64-bit integer support enabled.
    #####: 2133:  features.stackLimit_ = static_cast<size_t>(settings_["stackLimit"].asUInt());
    %%%%%: 2133-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2133-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2134:  features.failIfExtra_ = settings_["failIfExtra"].asBool();
    %%%%%: 2134-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2134-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2135:  features.rejectDupKeys_ = settings_["rejectDupKeys"].asBool();
    %%%%%: 2135-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2135-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2136:  features.allowSpecialFloats_ = settings_["allowSpecialFloats"].asBool();
    %%%%%: 2136-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2136-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2137:  features.skipBom_ = settings_["skipBom"].asBool();
    %%%%%: 2137-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2137-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 2138:  return new OurCharReader(collectComments, features);
    %%%%%: 2138-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2138-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2138-block  2
    %%%%%: 2138-block  3
    $$$$$: 2138-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    $$$$$: 2138-block  5
Aufruf  8 niemals ausgeführt
        -: 2139:}
        -: 2140:
function _ZNK4Json17CharReaderBuilder8validateEPNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 2141:bool CharReaderBuilder::validate(Json::Value* invalid) const {
        -: 2142:  static const auto& valid_keys = *new std::set<String>{
        -: 2143:      "collectComments",
        -: 2144:      "allowComments",
        -: 2145:      "allowTrailingCommas",
        -: 2146:      "strictRoot",
        -: 2147:      "allowDroppedNullPlaceholders",
        -: 2148:      "allowNumericKeys",
        -: 2149:      "allowSingleQuotes",
        -: 2150:      "stackLimit",
        -: 2151:      "failIfExtra",
        -: 2152:      "rejectDupKeys",
        -: 2153:      "allowSpecialFloats",
        -: 2154:      "skipBom",
    #####: 2155:  };
    %%%%%: 2155-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2155-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2155-block  2
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 2155-block  3
Aufruf 11 niemals ausgeführt
Aufruf 12 niemals ausgeführt
    %%%%%: 2155-block  4
Zweig 13 niemals ausgeführt
Zweig 14 niemals ausgeführt
    %%%%%: 2155-block  5
Aufruf 15 niemals ausgeführt
    $$$$$: 2155-block  6
Aufruf 16 niemals ausgeführt
    $$$$$: 2155-block  7
    $$$$$: 2155-block  8
    $$$$$: 2155-block  9
    $$$$$: 2155-block 10
Zweig 17 niemals ausgeführt
Zweig 18 niemals ausgeführt
    $$$$$: 2155-block 11
Aufruf 19 niemals ausgeführt
    $$$$$: 2155-block 12
    $$$$$: 2155-block 13
Zweig 20 niemals ausgeführt
Zweig 21 niemals ausgeführt
    $$$$$: 2155-block 14
Aufruf 22 niemals ausgeführt
    $$$$$: 2155-block 15
Zweig 23 niemals ausgeführt
Zweig 24 niemals ausgeführt
    $$$$$: 2155-block 16
Aufruf 25 niemals ausgeführt
    #####: 2156:  for (auto si = settings_.begin(); si != settings_.end(); ++si) {
    %%%%%: 2156-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 2156-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2156-block  2
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2156-block  3
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    $$$$$: 2156-block  4
    #####: 2157:    auto key = si.name();
    %%%%%: 2157-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2158:    if (valid_keys.count(key))
    %%%%%: 2158-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2158-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 2159:      continue;
    %%%%%: 2159-block  0
    #####: 2160:    if (invalid)
    %%%%%: 2160-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2161:      (*invalid)[key] = *si;
    %%%%%: 2161-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2161-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2161-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
        -: 2162:    else
    #####: 2163:      return false;
    %%%%%: 2163-block  0
    #####: 2164:  }
    %%%%%: 2164-block  0
    %%%%%: 2164-block  1
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    $$$$$: 2164-block  2
Aufruf  4 niemals ausgeführt
    #####: 2165:  return invalid ? invalid->empty() : true;
    %%%%%: 2165-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2165-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2165-block  2
    %%%%%: 2165-block  3
    %%%%%: 2165-block  4
    #####: 2166:}
    %%%%%: 2166-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2166-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2166-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 2166-block  3
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
Zweig 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
    %%%%%: 2166-block  4
Aufruf 16 niemals ausgeführt
Aufruf 17 niemals ausgeführt
Zweig 18 niemals ausgeführt
Zweig 19 niemals ausgeführt
    %%%%%: 2166-block  5
Aufruf 20 niemals ausgeführt
Aufruf 21 niemals ausgeführt
Zweig 22 niemals ausgeführt
Zweig 23 niemals ausgeführt
    %%%%%: 2166-block  6
Aufruf 24 niemals ausgeführt
Aufruf 25 niemals ausgeführt
Zweig 26 niemals ausgeführt
Zweig 27 niemals ausgeführt
    %%%%%: 2166-block  7
Aufruf 28 niemals ausgeführt
Aufruf 29 niemals ausgeführt
Zweig 30 niemals ausgeführt
Zweig 31 niemals ausgeführt
    %%%%%: 2166-block  8
Aufruf 32 niemals ausgeführt
Aufruf 33 niemals ausgeführt
Zweig 34 niemals ausgeführt
Zweig 35 niemals ausgeführt
    %%%%%: 2166-block  9
Aufruf 36 niemals ausgeführt
Aufruf 37 niemals ausgeführt
Zweig 38 niemals ausgeführt
Zweig 39 niemals ausgeführt
    %%%%%: 2166-block 10
Aufruf 40 niemals ausgeführt
Aufruf 41 niemals ausgeführt
Zweig 42 niemals ausgeführt
Zweig 43 niemals ausgeführt
    %%%%%: 2166-block 11
Aufruf 44 niemals ausgeführt
Aufruf 45 niemals ausgeführt
Zweig 46 niemals ausgeführt
Zweig 47 niemals ausgeführt
    %%%%%: 2166-block 12
Aufruf 48 niemals ausgeführt
    %%%%%: 2166-block 13
Aufruf 49 niemals ausgeführt
Aufruf 50 niemals ausgeführt
Aufruf 51 niemals ausgeführt
Aufruf 52 niemals ausgeführt
Aufruf 53 niemals ausgeführt
Aufruf 54 niemals ausgeführt
Aufruf 55 niemals ausgeführt
Aufruf 56 niemals ausgeführt
Aufruf 57 niemals ausgeführt
Aufruf 58 niemals ausgeführt
Aufruf 59 niemals ausgeführt
Aufruf 60 niemals ausgeführt
    $$$$$: 2166-block 14
Aufruf 61 niemals ausgeführt
    $$$$$: 2166-block 15
    $$$$$: 2166-block 16
Aufruf 62 niemals ausgeführt
    $$$$$: 2166-block 17
    $$$$$: 2166-block 18
Aufruf 63 niemals ausgeführt
    $$$$$: 2166-block 19
    $$$$$: 2166-block 20
Aufruf 64 niemals ausgeführt
    $$$$$: 2166-block 21
    $$$$$: 2166-block 22
Aufruf 65 niemals ausgeführt
    $$$$$: 2166-block 23
    $$$$$: 2166-block 24
Aufruf 66 niemals ausgeführt
    $$$$$: 2166-block 25
    $$$$$: 2166-block 26
Aufruf 67 niemals ausgeführt
    $$$$$: 2166-block 27
    $$$$$: 2166-block 28
Aufruf 68 niemals ausgeführt
    $$$$$: 2166-block 29
    $$$$$: 2166-block 30
Aufruf 69 niemals ausgeführt
    $$$$$: 2166-block 31
    $$$$$: 2166-block 32
Aufruf 70 niemals ausgeführt
    $$$$$: 2166-block 33
    $$$$$: 2166-block 34
Aufruf 71 niemals ausgeführt
    $$$$$: 2166-block 35
    $$$$$: 2166-block 36
Aufruf 72 niemals ausgeführt
    $$$$$: 2166-block 37
    $$$$$: 2166-block 38
Zweig 73 niemals ausgeführt
Zweig 74 niemals ausgeführt
    $$$$$: 2166-block 39
    $$$$$: 2166-block 40
Zweig 75 niemals ausgeführt
Zweig 76 niemals ausgeführt
    $$$$$: 2166-block 41
Aufruf 77 niemals ausgeführt
        -: 2167:
function _ZN4Json17CharReaderBuilderixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2168:Value& CharReaderBuilder::operator[](const String& key) {
    #####: 2169:  return settings_[key];
    %%%%%: 2169-block  0
Aufruf  0 niemals ausgeführt
        -: 2170:}
        -: 2171:// static
function _ZN4Json17CharReaderBuilder10strictModeEPNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 2172:void CharReaderBuilder::strictMode(Json::Value* settings) {
        -: 2173:  //! [CharReaderBuilderStrictMode]
    #####: 2174:  (*settings)["allowComments"] = false;
    %%%%%: 2174-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2174-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2174-block  2
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2174-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 2174-block  4
Aufruf  9 niemals ausgeführt
    #####: 2175:  (*settings)["allowTrailingCommas"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2175-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2175-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2175-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2175-block  3
Aufruf  9 niemals ausgeführt
    #####: 2176:  (*settings)["strictRoot"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2176-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2176-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2176-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2176-block  3
Aufruf  9 niemals ausgeführt
    #####: 2177:  (*settings)["allowDroppedNullPlaceholders"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2177-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2177-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2177-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2177-block  3
Aufruf  9 niemals ausgeführt
    #####: 2178:  (*settings)["allowNumericKeys"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2178-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2178-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2178-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2178-block  3
Aufruf  9 niemals ausgeführt
    #####: 2179:  (*settings)["allowSingleQuotes"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2179-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2179-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2179-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2179-block  3
Aufruf  9 niemals ausgeführt
    #####: 2180:  (*settings)["stackLimit"] = 1000;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2180-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2180-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2180-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2180-block  3
Aufruf  9 niemals ausgeführt
    #####: 2181:  (*settings)["failIfExtra"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2181-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2181-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2181-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2181-block  3
Aufruf  9 niemals ausgeführt
    #####: 2182:  (*settings)["rejectDupKeys"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2182-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2182-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2182-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2182-block  3
Aufruf  9 niemals ausgeführt
    #####: 2183:  (*settings)["allowSpecialFloats"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2183-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2183-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2183-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2183-block  3
Aufruf  9 niemals ausgeführt
    #####: 2184:  (*settings)["skipBom"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2184-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2184-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2184-block  2
Aufruf  8 niemals ausgeführt
        -: 2185:  //! [CharReaderBuilderStrictMode]
    #####: 2186:}
        -: 2187:// static
function _ZN4Json17CharReaderBuilder11setDefaultsEPNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 2188:void CharReaderBuilder::setDefaults(Json::Value* settings) {
        -: 2189:  //! [CharReaderBuilderDefaults]
    #####: 2190:  (*settings)["collectComments"] = true;
    %%%%%: 2190-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2190-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2190-block  2
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2190-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 2190-block  4
Aufruf  9 niemals ausgeführt
    #####: 2191:  (*settings)["allowComments"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2191-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2191-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2191-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2191-block  3
Aufruf  9 niemals ausgeführt
    #####: 2192:  (*settings)["allowTrailingCommas"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2192-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2192-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2192-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2192-block  3
Aufruf  9 niemals ausgeführt
    #####: 2193:  (*settings)["strictRoot"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2193-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2193-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2193-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2193-block  3
Aufruf  9 niemals ausgeführt
    #####: 2194:  (*settings)["allowDroppedNullPlaceholders"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2194-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2194-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2194-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2194-block  3
Aufruf  9 niemals ausgeführt
    #####: 2195:  (*settings)["allowNumericKeys"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2195-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2195-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2195-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2195-block  3
Aufruf  9 niemals ausgeführt
    #####: 2196:  (*settings)["allowSingleQuotes"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2196-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2196-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2196-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2196-block  3
Aufruf  9 niemals ausgeführt
    #####: 2197:  (*settings)["stackLimit"] = 1000;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2197-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2197-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2197-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2197-block  3
Aufruf  9 niemals ausgeführt
    #####: 2198:  (*settings)["failIfExtra"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2198-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2198-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2198-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2198-block  3
Aufruf  9 niemals ausgeführt
    #####: 2199:  (*settings)["rejectDupKeys"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2199-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2199-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2199-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2199-block  3
Aufruf  9 niemals ausgeführt
    #####: 2200:  (*settings)["allowSpecialFloats"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2200-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2200-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2200-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2200-block  3
Aufruf  9 niemals ausgeführt
    #####: 2201:  (*settings)["skipBom"] = true;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2201-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2201-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 2201-block  2
Aufruf  8 niemals ausgeführt
        -: 2202:  //! [CharReaderBuilderDefaults]
    #####: 2203:}
        -: 2204:
        -: 2205://////////////////////////////////
        -: 2206:// global functions
        -: 2207:
function _ZN4Json15parseFromStreamERKNS_10CharReader7FactoryERSiPNS_5ValueEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2208:bool parseFromStream(CharReader::Factory const& fact, IStream& sin, Value* root,
        -: 2209:                     String* errs) {
    #####: 2210:  OStringStream ssin;
    %%%%%: 2210-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2211:  ssin << sin.rdbuf();
    %%%%%: 2211-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2212:  String doc = ssin.str();
    %%%%%: 2212-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2213:  char const* begin = doc.data();
    %%%%%: 2213-block  0
Aufruf  0 niemals ausgeführt
    #####: 2214:  char const* end = begin + doc.size();
Aufruf  0 niemals ausgeführt
        -: 2215:  // Note that we do not actually need a null-terminator.
    #####: 2216:  CharReaderPtr const reader(fact.newCharReader());
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2216-block  0
Aufruf  3 niemals ausgeführt
    #####: 2217:  return reader->parse(begin, end, root, errs);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2217-block  0
    %%%%%: 2217-block  1
    #####: 2218:}
    %%%%%: 2218-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    $$$$$: 2218-block  1
Aufruf  3 niemals ausgeführt
    $$$$$: 2218-block  2
Aufruf  4 niemals ausgeführt
    $$$$$: 2218-block  3
Aufruf  5 niemals ausgeführt
        -: 2219:
function _ZN4JsonrsERSiRNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 2220:IStream& operator>>(IStream& sin, Value& root) {
    #####: 2221:  CharReaderBuilder b;
    %%%%%: 2221-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2222:  String errs;
    %%%%%: 2222-block  0
Aufruf  0 niemals ausgeführt
    #####: 2223:  bool ok = parseFromStream(b, sin, &root, &errs);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2224:  if (!ok) {
    %%%%%: 2224-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2225:    throwRuntimeError(errs);
    %%%%%: 2225-block  0
Aufruf  0 niemals ausgeführt
        -: 2226:  }
    #####: 2227:  return sin;
    %%%%%: 2227-block  0
    #####: 2228:}
    %%%%%: 2228-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$: 2228-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 2228-block  2
Aufruf  3 niemals ausgeführt
        -: 2229:
        -: 2230:} // namespace Json
        -: 2231:
        -: 2232:// //////////////////////////////////////////////////////////////////////
        -: 2233:// End of content of file: src/lib_json/json_reader.cpp
        -: 2234:// //////////////////////////////////////////////////////////////////////
        -: 2235:
        -: 2236:
        -: 2237:
        -: 2238:
        -: 2239:
        -: 2240:
        -: 2241:// //////////////////////////////////////////////////////////////////////
        -: 2242:// Beginning of content of file: src/lib_json/json_valueiterator.inl
        -: 2243:// //////////////////////////////////////////////////////////////////////
        -: 2244:
        -: 2245:// Copyright 2007-2010 Baptiste Lepilleur and The JsonCpp Authors
        -: 2246:// Distributed under MIT license, or public domain if desired and
        -: 2247:// recognized in your jurisdiction.
        -: 2248:// See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
        -: 2249:
        -: 2250:// included by json_value.cpp
        -: 2251:
        -: 2252:namespace Json {
        -: 2253:
        -: 2254:// //////////////////////////////////////////////////////////////////
        -: 2255:// //////////////////////////////////////////////////////////////////
        -: 2256:// //////////////////////////////////////////////////////////////////
        -: 2257:// class ValueIteratorBase
        -: 2258:// //////////////////////////////////////////////////////////////////
        -: 2259:// //////////////////////////////////////////////////////////////////
        -: 2260:// //////////////////////////////////////////////////////////////////
        -: 2261:
function _ZN4Json17ValueIteratorBaseC2Ev called 0 returned 0% blocks executed 0%
    #####: 2262:ValueIteratorBase::ValueIteratorBase() : current_() {}
    %%%%%: 2262-block  0
Aufruf  0 niemals ausgeführt
        -: 2263:
function _ZN4Json17ValueIteratorBaseC2ERKSt17_Rb_tree_iteratorISt4pairIKNS_5Value8CZStringES3_EE called 0 returned 0% blocks executed 0%
    #####: 2264:ValueIteratorBase::ValueIteratorBase(
    #####: 2265:    const Value::ObjectValues::iterator& current)
    #####: 2266:    : current_(current), isNull_(false) {}
        -: 2267:
function _ZN4Json17ValueIteratorBase5derefEv called 0 returned 0% blocks executed 0%
    #####: 2268:Value& ValueIteratorBase::deref() { return current_->second; }
    %%%%%: 2268-block  0
Aufruf  0 niemals ausgeführt
function _ZNK4Json17ValueIteratorBase5derefEv called 0 returned 0% blocks executed 0%
    #####: 2269:const Value& ValueIteratorBase::deref() const { return current_->second; }
    %%%%%: 2269-block  0
Aufruf  0 niemals ausgeführt
        -: 2270:
function _ZN4Json17ValueIteratorBase9incrementEv called 0 returned 0% blocks executed 0%
    #####: 2271:void ValueIteratorBase::increment() { ++current_; }
    %%%%%: 2271-block  0
Aufruf  0 niemals ausgeführt
        -: 2272:
function _ZN4Json17ValueIteratorBase9decrementEv called 0 returned 0% blocks executed 0%
    #####: 2273:void ValueIteratorBase::decrement() { --current_; }
    %%%%%: 2273-block  0
Aufruf  0 niemals ausgeführt
        -: 2274:
        -: 2275:ValueIteratorBase::difference_type
function _ZNK4Json17ValueIteratorBase15computeDistanceERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2276:ValueIteratorBase::computeDistance(const SelfType& other) const {
        -: 2277:  // Iterator for null value are initialized using the default
        -: 2278:  // constructor, which initialize current_ to the default
        -: 2279:  // std::map::iterator. As begin() and end() are two instance
        -: 2280:  // of the default std::map::iterator, they can not be compared.
        -: 2281:  // To allow this, we handle this comparison specifically.
    #####: 2282:  if (isNull_ && other.isNull_) {
    %%%%%: 2282-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2282-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2283:    return 0;
    %%%%%: 2283-block  0
        -: 2284:  }
        -: 2285:
        -: 2286:  // Usage of std::distance is not portable (does not compile with Sun Studio 12
        -: 2287:  // RogueWave STL,
        -: 2288:  // which is the one used by default).
        -: 2289:  // Using a portable hand-made version for non random iterator instead:
        -: 2290:  //   return difference_type( std::distance( current_, other.current_ ) );
    #####: 2291:  difference_type myDistance = 0;
    #####: 2292:  for (Value::ObjectValues::iterator it = current_; it != other.current_;
    %%%%%: 2292-block  0
    %%%%%: 2292-block  1
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2293:       ++it) {
    #####: 2294:    ++myDistance;
    %%%%%: 2294-block  0
Aufruf  0 niemals ausgeführt
        -: 2295:  }
    #####: 2296:  return myDistance;
    %%%%%: 2296-block  0
        -: 2297:}
        -: 2298:
function _ZNK4Json17ValueIteratorBase7isEqualERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2299:bool ValueIteratorBase::isEqual(const SelfType& other) const {
    #####: 2300:  if (isNull_) {
    %%%%%: 2300-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2301:    return other.isNull_;
    %%%%%: 2301-block  0
        -: 2302:  }
    #####: 2303:  return current_ == other.current_;
    %%%%%: 2303-block  0
Aufruf  0 niemals ausgeführt
        -: 2304:}
        -: 2305:
function _ZN4Json17ValueIteratorBase4copyERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2306:void ValueIteratorBase::copy(const SelfType& other) {
    #####: 2307:  current_ = other.current_;
    #####: 2308:  isNull_ = other.isNull_;
    #####: 2309:}
        -: 2310:
function _ZNK4Json17ValueIteratorBase3keyEv called 0 returned 0% blocks executed 0%
    #####: 2311:Value ValueIteratorBase::key() const {
    #####: 2312:  const Value::CZString czstring = (*current_).first;
    %%%%%: 2312-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2313:  if (czstring.data()) {
    %%%%%: 2313-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2314:    if (czstring.isStaticString())
    %%%%%: 2314-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2315:      return Value(StaticString(czstring.data()));
    %%%%%: 2315-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2315-block  1
    $$$$$: 2315-block  2
    #####: 2316:    return Value(czstring.data(), czstring.data() + czstring.length());
    %%%%%: 2316-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -: 2317:  }
    #####: 2318:  return Value(czstring.index());
    %%%%%: 2318-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2319:}
    %%%%%: 2319-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 2319-block  1
Aufruf  1 niemals ausgeführt
        -: 2320:
function _ZNK4Json17ValueIteratorBase5indexEv called 0 returned 0% blocks executed 0%
    #####: 2321:UInt ValueIteratorBase::index() const {
    #####: 2322:  const Value::CZString czstring = (*current_).first;
    %%%%%: 2322-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2323:  if (!czstring.data())
    %%%%%: 2323-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2324:    return czstring.index();
    %%%%%: 2324-block  0
Aufruf  0 niemals ausgeführt
    #####: 2325:  return Value::UInt(-1);
    %%%%%: 2325-block  0
    #####: 2326:}
    %%%%%: 2326-block  0
Aufruf  0 niemals ausgeführt
        -: 2327:
function _ZNK4Json17ValueIteratorBase4nameB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 2328:String ValueIteratorBase::name() const {
        -: 2329:  char const* keey;
        -: 2330:  char const* end;
    #####: 2331:  keey = memberName(&end);
    %%%%%: 2331-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2332:  if (!keey)
    %%%%%: 2332-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2333:    return String();
    %%%%%: 2333-block  0
Aufruf  0 niemals ausgeführt
    #####: 2334:  return String(keey, end);
    %%%%%: 2334-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2334-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 2334-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 2334-block  3
        -: 2335:}
        -: 2336:
function _ZNK4Json17ValueIteratorBase10memberNameEv called 0 returned 0% blocks executed 0%
    #####: 2337:char const* ValueIteratorBase::memberName() const {
    #####: 2338:  const char* cname = (*current_).first.data();
    %%%%%: 2338-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 2339:  return cname ? cname : "";
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2339-block  0
    %%%%%: 2339-block  1
    %%%%%: 2339-block  2
        -: 2340:}
        -: 2341:
function _ZNK4Json17ValueIteratorBase10memberNameEPPKc called 0 returned 0% blocks executed 0%
    #####: 2342:char const* ValueIteratorBase::memberName(char const** end) const {
    #####: 2343:  const char* cname = (*current_).first.data();
    %%%%%: 2343-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 2344:  if (!cname) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2345:    *end = nullptr;
    #####: 2346:    return nullptr;
    %%%%%: 2346-block  0
        -: 2347:  }
    #####: 2348:  *end = cname + (*current_).first.length();
    %%%%%: 2348-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 2349:  return cname;
        -: 2350:}
        -: 2351:
        -: 2352:// //////////////////////////////////////////////////////////////////
        -: 2353:// //////////////////////////////////////////////////////////////////
        -: 2354:// //////////////////////////////////////////////////////////////////
        -: 2355:// class ValueConstIterator
        -: 2356:// //////////////////////////////////////////////////////////////////
        -: 2357:// //////////////////////////////////////////////////////////////////
        -: 2358:// //////////////////////////////////////////////////////////////////
        -: 2359:
function _ZN4Json18ValueConstIteratorC2Ev called 0 returned 0% blocks executed 0%
    #####: 2360:ValueConstIterator::ValueConstIterator() = default;
    %%%%%: 2360-block  0
Aufruf  0 niemals ausgeführt
        -: 2361:
function _ZN4Json18ValueConstIteratorC2ERKSt17_Rb_tree_iteratorISt4pairIKNS_5Value8CZStringES3_EE called 0 returned 0% blocks executed 0%
    #####: 2362:ValueConstIterator::ValueConstIterator(
    #####: 2363:    const Value::ObjectValues::iterator& current)
    #####: 2364:    : ValueIteratorBase(current) {}
    %%%%%: 2364-block  0
Aufruf  0 niemals ausgeführt
        -: 2365:
function _ZN4Json18ValueConstIteratorC2ERKNS_13ValueIteratorE called 0 returned 0% blocks executed 0%
    #####: 2366:ValueConstIterator::ValueConstIterator(ValueIterator const& other)
    #####: 2367:    : ValueIteratorBase(other) {}
        -: 2368:
function _ZN4Json18ValueConstIteratoraSERKNS_17ValueIteratorBaseE called 0 returned 0% blocks executed 0%
    #####: 2369:ValueConstIterator& ValueConstIterator::
        -: 2370:operator=(const ValueIteratorBase& other) {
    #####: 2371:  copy(other);
    %%%%%: 2371-block  0
Aufruf  0 niemals ausgeführt
    #####: 2372:  return *this;
        -: 2373:}
        -: 2374:
        -: 2375:// //////////////////////////////////////////////////////////////////
        -: 2376:// //////////////////////////////////////////////////////////////////
        -: 2377:// //////////////////////////////////////////////////////////////////
        -: 2378:// class ValueIterator
        -: 2379:// //////////////////////////////////////////////////////////////////
        -: 2380:// //////////////////////////////////////////////////////////////////
        -: 2381:// //////////////////////////////////////////////////////////////////
        -: 2382:
function _ZN4Json13ValueIteratorC2Ev called 0 returned 0% blocks executed 0%
    #####: 2383:ValueIterator::ValueIterator() = default;
    %%%%%: 2383-block  0
Aufruf  0 niemals ausgeführt
        -: 2384:
function _ZN4Json13ValueIteratorC2ERKSt17_Rb_tree_iteratorISt4pairIKNS_5Value8CZStringES3_EE called 0 returned 0% blocks executed 0%
    #####: 2385:ValueIterator::ValueIterator(const Value::ObjectValues::iterator& current)
    #####: 2386:    : ValueIteratorBase(current) {}
    %%%%%: 2386-block  0
Aufruf  0 niemals ausgeführt
        -: 2387:
function _ZN4Json13ValueIteratorC2ERKNS_18ValueConstIteratorE called 0 returned 0% blocks executed 0%
    #####: 2388:ValueIterator::ValueIterator(const ValueConstIterator& other)
    #####: 2389:    : ValueIteratorBase(other) {
    #####: 2390:  throwRuntimeError("ConstIterator to Iterator should never be allowed.");
    %%%%%: 2390-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2390-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 2390-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 2390-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 2390-block  4
        -: 2391:}
        -: 2392:
function _ZN4Json13ValueIteratorC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2393:ValueIterator::ValueIterator(const ValueIterator& other) = default;
        -: 2394:
function _ZN4Json13ValueIteratoraSERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2395:ValueIterator& ValueIterator::operator=(const SelfType& other) {
    #####: 2396:  copy(other);
    %%%%%: 2396-block  0
Aufruf  0 niemals ausgeführt
    #####: 2397:  return *this;
        -: 2398:}
        -: 2399:
        -: 2400:} // namespace Json
        -: 2401:
        -: 2402:// //////////////////////////////////////////////////////////////////////
        -: 2403:// End of content of file: src/lib_json/json_valueiterator.inl
        -: 2404:// //////////////////////////////////////////////////////////////////////
        -: 2405:
        -: 2406:
        -: 2407:
        -: 2408:
        -: 2409:
        -: 2410:
        -: 2411:// //////////////////////////////////////////////////////////////////////
        -: 2412:// Beginning of content of file: src/lib_json/json_value.cpp
        -: 2413:// //////////////////////////////////////////////////////////////////////
        -: 2414:
        -: 2415:// Copyright 2011 Baptiste Lepilleur and The JsonCpp Authors
        -: 2416:// Distributed under MIT license, or public domain if desired and
        -: 2417:// recognized in your jurisdiction.
        -: 2418:// See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
        -: 2419:
        -: 2420:#if !defined(JSON_IS_AMALGAMATION)
        -: 2421:#include <json/assertions.h>
        -: 2422:#include <json/value.h>
        -: 2423:#include <json/writer.h>
        -: 2424:#endif // if !defined(JSON_IS_AMALGAMATION)
        -: 2425:#include <algorithm>
        -: 2426:#include <cassert>
        -: 2427:#include <cmath>
        -: 2428:#include <cstddef>
        -: 2429:#include <cstring>
        -: 2430:#include <iostream>
        -: 2431:#include <sstream>
        -: 2432:#include <utility>
        -: 2433:
        -: 2434:// Provide implementation equivalent of std::snprintf for older _MSC compilers
        -: 2435:#if defined(_MSC_VER) && _MSC_VER < 1900
        -: 2436:#include <stdarg.h>
        -: 2437:static int msvc_pre1900_c99_vsnprintf(char* outBuf, size_t size,
        -: 2438:                                      const char* format, va_list ap) {
        -: 2439:  int count = -1;
        -: 2440:  if (size != 0)
        -: 2441:    count = _vsnprintf_s(outBuf, size, _TRUNCATE, format, ap);
        -: 2442:  if (count == -1)
        -: 2443:    count = _vscprintf(format, ap);
        -: 2444:  return count;
        -: 2445:}
        -: 2446:
        -: 2447:int JSON_API msvc_pre1900_c99_snprintf(char* outBuf, size_t size,
        -: 2448:                                       const char* format, ...) {
        -: 2449:  va_list ap;
        -: 2450:  va_start(ap, format);
        -: 2451:  const int count = msvc_pre1900_c99_vsnprintf(outBuf, size, format, ap);
        -: 2452:  va_end(ap);
        -: 2453:  return count;
        -: 2454:}
        -: 2455:#endif
        -: 2456:
        -: 2457:// Disable warning C4702 : unreachable code
        -: 2458:#if defined(_MSC_VER)
        -: 2459:#pragma warning(disable : 4702)
        -: 2460:#endif
        -: 2461:
        -: 2462:#define JSON_ASSERT_UNREACHABLE assert(false)
        -: 2463:
        -: 2464:namespace Json {
        -: 2465:template <typename T>
function _ZN4JsonL11cloneUniqueISt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELm3EEEESt10unique_ptrIT_St14default_deleteISA_EERKSD_ called 0 returned 0% blocks executed 0%
    #####: 2466:static std::unique_ptr<T> cloneUnique(const std::unique_ptr<T>& p) {
    #####: 2467:  std::unique_ptr<T> r;
    #####: 2468:  if (p) {
    %%%%%: 2468-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2469:    r = std::unique_ptr<T>(new T(*p));
    %%%%%: 2469-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2469-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 2469-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
    $$$$$: 2469-block  3
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    $$$$$: 2469-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 2469-block  5
        -: 2470:  }
    #####: 2471:  return r;
    %%%%%: 2471-block  0
    %%%%%: 2471-block  1
    =====: 2472:}
    $$$$$: 2472-block  0
Aufruf  0 niemals ausgeführt
        -: 2473:
        -: 2474:// This is a walkaround to avoid the static initialization of Value::null.
        -: 2475:// kNull must be word-aligned to avoid crashing on ARM.  We use an alignment of
        -: 2476:// 8 (instead of 4) as a bit of future-proofing.
        -: 2477:#if defined(__ARMEL__)
        -: 2478:#define ALIGNAS(byte_alignment) __attribute__((aligned(byte_alignment)))
        -: 2479:#else
        -: 2480:#define ALIGNAS(byte_alignment)
        -: 2481:#endif
        -: 2482:
        -: 2483:// static
function _ZN4Json5Value13nullSingletonEv called 2 returned 100% blocks executed 82%
        2: 2484:Value const& Value::nullSingleton() {
        2: 2485:  static Value const nullStatic;
        2: 2485-block  0
Zweig  0 wurde genommen: 1 (fallthrough)
Zweig  1 wurde genommen: 1
        1: 2485-block  1
Aufruf  2 gab 1 zurück
Zweig  3 wurde genommen: 1 (fallthrough)
Zweig  4 wurde genommen: 0
        1: 2485-block  2
Aufruf  5 gab 1 zurück
Zweig  6 wurde genommen: 1 (fallthrough)
Zweig  7 wurde genommen: 0 (throw)
        1: 2485-block  3
Aufruf  8 gab 1 zurück
Aufruf  9 gab 1 zurück
    $$$$$: 2485-block  4
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    $$$$$: 2485-block  5
Aufruf 12 niemals ausgeführt
        2: 2486:  return nullStatic;
        2: 2486-block  0
        2: 2486-block  1
        -: 2487:}
        -: 2488:
        -: 2489:#if JSON_USE_NULLREF
        -: 2490:// for backwards compatibility, we'll leave these global references around, but
        -: 2491:// DO NOT use them in JSONCPP library code any more!
        -: 2492:// static
        -: 2493:Value const& Value::null = Value::nullSingleton();
        -: 2494:
        -: 2495:// static
        -: 2496:Value const& Value::nullRef = Value::nullSingleton();
        -: 2497:#endif
        -: 2498:
        -: 2499:#if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
        -: 2500:template <typename T, typename U>
        -: 2501:static inline bool InRange(double d, T min, U max) {
        -: 2502:  // The casts can lose precision, but we are looking only for
        -: 2503:  // an approximate range. Might fail on edge cases though. ~cdunn
        -: 2504:  return d >= static_cast<double>(min) && d <= static_cast<double>(max);
        -: 2505:}
        -: 2506:#else  // if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
function _ZN4JsonL15integerToDoubleEm called 0 returned 0% blocks executed 0%
    #####: 2507:static inline double integerToDouble(Json::UInt64 value) {
    #####: 2508:  return static_cast<double>(Int64(value / 2)) * 2.0 +
    #####: 2509:         static_cast<double>(Int64(value & 1));
    %%%%%: 2509-block  0
        -: 2510:}
        -: 2511:
    #####: 2512:template <typename T> static inline double integerToDouble(T value) {
    #####: 2513:  return static_cast<double>(value);
        -: 2514:}
------------------
_ZN4JsonL15integerToDoubleIlEEdT_:
function _ZN4JsonL15integerToDoubleIlEEdT_ called 0 returned 0% blocks executed 0%
    #####: 2512:template <typename T> static inline double integerToDouble(T value) {
    #####: 2513:  return static_cast<double>(value);
    %%%%%: 2513-block  0
        -: 2514:}
------------------
_ZN4JsonL15integerToDoubleIjEEdT_:
function _ZN4JsonL15integerToDoubleIjEEdT_ called 0 returned 0% blocks executed 0%
    #####: 2512:template <typename T> static inline double integerToDouble(T value) {
    #####: 2513:  return static_cast<double>(value);
    %%%%%: 2513-block  0
        -: 2514:}
------------------
_ZN4JsonL15integerToDoubleIiEEdT_:
function _ZN4JsonL15integerToDoubleIiEEdT_ called 0 returned 0% blocks executed 0%
    #####: 2512:template <typename T> static inline double integerToDouble(T value) {
    #####: 2513:  return static_cast<double>(value);
    %%%%%: 2513-block  0
        -: 2514:}
------------------
        -: 2515:
        -: 2516:template <typename T, typename U>
    #####: 2517:static inline bool InRange(double d, T min, U max) {
    #####: 2518:  return d >= integerToDouble(min) && d <= integerToDouble(max);
        -: 2519:}
------------------
_ZN4JsonL7InRangeIimEEbdT_T0_:
function _ZN4JsonL7InRangeIimEEbdT_T0_ called 0 returned 0% blocks executed 0%
    #####: 2517:static inline bool InRange(double d, T min, U max) {
    #####: 2518:  return d >= integerToDouble(min) && d <= integerToDouble(max);
    %%%%%: 2518-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2518-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2518-block  2
    %%%%%: 2518-block  3
    %%%%%: 2518-block  4
        -: 2519:}
------------------
_ZN4JsonL7InRangeIllEEbdT_T0_:
function _ZN4JsonL7InRangeIllEEbdT_T0_ called 0 returned 0% blocks executed 0%
    #####: 2517:static inline bool InRange(double d, T min, U max) {
    #####: 2518:  return d >= integerToDouble(min) && d <= integerToDouble(max);
    %%%%%: 2518-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2518-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2518-block  2
    %%%%%: 2518-block  3
    %%%%%: 2518-block  4
        -: 2519:}
------------------
_ZN4JsonL7InRangeIijEEbdT_T0_:
function _ZN4JsonL7InRangeIijEEbdT_T0_ called 0 returned 0% blocks executed 0%
    #####: 2517:static inline bool InRange(double d, T min, U max) {
    #####: 2518:  return d >= integerToDouble(min) && d <= integerToDouble(max);
    %%%%%: 2518-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2518-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2518-block  2
    %%%%%: 2518-block  3
    %%%%%: 2518-block  4
        -: 2519:}
------------------
_ZN4JsonL7InRangeIiiEEbdT_T0_:
function _ZN4JsonL7InRangeIiiEEbdT_T0_ called 0 returned 0% blocks executed 0%
    #####: 2517:static inline bool InRange(double d, T min, U max) {
    #####: 2518:  return d >= integerToDouble(min) && d <= integerToDouble(max);
    %%%%%: 2518-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2518-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 2518-block  2
    %%%%%: 2518-block  3
    %%%%%: 2518-block  4
        -: 2519:}
------------------
        -: 2520:#endif // if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
        -: 2521:
        -: 2522:/** Duplicates the specified string value.
        -: 2523: * @param value Pointer to the string to duplicate. Must be zero-terminated if
        -: 2524: *              length is "unknown".
        -: 2525: * @param length Length of the value. if equals to unknown, then it will be
        -: 2526: *               computed using strlen(value).
        -: 2527: * @return Pointer on the duplicate instance of string.
        -: 2528: */
function _ZN4JsonL20duplicateStringValueEPKcm called 0 returned 0% blocks executed 0%
    #####: 2529:static inline char* duplicateStringValue(const char* value, size_t length) {
        -: 2530:  // Avoid an integer overflow in the call to malloc below by limiting length
        -: 2531:  // to a sane value.
    #####: 2532:  if (length >= static_cast<size_t>(Value::maxInt))
    %%%%%: 2532-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2533:    length = Value::maxInt - 1;
    %%%%%: 2533-block  0
        -: 2534:
    #####: 2535:  auto newString = static_cast<char*>(malloc(length + 1));
    #####: 2536:  if (newString == nullptr) {
    %%%%%: 2536-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2537:    throwRuntimeError("in Json::Value::duplicateStringValue(): "
    %%%%%: 2537-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2537-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 2537-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 2537-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 2537-block  4
        -: 2538:                      "Failed to allocate string value buffer");
        -: 2539:  }
    #####: 2540:  memcpy(newString, value, length);
    #####: 2541:  newString[length] = 0;
    #####: 2542:  return newString;
    %%%%%: 2542-block  0
    %%%%%: 2542-block  1
        -: 2543:}
        -: 2544:
        -: 2545:/* Record the length as a prefix.
        -: 2546: */
function _ZN4JsonL29duplicateAndPrefixStringValueEPKcj called 0 returned 0% blocks executed 0%
    #####: 2547:static inline char* duplicateAndPrefixStringValue(const char* value,
        -: 2548:                                                  unsigned int length) {
        -: 2549:  // Avoid an integer overflow in the call to malloc below by limiting length
        -: 2550:  // to a sane value.
    #####: 2551:  JSON_ASSERT_MESSAGE(length <= static_cast<unsigned>(Value::maxInt) -
    %%%%%: 2551-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2551-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2551-block  2
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2551-block  3
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 2551-block  4
Aufruf 11 niemals ausgeführt
    $$$$$: 2551-block  5
Aufruf 12 niemals ausgeführt
    $$$$$: 2551-block  6
    $$$$$: 2551-block  7
Aufruf 13 niemals ausgeführt
        -: 2552:                                    sizeof(unsigned) - 1U,
        -: 2553:                      "in Json::Value::duplicateAndPrefixStringValue(): "
        -: 2554:                      "length too big for prefixing");
    #####: 2555:  size_t actualLength = sizeof(length) + length + 1;
    #####: 2556:  auto newString = static_cast<char*>(malloc(actualLength));
    #####: 2557:  if (newString == nullptr) {
    %%%%%: 2557-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2558:    throwRuntimeError("in Json::Value::duplicateAndPrefixStringValue(): "
    %%%%%: 2558-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2558-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 2558-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 2558-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 2558-block  4
        -: 2559:                      "Failed to allocate string value buffer");
        -: 2560:  }
    #####: 2561:  *reinterpret_cast<unsigned*>(newString) = length;
    #####: 2562:  memcpy(newString + sizeof(unsigned), value, length);
    #####: 2563:  newString[actualLength - 1U] =
        -: 2564:      0; // to avoid buffer over-run accidents by users later
    #####: 2565:  return newString;
    %%%%%: 2565-block  0
    %%%%%: 2565-block  1
        -: 2566:}
function _ZN4JsonL20decodePrefixedStringEbPKcPjPS1_ called 0 returned 0% blocks executed 0%
    #####: 2567:inline static void decodePrefixedString(bool isPrefixed, char const* prefixed,
        -: 2568:                                        unsigned* length, char const** value) {
    #####: 2569:  if (!isPrefixed) {
    %%%%%: 2569-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2570:    *length = static_cast<unsigned>(strlen(prefixed));
    #####: 2571:    *value = prefixed;
    %%%%%: 2571-block  0
        -: 2572:  } else {
    #####: 2573:    *length = *reinterpret_cast<unsigned const*>(prefixed);
    #####: 2574:    *value = prefixed + sizeof(unsigned);
    %%%%%: 2574-block  0
        -: 2575:  }
    #####: 2576:}
        -: 2577:/** Free the string duplicated by
        -: 2578: * duplicateStringValue()/duplicateAndPrefixStringValue().
        -: 2579: */
        -: 2580:#if JSONCPP_USING_SECURE_MEMORY
        -: 2581:static inline void releasePrefixedStringValue(char* value) {
        -: 2582:  unsigned length = 0;
        -: 2583:  char const* valueDecoded;
        -: 2584:  decodePrefixedString(true, value, &length, &valueDecoded);
        -: 2585:  size_t const size = sizeof(unsigned) + length + 1U;
        -: 2586:  memset(value, 0, size);
        -: 2587:  free(value);
        -: 2588:}
        -: 2589:static inline void releaseStringValue(char* value, unsigned length) {
        -: 2590:  // length==0 => we allocated the strings memory
        -: 2591:  size_t size = (length == 0) ? strlen(value) : length;
        -: 2592:  memset(value, 0, size);
        -: 2593:  free(value);
        -: 2594:}
        -: 2595:#else  // !JSONCPP_USING_SECURE_MEMORY
function _ZN4JsonL26releasePrefixedStringValueEPc called 0 returned 0% blocks executed 0%
    #####: 2596:static inline void releasePrefixedStringValue(char* value) { free(value); }
function _ZN4JsonL18releaseStringValueEPcj called 0 returned 0% blocks executed 0%
    #####: 2597:static inline void releaseStringValue(char* value, unsigned) { free(value); }
        -: 2598:#endif // JSONCPP_USING_SECURE_MEMORY
        -: 2599:
        -: 2600:} // namespace Json
        -: 2601:
        -: 2602:// //////////////////////////////////////////////////////////////////
        -: 2603:// //////////////////////////////////////////////////////////////////
        -: 2604:// //////////////////////////////////////////////////////////////////
        -: 2605:// ValueInternals...
        -: 2606:// //////////////////////////////////////////////////////////////////
        -: 2607:// //////////////////////////////////////////////////////////////////
        -: 2608:// //////////////////////////////////////////////////////////////////
        -: 2609:#if !defined(JSON_IS_AMALGAMATION)
        -: 2610:
        -: 2611:#include "json_valueiterator.inl"
        -: 2612:#endif // if !defined(JSON_IS_AMALGAMATION)
        -: 2613:
        -: 2614:namespace Json {
        -: 2615:
        -: 2616:#if JSON_USE_EXCEPTION
function _ZN4Json9ExceptionC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2617:Exception::Exception(String msg) : msg_(std::move(msg)) {}
    %%%%%: 2617-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    #####: 2618:Exception::~Exception() noexcept = default;
------------------
_ZN4Json9ExceptionD0Ev:
function _ZN4Json9ExceptionD0Ev called 0 returned 0% blocks executed 0%
    #####: 2618:Exception::~Exception() noexcept = default;
    %%%%%: 2618-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZN4Json9ExceptionD2Ev:
function _ZN4Json9ExceptionD2Ev called 0 returned 0% blocks executed 0%
    #####: 2618:Exception::~Exception() noexcept = default;
    %%%%%: 2618-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
function _ZNK4Json9Exception4whatEv called 0 returned 0% blocks executed 0%
    #####: 2619:char const* Exception::what() const noexcept { return msg_.c_str(); }
    %%%%%: 2619-block  0
Aufruf  0 niemals ausgeführt
function _ZN4Json12RuntimeErrorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2620:RuntimeError::RuntimeError(String const& msg) : Exception(msg) {}
    %%%%%: 2620-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2620-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
function _ZN4Json10LogicErrorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2621:LogicError::LogicError(String const& msg) : Exception(msg) {}
    %%%%%: 2621-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2621-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
function _ZN4Json17throwRuntimeErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2622:JSONCPP_NORETURN void throwRuntimeError(String const& msg) {
    #####: 2623:  throw RuntimeError(msg);
    %%%%%: 2623-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2623-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 2623-block  2
Aufruf  5 niemals ausgeführt
        -: 2624:}
function _ZN4Json15throwLogicErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2625:JSONCPP_NORETURN void throwLogicError(String const& msg) {
    #####: 2626:  throw LogicError(msg);
    %%%%%: 2626-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2626-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 2626-block  2
Aufruf  5 niemals ausgeführt
        -: 2627:}
        -: 2628:#else // !JSON_USE_EXCEPTION
        -: 2629:JSONCPP_NORETURN void throwRuntimeError(String const& msg) {
        -: 2630:  std::cerr << msg << std::endl;
        -: 2631:  abort();
        -: 2632:}
        -: 2633:JSONCPP_NORETURN void throwLogicError(String const& msg) {
        -: 2634:  std::cerr << msg << std::endl;
        -: 2635:  abort();
        -: 2636:}
        -: 2637:#endif
        -: 2638:
        -: 2639:// //////////////////////////////////////////////////////////////////
        -: 2640:// //////////////////////////////////////////////////////////////////
        -: 2641:// //////////////////////////////////////////////////////////////////
        -: 2642:// class Value::CZString
        -: 2643:// //////////////////////////////////////////////////////////////////
        -: 2644:// //////////////////////////////////////////////////////////////////
        -: 2645:// //////////////////////////////////////////////////////////////////
        -: 2646:
        -: 2647:// Notes: policy_ indicates if the string was allocated when
        -: 2648:// a string is stored.
        -: 2649:
function _ZN4Json5Value8CZStringC2Ej called 0 returned 0% blocks executed 0%
    #####: 2650:Value::CZString::CZString(ArrayIndex index) : cstr_(nullptr), index_(index) {}
        -: 2651:
function _ZN4Json5Value8CZStringC2EPKcjNS1_17DuplicationPolicyE called 0 returned 0% blocks executed 0%
    #####: 2652:Value::CZString::CZString(char const* str, unsigned length,
    #####: 2653:                          DuplicationPolicy allocate)
    #####: 2654:    : cstr_(str) {
        -: 2655:  // allocate != duplicate
    #####: 2656:  storage_.policy_ = allocate & 0x3;
    #####: 2657:  storage_.length_ = length & 0x3FFFFFFF;
    #####: 2658:}
        -: 2659:
function _ZN4Json5Value8CZStringC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####: 2660:Value::CZString::CZString(const CZString& other) {
    #####: 2661:  cstr_ = (other.storage_.policy_ != noDuplication && other.cstr_ != nullptr
    %%%%%: 2661-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2662:               ? duplicateStringValue(other.cstr_, other.storage_.length_)
    %%%%%: 2662-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2662-block  1
Aufruf  2 niemals ausgeführt
    %%%%%: 2662-block  2
        -: 2663:               : other.cstr_);
    #####: 2664:  storage_.policy_ =
        -: 2665:      static_cast<unsigned>(
    #####: 2666:          other.cstr_
    #####: 2667:              ? (static_cast<DuplicationPolicy>(other.storage_.policy_) ==
        -: 2668:                         noDuplication
    #####: 2669:                     ? noDuplication
        -: 2670:                     : duplicate)
    #####: 2671:              : static_cast<DuplicationPolicy>(other.storage_.policy_)) &
    %%%%%: 2671-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2671-block  1
    %%%%%: 2671-block  2
        -: 2672:      3U;
    #####: 2673:  storage_.length_ = other.storage_.length_;
    #####: 2674:}
        -: 2675:
function _ZN4Json5Value8CZStringC2EOS1_ called 0 returned 0% blocks executed 0%
    #####: 2676:Value::CZString::CZString(CZString&& other) noexcept
    #####: 2677:    : cstr_(other.cstr_), index_(other.index_) {
    #####: 2678:  other.cstr_ = nullptr;
    #####: 2679:}
        -: 2680:
function _ZN4Json5Value8CZStringD2Ev called 0 returned 0% blocks executed 0%
    #####: 2681:Value::CZString::~CZString() {
    #####: 2682:  if (cstr_ && storage_.policy_ == duplicate) {
    %%%%%: 2682-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2682-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2683:    releaseStringValue(const_cast<char*>(cstr_),
    #####: 2684:                       storage_.length_ + 1U); // +1 for null terminating
    %%%%%: 2684-block  0
Aufruf  0 niemals ausgeführt
        -: 2685:                                               // character for sake of
        -: 2686:                                               // completeness but not actually
        -: 2687:                                               // necessary
        -: 2688:  }
    #####: 2689:}
        -: 2690:
function _ZN4Json5Value8CZString4swapERS1_ called 0 returned 0% blocks executed 0%
    #####: 2691:void Value::CZString::swap(CZString& other) {
    #####: 2692:  std::swap(cstr_, other.cstr_);
    %%%%%: 2692-block  0
Aufruf  0 niemals ausgeführt
    #####: 2693:  std::swap(index_, other.index_);
Aufruf  0 niemals ausgeführt
    #####: 2694:}
        -: 2695:
function _ZN4Json5Value8CZStringaSERKS1_ called 0 returned 0% blocks executed 0%
    #####: 2696:Value::CZString& Value::CZString::operator=(const CZString& other) {
    #####: 2697:  cstr_ = other.cstr_;
    #####: 2698:  index_ = other.index_;
    #####: 2699:  return *this;
    %%%%%: 2699-block  0
        -: 2700:}
        -: 2701:
function _ZN4Json5Value8CZStringaSEOS1_ called 0 returned 0% blocks executed 0%
    #####: 2702:Value::CZString& Value::CZString::operator=(CZString&& other) noexcept {
    #####: 2703:  cstr_ = other.cstr_;
    #####: 2704:  index_ = other.index_;
    #####: 2705:  other.cstr_ = nullptr;
    #####: 2706:  return *this;
    %%%%%: 2706-block  0
        -: 2707:}
        -: 2708:
function _ZNK4Json5Value8CZStringltERKS1_ called 0 returned 0% blocks executed 0%
    #####: 2709:bool Value::CZString::operator<(const CZString& other) const {
    #####: 2710:  if (!cstr_)
    %%%%%: 2710-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2711:    return index_ < other.index_;
    %%%%%: 2711-block  0
        -: 2712:  // return strcmp(cstr_, other.cstr_) < 0;
        -: 2713:  // Assume both are strings.
    #####: 2714:  unsigned this_len = this->storage_.length_;
    #####: 2715:  unsigned other_len = other.storage_.length_;
    #####: 2716:  unsigned min_len = std::min<unsigned>(this_len, other_len);
    %%%%%: 2716-block  0
Aufruf  0 niemals ausgeführt
    #####: 2717:  JSON_ASSERT(this->cstr_ && other.cstr_);
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2717-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2717-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2717-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2717-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 2717-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 2717-block  5
    $$$$$: 2717-block  6
    #####: 2718:  int comp = memcmp(this->cstr_, other.cstr_, min_len);
    #####: 2719:  if (comp < 0)
    %%%%%: 2719-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2720:    return true;
    %%%%%: 2720-block  0
    #####: 2721:  if (comp > 0)
    %%%%%: 2721-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2722:    return false;
    %%%%%: 2722-block  0
    #####: 2723:  return (this_len < other_len);
    %%%%%: 2723-block  0
        -: 2724:}
        -: 2725:
function _ZNK4Json5Value8CZStringeqERKS1_ called 0 returned 0% blocks executed 0%
    #####: 2726:bool Value::CZString::operator==(const CZString& other) const {
    #####: 2727:  if (!cstr_)
    %%%%%: 2727-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2728:    return index_ == other.index_;
    %%%%%: 2728-block  0
        -: 2729:  // return strcmp(cstr_, other.cstr_) == 0;
        -: 2730:  // Assume both are strings.
    #####: 2731:  unsigned this_len = this->storage_.length_;
    #####: 2732:  unsigned other_len = other.storage_.length_;
    #####: 2733:  if (this_len != other_len)
    %%%%%: 2733-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2734:    return false;
    %%%%%: 2734-block  0
    #####: 2735:  JSON_ASSERT(this->cstr_ && other.cstr_);
    %%%%%: 2735-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2735-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2735-block  2
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2735-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 2735-block  4
Aufruf  9 niemals ausgeführt
    $$$$$: 2735-block  5
Aufruf 10 niemals ausgeführt
    $$$$$: 2735-block  6
    #####: 2736:  int comp = memcmp(this->cstr_, other.cstr_, this_len);
    #####: 2737:  return comp == 0;
    %%%%%: 2737-block  0
        -: 2738:}
        -: 2739:
function _ZNK4Json5Value8CZString5indexEv called 0 returned 0% blocks executed 0%
    #####: 2740:ArrayIndex Value::CZString::index() const { return index_; }
    %%%%%: 2740-block  0
        -: 2741:
        -: 2742:// const char* Value::CZString::c_str() const { return cstr_; }
function _ZNK4Json5Value8CZString4dataEv called 0 returned 0% blocks executed 0%
    #####: 2743:const char* Value::CZString::data() const { return cstr_; }
    %%%%%: 2743-block  0
function _ZNK4Json5Value8CZString6lengthEv called 0 returned 0% blocks executed 0%
    #####: 2744:unsigned Value::CZString::length() const { return storage_.length_; }
    %%%%%: 2744-block  0
function _ZNK4Json5Value8CZString14isStaticStringEv called 0 returned 0% blocks executed 0%
    #####: 2745:bool Value::CZString::isStaticString() const {
    #####: 2746:  return storage_.policy_ == noDuplication;
    %%%%%: 2746-block  0
        -: 2747:}
        -: 2748:
        -: 2749:// //////////////////////////////////////////////////////////////////
        -: 2750:// //////////////////////////////////////////////////////////////////
        -: 2751:// //////////////////////////////////////////////////////////////////
        -: 2752:// class Value::Value
        -: 2753:// //////////////////////////////////////////////////////////////////
        -: 2754:// //////////////////////////////////////////////////////////////////
        -: 2755:// //////////////////////////////////////////////////////////////////
        -: 2756:
        -: 2757:/*! \internal Default constructor initialization must be equivalent to:
        -: 2758: * memset( this, 0, sizeof(Value) )
        -: 2759: * This optimization is used in ValueInternalMap fast allocator.
        -: 2760: */
function _ZN4Json5ValueC2ENS_9ValueTypeE called 1 returned 100% blocks executed 40%
        1: 2761:Value::Value(ValueType type) {
        1: 2761-block  0
Aufruf  0 gab 1 zurück
        -: 2762:  static char const emptyString[] = "";
        1: 2763:  initBasic(type);
Aufruf  0 gab 1 zurück
        1: 2764:  switch (type) {
Zweig  0 wurde genommen: 1
Zweig  1 wurde genommen: 0
Zweig  2 wurde genommen: 0
Zweig  3 wurde genommen: 0
Zweig  4 wurde genommen: 0
Zweig  5 wurde genommen: 0
Zweig  6 wurde genommen: 0
        1: 2765:  case nullValue:
        1: 2766:    break;
        1: 2766-block  0
    #####: 2767:  case intValue:
        -: 2768:  case uintValue:
    #####: 2769:    value_.int_ = 0;
    #####: 2770:    break;
    %%%%%: 2770-block  0
    #####: 2771:  case realValue:
    #####: 2772:    value_.real_ = 0.0;
    #####: 2773:    break;
    %%%%%: 2773-block  0
    #####: 2774:  case stringValue:
        -: 2775:    // allocated_ == false, so this is safe.
    #####: 2776:    value_.string_ = const_cast<char*>(static_cast<char const*>(emptyString));
    #####: 2777:    break;
    %%%%%: 2777-block  0
    #####: 2778:  case arrayValue:
        -: 2779:  case objectValue:
    #####: 2780:    value_.map_ = new ObjectValues();
    %%%%%: 2780-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2780-block  1
Aufruf  3 niemals ausgeführt
    #####: 2781:    break;
    #####: 2782:  case booleanValue:
    #####: 2783:    value_.bool_ = false;
    #####: 2784:    break;
    %%%%%: 2784-block  0
    #####: 2785:  default:
    #####: 2786:    JSON_ASSERT_UNREACHABLE;
    %%%%%: 2786-block  0
Aufruf  0 niemals ausgeführt
        -: 2787:  }
        1: 2788:}
        1: 2788-block  0
    $$$$$: 2788-block  1
Aufruf  0 niemals ausgeführt
        -: 2789:
function _ZN4Json5ValueC2Ei called 0 returned 0% blocks executed 0%
    #####: 2790:Value::Value(Int value) {
    %%%%%: 2790-block  0
Aufruf  0 niemals ausgeführt
    #####: 2791:  initBasic(intValue);
Aufruf  0 niemals ausgeführt
    #####: 2792:  value_.int_ = value;
    #####: 2793:}
        -: 2794:
function _ZN4Json5ValueC2Ej called 0 returned 0% blocks executed 0%
    #####: 2795:Value::Value(UInt value) {
    %%%%%: 2795-block  0
Aufruf  0 niemals ausgeführt
    #####: 2796:  initBasic(uintValue);
Aufruf  0 niemals ausgeführt
    #####: 2797:  value_.uint_ = value;
    #####: 2798:}
        -: 2799:#if defined(JSON_HAS_INT64)
function _ZN4Json5ValueC2El called 0 returned 0% blocks executed 0%
    #####: 2800:Value::Value(Int64 value) {
    %%%%%: 2800-block  0
Aufruf  0 niemals ausgeführt
    #####: 2801:  initBasic(intValue);
Aufruf  0 niemals ausgeführt
    #####: 2802:  value_.int_ = value;
    #####: 2803:}
function _ZN4Json5ValueC2Em called 0 returned 0% blocks executed 0%
    #####: 2804:Value::Value(UInt64 value) {
    %%%%%: 2804-block  0
Aufruf  0 niemals ausgeführt
    #####: 2805:  initBasic(uintValue);
Aufruf  0 niemals ausgeführt
    #####: 2806:  value_.uint_ = value;
    #####: 2807:}
        -: 2808:#endif // defined(JSON_HAS_INT64)
        -: 2809:
function _ZN4Json5ValueC2Ed called 0 returned 0% blocks executed 0%
    #####: 2810:Value::Value(double value) {
    %%%%%: 2810-block  0
Aufruf  0 niemals ausgeführt
    #####: 2811:  initBasic(realValue);
Aufruf  0 niemals ausgeführt
    #####: 2812:  value_.real_ = value;
    #####: 2813:}
        -: 2814:
function _ZN4Json5ValueC2EPKc called 0 returned 0% blocks executed 0%
    #####: 2815:Value::Value(const char* value) {
    %%%%%: 2815-block  0
Aufruf  0 niemals ausgeführt
    #####: 2816:  initBasic(stringValue, true);
Aufruf  0 niemals ausgeführt
    #####: 2817:  JSON_ASSERT_MESSAGE(value != nullptr,
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2817-block  0
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 2817-block  1
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2817-block  2
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 2817-block  3
Aufruf 11 niemals ausgeführt
    $$$$$: 2817-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 2817-block  5
    $$$$$: 2817-block  6
Aufruf 13 niemals ausgeführt
        -: 2818:                      "Null Value Passed to Value Constructor");
    #####: 2819:  value_.string_ = duplicateAndPrefixStringValue(
    #####: 2820:      value, static_cast<unsigned>(strlen(value)));
    %%%%%: 2820-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2821:}
    %%%%%: 2821-block  0
    $$$$$: 2821-block  1
Aufruf  0 niemals ausgeführt
        -: 2822:
function _ZN4Json5ValueC2EPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2823:Value::Value(const char* begin, const char* end) {
    %%%%%: 2823-block  0
Aufruf  0 niemals ausgeführt
    #####: 2824:  initBasic(stringValue, true);
Aufruf  0 niemals ausgeführt
    #####: 2825:  value_.string_ =
    #####: 2826:      duplicateAndPrefixStringValue(begin, static_cast<unsigned>(end - begin));
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2827:}
    %%%%%: 2827-block  0
    $$$$$: 2827-block  1
Aufruf  0 niemals ausgeführt
        -: 2828:
function _ZN4Json5ValueC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2829:Value::Value(const String& value) {
    %%%%%: 2829-block  0
Aufruf  0 niemals ausgeführt
    #####: 2830:  initBasic(stringValue, true);
Aufruf  0 niemals ausgeführt
    #####: 2831:  value_.string_ = duplicateAndPrefixStringValue(
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2832:      value.data(), static_cast<unsigned>(value.length()));
Aufruf  0 niemals ausgeführt
    #####: 2833:}
    %%%%%: 2833-block  0
    $$$$$: 2833-block  1
Aufruf  0 niemals ausgeführt
        -: 2834:
function _ZN4Json5ValueC2ERKNS_12StaticStringE called 0 returned 0% blocks executed 0%
    #####: 2835:Value::Value(const StaticString& value) {
    %%%%%: 2835-block  0
Aufruf  0 niemals ausgeführt
    #####: 2836:  initBasic(stringValue);
Aufruf  0 niemals ausgeführt
    #####: 2837:  value_.string_ = const_cast<char*>(value.c_str());
Aufruf  0 niemals ausgeführt
    #####: 2838:}
        -: 2839:
function _ZN4Json5ValueC2Eb called 0 returned 0% blocks executed 0%
    #####: 2840:Value::Value(bool value) {
    %%%%%: 2840-block  0
Aufruf  0 niemals ausgeführt
    #####: 2841:  initBasic(booleanValue);
Aufruf  0 niemals ausgeführt
    #####: 2842:  value_.bool_ = value;
    #####: 2843:}
        -: 2844:
function _ZN4Json5ValueC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2845:Value::Value(const Value& other) {
    %%%%%: 2845-block  0
Aufruf  0 niemals ausgeführt
    #####: 2846:  dupPayload(other);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2847:  dupMeta(other);
    %%%%%: 2847-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2848:}
    %%%%%: 2848-block  0
    $$$$$: 2848-block  1
Aufruf  0 niemals ausgeführt
        -: 2849:
function _ZN4Json5ValueC2EOS0_ called 0 returned 0% blocks executed 0%
    #####: 2850:Value::Value(Value&& other) noexcept {
    %%%%%: 2850-block  0
Aufruf  0 niemals ausgeführt
    #####: 2851:  initBasic(nullValue);
Aufruf  0 niemals ausgeführt
    #####: 2852:  swap(other);
Aufruf  0 niemals ausgeführt
    #####: 2853:}
        -: 2854:
function _ZN4Json5ValueD2Ev called 1 returned 100% blocks executed 100%
        1: 2855:Value::~Value() {
        1: 2856:  releasePayload();
        1: 2856-block  0
Aufruf  0 gab 1 zurück
        1: 2857:  value_.uint_ = 0;
        1: 2858:}
Aufruf  0 gab 1 zurück
        -: 2859:
function _ZN4Json5ValueaSERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2860:Value& Value::operator=(const Value& other) {
    #####: 2861:  Value(other).swap(*this);
    %%%%%: 2861-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2861-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    #####: 2862:  return *this;
    %%%%%: 2862-block  0
        -: 2863:}
        -: 2864:
function _ZN4Json5ValueaSEOS0_ called 0 returned 0% blocks executed 0%
    #####: 2865:Value& Value::operator=(Value&& other) noexcept {
    #####: 2866:  other.swap(*this);
    %%%%%: 2866-block  0
Aufruf  0 niemals ausgeführt
    #####: 2867:  return *this;
        -: 2868:}
        -: 2869:
function _ZN4Json5Value11swapPayloadERS0_ called 0 returned 0% blocks executed 0%
    #####: 2870:void Value::swapPayload(Value& other) {
    #####: 2871:  std::swap(bits_, other.bits_);
    %%%%%: 2871-block  0
Aufruf  0 niemals ausgeführt
    #####: 2872:  std::swap(value_, other.value_);
Aufruf  0 niemals ausgeführt
    #####: 2873:}
        -: 2874:
function _ZN4Json5Value11copyPayloadERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2875:void Value::copyPayload(const Value& other) {
    #####: 2876:  releasePayload();
    %%%%%: 2876-block  0
Aufruf  0 niemals ausgeführt
    #####: 2877:  dupPayload(other);
Aufruf  0 niemals ausgeführt
    #####: 2878:}
        -: 2879:
function _ZN4Json5Value4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 2880:void Value::swap(Value& other) {
    #####: 2881:  swapPayload(other);
    %%%%%: 2881-block  0
Aufruf  0 niemals ausgeführt
    #####: 2882:  std::swap(comments_, other.comments_);
Aufruf  0 niemals ausgeführt
    #####: 2883:  std::swap(start_, other.start_);
Aufruf  0 niemals ausgeführt
    #####: 2884:  std::swap(limit_, other.limit_);
Aufruf  0 niemals ausgeführt
    #####: 2885:}
        -: 2886:
function _ZN4Json5Value4copyERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2887:void Value::copy(const Value& other) {
    #####: 2888:  copyPayload(other);
    %%%%%: 2888-block  0
Aufruf  0 niemals ausgeführt
    #####: 2889:  dupMeta(other);
Aufruf  0 niemals ausgeführt
    #####: 2890:}
        -: 2891:
function _ZNK4Json5Value4typeEv called 1 returned 100% blocks executed 100%
        1: 2892:ValueType Value::type() const {
        1: 2893:  return static_cast<ValueType>(bits_.value_type_);
        1: 2893-block  0
        -: 2894:}
        -: 2895:
function _ZNK4Json5Value7compareERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2896:int Value::compare(const Value& other) const {
    #####: 2897:  if (*this < other)
    %%%%%: 2897-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2898:    return -1;
    %%%%%: 2898-block  0
    #####: 2899:  if (*this > other)
    %%%%%: 2899-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 2900:    return 1;
    %%%%%: 2900-block  0
    #####: 2901:  return 0;
    %%%%%: 2901-block  0
        -: 2902:}
        -: 2903:
function _ZNK4Json5ValueltERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2904:bool Value::operator<(const Value& other) const {
    #####: 2905:  int typeDelta = type() - other.type();
    %%%%%: 2905-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 2906:  if (typeDelta)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2907:    return typeDelta < 0;
    %%%%%: 2907-block  0
    #####: 2908:  switch (type()) {
    %%%%%: 2908-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####: 2909:  case nullValue:
    #####: 2910:    return false;
    %%%%%: 2910-block  0
    #####: 2911:  case intValue:
    #####: 2912:    return value_.int_ < other.value_.int_;
    %%%%%: 2912-block  0
    #####: 2913:  case uintValue:
    #####: 2914:    return value_.uint_ < other.value_.uint_;
    %%%%%: 2914-block  0
    #####: 2915:  case realValue:
    #####: 2916:    return value_.real_ < other.value_.real_;
    %%%%%: 2916-block  0
    #####: 2917:  case booleanValue:
    #####: 2918:    return value_.bool_ < other.value_.bool_;
    %%%%%: 2918-block  0
    #####: 2919:  case stringValue: {
    #####: 2920:    if ((value_.string_ == nullptr) || (other.value_.string_ == nullptr)) {
    %%%%%: 2920-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2920-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2921:      return other.value_.string_ != nullptr;
    %%%%%: 2921-block  0
        -: 2922:    }
        -: 2923:    unsigned this_len;
        -: 2924:    unsigned other_len;
        -: 2925:    char const* this_str;
        -: 2926:    char const* other_str;
    #####: 2927:    decodePrefixedString(this->isAllocated(), this->value_.string_, &this_len,
    %%%%%: 2927-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 2928:                         &this_str);
    #####: 2929:    decodePrefixedString(other.isAllocated(), other.value_.string_, &other_len,
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 2930:                         &other_str);
    #####: 2931:    unsigned min_len = std::min<unsigned>(this_len, other_len);
Aufruf  0 niemals ausgeführt
    #####: 2932:    JSON_ASSERT(this_str && other_str);
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2932-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2932-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2932-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 2932-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 2932-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 2932-block  5
    $$$$$: 2932-block  6
    #####: 2933:    int comp = memcmp(this_str, other_str, min_len);
    #####: 2934:    if (comp < 0)
    %%%%%: 2934-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2935:      return true;
    %%%%%: 2935-block  0
    #####: 2936:    if (comp > 0)
    %%%%%: 2936-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2937:      return false;
    %%%%%: 2937-block  0
    #####: 2938:    return (this_len < other_len);
    %%%%%: 2938-block  0
        -: 2939:  }
    #####: 2940:  case arrayValue:
        -: 2941:  case objectValue: {
    #####: 2942:    auto thisSize = value_.map_->size();
    %%%%%: 2942-block  0
Aufruf  0 niemals ausgeführt
    #####: 2943:    auto otherSize = other.value_.map_->size();
Aufruf  0 niemals ausgeführt
    #####: 2944:    if (thisSize != otherSize)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2945:      return thisSize < otherSize;
    %%%%%: 2945-block  0
    #####: 2946:    return (*value_.map_) < (*other.value_.map_);
    %%%%%: 2946-block  0
Aufruf  0 niemals ausgeführt
        -: 2947:  }
    #####: 2948:  default:
    #####: 2949:    JSON_ASSERT_UNREACHABLE;
    %%%%%: 2949-block  0
Aufruf  0 niemals ausgeführt
        -: 2950:  }
        -: 2951:  return false; // unreachable
        -: 2952:}
        -: 2953:
function _ZNK4Json5ValueleERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2954:bool Value::operator<=(const Value& other) const { return !(other < *this); }
    %%%%%: 2954-block  0
Aufruf  0 niemals ausgeführt
        -: 2955:
function _ZNK4Json5ValuegeERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2956:bool Value::operator>=(const Value& other) const { return !(*this < other); }
    %%%%%: 2956-block  0
Aufruf  0 niemals ausgeführt
        -: 2957:
function _ZNK4Json5ValuegtERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2958:bool Value::operator>(const Value& other) const { return other < *this; }
    %%%%%: 2958-block  0
Aufruf  0 niemals ausgeführt
        -: 2959:
function _ZNK4Json5ValueeqERKS0_ called 0 returned 0% blocks executed 0%
    #####: 2960:bool Value::operator==(const Value& other) const {
    #####: 2961:  if (type() != other.type())
    %%%%%: 2961-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2962:    return false;
    %%%%%: 2962-block  0
    #####: 2963:  switch (type()) {
    %%%%%: 2963-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####: 2964:  case nullValue:
    #####: 2965:    return true;
    %%%%%: 2965-block  0
    #####: 2966:  case intValue:
    #####: 2967:    return value_.int_ == other.value_.int_;
    %%%%%: 2967-block  0
    #####: 2968:  case uintValue:
    #####: 2969:    return value_.uint_ == other.value_.uint_;
    %%%%%: 2969-block  0
    #####: 2970:  case realValue:
    #####: 2971:    return value_.real_ == other.value_.real_;
    %%%%%: 2971-block  0
    #####: 2972:  case booleanValue:
    #####: 2973:    return value_.bool_ == other.value_.bool_;
    %%%%%: 2973-block  0
    #####: 2974:  case stringValue: {
    #####: 2975:    if ((value_.string_ == nullptr) || (other.value_.string_ == nullptr)) {
    %%%%%: 2975-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2975-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 2976:      return (value_.string_ == other.value_.string_);
    %%%%%: 2976-block  0
        -: 2977:    }
        -: 2978:    unsigned this_len;
        -: 2979:    unsigned other_len;
        -: 2980:    char const* this_str;
        -: 2981:    char const* other_str;
    #####: 2982:    decodePrefixedString(this->isAllocated(), this->value_.string_, &this_len,
    %%%%%: 2982-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 2983:                         &this_str);
    #####: 2984:    decodePrefixedString(other.isAllocated(), other.value_.string_, &other_len,
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 2985:                         &other_str);
    #####: 2986:    if (this_len != other_len)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 2987:      return false;
    %%%%%: 2987-block  0
    #####: 2988:    JSON_ASSERT(this_str && other_str);
    %%%%%: 2988-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 2988-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2988-block  2
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 2988-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 2988-block  4
Aufruf  9 niemals ausgeführt
    $$$$$: 2988-block  5
Aufruf 10 niemals ausgeführt
    $$$$$: 2988-block  6
    $$$$$: 2988-block  7
    #####: 2989:    int comp = memcmp(this_str, other_str, this_len);
    #####: 2990:    return comp == 0;
    %%%%%: 2990-block  0
        -: 2991:  }
    #####: 2992:  case arrayValue:
        -: 2993:  case objectValue:
    #####: 2994:    return value_.map_->size() == other.value_.map_->size() &&
    %%%%%: 2994-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 2994-block  1
    %%%%%: 2994-block  2
    #####: 2995:           (*value_.map_) == (*other.value_.map_);
    %%%%%: 2995-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 2995-block  1
    #####: 2996:  default:
    #####: 2997:    JSON_ASSERT_UNREACHABLE;
    %%%%%: 2997-block  0
Aufruf  0 niemals ausgeführt
        -: 2998:  }
        -: 2999:  return false; // unreachable
        -: 3000:}
        -: 3001:
function _ZNK4Json5ValueneERKS0_ called 0 returned 0% blocks executed 0%
    #####: 3002:bool Value::operator!=(const Value& other) const { return !(*this == other); }
    %%%%%: 3002-block  0
Aufruf  0 niemals ausgeführt
        -: 3003:
function _ZNK4Json5Value9asCStringEv called 0 returned 0% blocks executed 0%
    #####: 3004:const char* Value::asCString() const {
    #####: 3005:  JSON_ASSERT_MESSAGE(type() == stringValue,
    %%%%%: 3005-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3005-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3005-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3005-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3005-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3005-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3005-block  6
    $$$$$: 3005-block  7
Aufruf 14 niemals ausgeführt
        -: 3006:                      "in Json::Value::asCString(): requires stringValue");
    #####: 3007:  if (value_.string_ == nullptr)
    %%%%%: 3007-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3008:    return nullptr;
    %%%%%: 3008-block  0
        -: 3009:  unsigned this_len;
        -: 3010:  char const* this_str;
    #####: 3011:  decodePrefixedString(this->isAllocated(), this->value_.string_, &this_len,
    %%%%%: 3011-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3012:                       &this_str);
    #####: 3013:  return this_str;
        -: 3014:}
        -: 3015:
        -: 3016:#if JSONCPP_USING_SECURE_MEMORY
        -: 3017:unsigned Value::getCStringLength() const {
        -: 3018:  JSON_ASSERT_MESSAGE(type() == stringValue,
        -: 3019:                      "in Json::Value::asCString(): requires stringValue");
        -: 3020:  if (value_.string_ == 0)
        -: 3021:    return 0;
        -: 3022:  unsigned this_len;
        -: 3023:  char const* this_str;
        -: 3024:  decodePrefixedString(this->isAllocated(), this->value_.string_, &this_len,
        -: 3025:                       &this_str);
        -: 3026:  return this_len;
        -: 3027:}
        -: 3028:#endif
        -: 3029:
function _ZNK4Json5Value9getStringEPPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3030:bool Value::getString(char const** begin, char const** end) const {
    #####: 3031:  if (type() != stringValue)
    %%%%%: 3031-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3032:    return false;
    %%%%%: 3032-block  0
    #####: 3033:  if (value_.string_ == nullptr)
    %%%%%: 3033-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3034:    return false;
    %%%%%: 3034-block  0
        -: 3035:  unsigned length;
    #####: 3036:  decodePrefixedString(this->isAllocated(), this->value_.string_, &length,
    %%%%%: 3036-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3037:                       begin);
    #####: 3038:  *end = *begin + length;
    #####: 3039:  return true;
        -: 3040:}
        -: 3041:
function _ZNK4Json5Value8asStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 3042:String Value::asString() const {
    #####: 3043:  switch (type()) {
    %%%%%: 3043-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 3044:  case nullValue:
    #####: 3045:    return "";
    %%%%%: 3045-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3045-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 3045-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 3045-block  3
Aufruf  6 niemals ausgeführt
    #####: 3046:  case stringValue: {
    #####: 3047:    if (value_.string_ == nullptr)
    %%%%%: 3047-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3048:      return "";
    %%%%%: 3048-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3048-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 3048-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 3048-block  3
        -: 3049:    unsigned this_len;
        -: 3050:    char const* this_str;
    #####: 3051:    decodePrefixedString(this->isAllocated(), this->value_.string_, &this_len,
    %%%%%: 3051-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3052:                         &this_str);
    #####: 3053:    return String(this_str, this_len);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3053-block  0
Aufruf  4 niemals ausgeführt
    $$$$$: 3053-block  1
Aufruf  5 niemals ausgeführt
    $$$$$: 3053-block  2
        -: 3054:  }
    #####: 3055:  case booleanValue:
    #####: 3056:    return value_.bool_ ? "true" : "false";
    %%%%%: 3056-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3056-block  1
    %%%%%: 3056-block  2
    %%%%%: 3056-block  3
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3056-block  4
Aufruf  6 niemals ausgeführt
    $$$$$: 3056-block  5
Aufruf  7 niemals ausgeführt
    $$$$$: 3056-block  6
Aufruf  8 niemals ausgeführt
    #####: 3057:  case intValue:
    #####: 3058:    return valueToString(value_.int_);
    %%%%%: 3058-block  0
Aufruf  0 niemals ausgeführt
    #####: 3059:  case uintValue:
    #####: 3060:    return valueToString(value_.uint_);
    %%%%%: 3060-block  0
Aufruf  0 niemals ausgeführt
    #####: 3061:  case realValue:
    #####: 3062:    return valueToString(value_.real_);
    %%%%%: 3062-block  0
Aufruf  0 niemals ausgeführt
    #####: 3063:  default:
    #####: 3064:    JSON_FAIL_MESSAGE("Type is not convertible to string");
    %%%%%: 3064-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3064-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3064-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3064-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3064-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3064-block  5
    $$$$$: 3064-block  6
Aufruf 11 niemals ausgeführt
        -: 3065:  }
        -: 3066:}
        -: 3067:
function _ZNK4Json5Value5asIntEv called 0 returned 0% blocks executed 0%
    #####: 3068:Value::Int Value::asInt() const {
    #####: 3069:  switch (type()) {
    %%%%%: 3069-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3070:  case intValue:
    #####: 3071:    JSON_ASSERT_MESSAGE(isInt(), "LargestInt out of Int range");
    %%%%%: 3071-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3071-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3071-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3071-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3071-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3071-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3071-block  6
    $$$$$: 3071-block  7
Aufruf 14 niemals ausgeführt
    #####: 3072:    return Int(value_.int_);
    %%%%%: 3072-block  0
    #####: 3073:  case uintValue:
    #####: 3074:    JSON_ASSERT_MESSAGE(isInt(), "LargestUInt out of Int range");
    %%%%%: 3074-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3074-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3074-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3074-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3074-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3074-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3074-block  6
    $$$$$: 3074-block  7
Aufruf 14 niemals ausgeführt
    #####: 3075:    return Int(value_.uint_);
    %%%%%: 3075-block  0
    #####: 3076:  case realValue:
    #####: 3077:    JSON_ASSERT_MESSAGE(InRange(value_.real_, minInt, maxInt),
    %%%%%: 3077-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3077-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3077-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3077-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3077-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3077-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3077-block  6
    $$$$$: 3077-block  7
Aufruf 14 niemals ausgeführt
        -: 3078:                        "double out of Int range");
    #####: 3079:    return Int(value_.real_);
    %%%%%: 3079-block  0
    #####: 3080:  case nullValue:
    #####: 3081:    return 0;
    %%%%%: 3081-block  0
    #####: 3082:  case booleanValue:
    #####: 3083:    return value_.bool_ ? 1 : 0;
    %%%%%: 3083-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3083-block  1
    %%%%%: 3083-block  2
    %%%%%: 3083-block  3
    #####: 3084:  default:
    #####: 3085:    break;
    %%%%%: 3085-block  0
        -: 3086:  }
    #####: 3087:  JSON_FAIL_MESSAGE("Value is not convertible to Int.");
    %%%%%: 3087-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3087-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3087-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3087-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3087-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3087-block  5
    $$$$$: 3087-block  6
Aufruf 11 niemals ausgeführt
        -: 3088:}
        -: 3089:
function _ZNK4Json5Value6asUIntEv called 0 returned 0% blocks executed 0%
    #####: 3090:Value::UInt Value::asUInt() const {
    #####: 3091:  switch (type()) {
    %%%%%: 3091-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3092:  case intValue:
    #####: 3093:    JSON_ASSERT_MESSAGE(isUInt(), "LargestInt out of UInt range");
    %%%%%: 3093-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3093-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3093-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3093-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3093-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3093-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3093-block  6
    $$$$$: 3093-block  7
Aufruf 14 niemals ausgeführt
    #####: 3094:    return UInt(value_.int_);
    %%%%%: 3094-block  0
    #####: 3095:  case uintValue:
    #####: 3096:    JSON_ASSERT_MESSAGE(isUInt(), "LargestUInt out of UInt range");
    %%%%%: 3096-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3096-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3096-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3096-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3096-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3096-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3096-block  6
    $$$$$: 3096-block  7
Aufruf 14 niemals ausgeführt
    #####: 3097:    return UInt(value_.uint_);
    %%%%%: 3097-block  0
    #####: 3098:  case realValue:
    #####: 3099:    JSON_ASSERT_MESSAGE(InRange(value_.real_, 0, maxUInt),
    %%%%%: 3099-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3099-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3099-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3099-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3099-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3099-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3099-block  6
    $$$$$: 3099-block  7
Aufruf 14 niemals ausgeführt
        -: 3100:                        "double out of UInt range");
    #####: 3101:    return UInt(value_.real_);
    %%%%%: 3101-block  0
    #####: 3102:  case nullValue:
    #####: 3103:    return 0;
    %%%%%: 3103-block  0
    #####: 3104:  case booleanValue:
    #####: 3105:    return value_.bool_ ? 1 : 0;
    %%%%%: 3105-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3105-block  1
    %%%%%: 3105-block  2
    %%%%%: 3105-block  3
    #####: 3106:  default:
    #####: 3107:    break;
    %%%%%: 3107-block  0
        -: 3108:  }
    #####: 3109:  JSON_FAIL_MESSAGE("Value is not convertible to UInt.");
    %%%%%: 3109-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3109-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3109-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3109-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3109-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3109-block  5
    $$$$$: 3109-block  6
Aufruf 11 niemals ausgeführt
        -: 3110:}
        -: 3111:
        -: 3112:#if defined(JSON_HAS_INT64)
        -: 3113:
function _ZNK4Json5Value7asInt64Ev called 0 returned 0% blocks executed 0%
    #####: 3114:Value::Int64 Value::asInt64() const {
    #####: 3115:  switch (type()) {
    %%%%%: 3115-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3116:  case intValue:
    #####: 3117:    return Int64(value_.int_);
    %%%%%: 3117-block  0
    #####: 3118:  case uintValue:
    #####: 3119:    JSON_ASSERT_MESSAGE(isInt64(), "LargestUInt out of Int64 range");
    %%%%%: 3119-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3119-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3119-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3119-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3119-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3119-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3119-block  6
    $$$$$: 3119-block  7
Aufruf 14 niemals ausgeführt
    #####: 3120:    return Int64(value_.uint_);
    %%%%%: 3120-block  0
    #####: 3121:  case realValue:
    #####: 3122:    JSON_ASSERT_MESSAGE(InRange(value_.real_, minInt64, maxInt64),
    %%%%%: 3122-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3122-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3122-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3122-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3122-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3122-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3122-block  6
    $$$$$: 3122-block  7
Aufruf 14 niemals ausgeführt
        -: 3123:                        "double out of Int64 range");
    #####: 3124:    return Int64(value_.real_);
    %%%%%: 3124-block  0
    #####: 3125:  case nullValue:
    #####: 3126:    return 0;
    %%%%%: 3126-block  0
    #####: 3127:  case booleanValue:
    #####: 3128:    return value_.bool_ ? 1 : 0;
    %%%%%: 3128-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3128-block  1
    %%%%%: 3128-block  2
    %%%%%: 3128-block  3
    #####: 3129:  default:
    #####: 3130:    break;
    %%%%%: 3130-block  0
        -: 3131:  }
    #####: 3132:  JSON_FAIL_MESSAGE("Value is not convertible to Int64.");
    %%%%%: 3132-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3132-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3132-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3132-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3132-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3132-block  5
    $$$$$: 3132-block  6
Aufruf 11 niemals ausgeführt
        -: 3133:}
        -: 3134:
function _ZNK4Json5Value8asUInt64Ev called 0 returned 0% blocks executed 0%
    #####: 3135:Value::UInt64 Value::asUInt64() const {
    #####: 3136:  switch (type()) {
    %%%%%: 3136-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3137:  case intValue:
    #####: 3138:    JSON_ASSERT_MESSAGE(isUInt64(), "LargestInt out of UInt64 range");
    %%%%%: 3138-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3138-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3138-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3138-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3138-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3138-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3138-block  6
    $$$$$: 3138-block  7
Aufruf 14 niemals ausgeführt
    #####: 3139:    return UInt64(value_.int_);
    %%%%%: 3139-block  0
    #####: 3140:  case uintValue:
    #####: 3141:    return UInt64(value_.uint_);
    %%%%%: 3141-block  0
    #####: 3142:  case realValue:
    #####: 3143:    JSON_ASSERT_MESSAGE(InRange(value_.real_, 0, maxUInt64),
    %%%%%: 3143-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3143-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3143-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3143-block  3
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 3143-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3143-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3143-block  6
    $$$$$: 3143-block  7
Aufruf 14 niemals ausgeführt
        -: 3144:                        "double out of UInt64 range");
    #####: 3145:    return UInt64(value_.real_);
    %%%%%: 3145-block  0
    #####: 3146:  case nullValue:
    #####: 3147:    return 0;
    %%%%%: 3147-block  0
    #####: 3148:  case booleanValue:
    #####: 3149:    return value_.bool_ ? 1 : 0;
    %%%%%: 3149-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3149-block  1
    %%%%%: 3149-block  2
    %%%%%: 3149-block  3
    #####: 3150:  default:
    #####: 3151:    break;
    %%%%%: 3151-block  0
        -: 3152:  }
    #####: 3153:  JSON_FAIL_MESSAGE("Value is not convertible to UInt64.");
    %%%%%: 3153-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3153-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3153-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3153-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3153-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3153-block  5
    $$$$$: 3153-block  6
Aufruf 11 niemals ausgeführt
        -: 3154:}
        -: 3155:#endif // if defined(JSON_HAS_INT64)
        -: 3156:
function _ZNK4Json5Value12asLargestIntEv called 0 returned 0% blocks executed 0%
    #####: 3157:LargestInt Value::asLargestInt() const {
        -: 3158:#if defined(JSON_NO_INT64)
        -: 3159:  return asInt();
        -: 3160:#else
    #####: 3161:  return asInt64();
    %%%%%: 3161-block  0
Aufruf  0 niemals ausgeführt
        -: 3162:#endif
        -: 3163:}
        -: 3164:
function _ZNK4Json5Value13asLargestUIntEv called 0 returned 0% blocks executed 0%
    #####: 3165:LargestUInt Value::asLargestUInt() const {
        -: 3166:#if defined(JSON_NO_INT64)
        -: 3167:  return asUInt();
        -: 3168:#else
    #####: 3169:  return asUInt64();
    %%%%%: 3169-block  0
Aufruf  0 niemals ausgeführt
        -: 3170:#endif
        -: 3171:}
        -: 3172:
function _ZNK4Json5Value8asDoubleEv called 0 returned 0% blocks executed 0%
    #####: 3173:double Value::asDouble() const {
    #####: 3174:  switch (type()) {
    %%%%%: 3174-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3175:  case intValue:
    #####: 3176:    return static_cast<double>(value_.int_);
    %%%%%: 3176-block  0
    #####: 3177:  case uintValue:
        -: 3178:#if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
        -: 3179:    return static_cast<double>(value_.uint_);
        -: 3180:#else  // if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
    #####: 3181:    return integerToDouble(value_.uint_);
    %%%%%: 3181-block  0
Aufruf  0 niemals ausgeführt
        -: 3182:#endif // if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
    #####: 3183:  case realValue:
    #####: 3184:    return value_.real_;
    %%%%%: 3184-block  0
    #####: 3185:  case nullValue:
    #####: 3186:    return 0.0;
    %%%%%: 3186-block  0
    #####: 3187:  case booleanValue:
    #####: 3188:    return value_.bool_ ? 1.0 : 0.0;
    %%%%%: 3188-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3188-block  1
    %%%%%: 3188-block  2
    %%%%%: 3188-block  3
    #####: 3189:  default:
    #####: 3190:    break;
    %%%%%: 3190-block  0
        -: 3191:  }
    #####: 3192:  JSON_FAIL_MESSAGE("Value is not convertible to double.");
    %%%%%: 3192-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3192-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3192-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3192-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3192-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3192-block  5
    $$$$$: 3192-block  6
Aufruf 11 niemals ausgeführt
        -: 3193:}
        -: 3194:
function _ZNK4Json5Value7asFloatEv called 0 returned 0% blocks executed 0%
    #####: 3195:float Value::asFloat() const {
    #####: 3196:  switch (type()) {
    %%%%%: 3196-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3197:  case intValue:
    #####: 3198:    return static_cast<float>(value_.int_);
    %%%%%: 3198-block  0
    #####: 3199:  case uintValue:
        -: 3200:#if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
        -: 3201:    return static_cast<float>(value_.uint_);
        -: 3202:#else  // if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
        -: 3203:    // This can fail (silently?) if the value is bigger than MAX_FLOAT.
    #####: 3204:    return static_cast<float>(integerToDouble(value_.uint_));
    %%%%%: 3204-block  0
Aufruf  0 niemals ausgeführt
        -: 3205:#endif // if !defined(JSON_USE_INT64_DOUBLE_CONVERSION)
    #####: 3206:  case realValue:
    #####: 3207:    return static_cast<float>(value_.real_);
    %%%%%: 3207-block  0
    #####: 3208:  case nullValue:
    #####: 3209:    return 0.0;
    %%%%%: 3209-block  0
    #####: 3210:  case booleanValue:
    #####: 3211:    return value_.bool_ ? 1.0F : 0.0F;
    %%%%%: 3211-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3211-block  1
    %%%%%: 3211-block  2
    %%%%%: 3211-block  3
    #####: 3212:  default:
    #####: 3213:    break;
    %%%%%: 3213-block  0
        -: 3214:  }
    #####: 3215:  JSON_FAIL_MESSAGE("Value is not convertible to float.");
    %%%%%: 3215-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3215-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3215-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3215-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3215-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3215-block  5
    $$$$$: 3215-block  6
Aufruf 11 niemals ausgeführt
        -: 3216:}
        -: 3217:
function _ZNK4Json5Value6asBoolEv called 0 returned 0% blocks executed 0%
    #####: 3218:bool Value::asBool() const {
    #####: 3219:  switch (type()) {
    %%%%%: 3219-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3220:  case booleanValue:
    #####: 3221:    return value_.bool_;
    %%%%%: 3221-block  0
    #####: 3222:  case nullValue:
    #####: 3223:    return false;
    %%%%%: 3223-block  0
    #####: 3224:  case intValue:
    #####: 3225:    return value_.int_ != 0;
    %%%%%: 3225-block  0
    #####: 3226:  case uintValue:
    #####: 3227:    return value_.uint_ != 0;
    %%%%%: 3227-block  0
    #####: 3228:  case realValue: {
        -: 3229:    // According to JavaScript language zero or NaN is regarded as false
    #####: 3230:    const auto value_classification = std::fpclassify(value_.real_);
    %%%%%: 3230-block  0
Aufruf  0 niemals ausgeführt
    #####: 3231:    return value_classification != FP_ZERO && value_classification != FP_NAN;
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3231-block  0
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3231-block  1
    %%%%%: 3231-block  2
    %%%%%: 3231-block  3
        -: 3232:  }
    #####: 3233:  default:
    #####: 3234:    break;
    %%%%%: 3234-block  0
        -: 3235:  }
    #####: 3236:  JSON_FAIL_MESSAGE("Value is not convertible to bool.");
    %%%%%: 3236-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3236-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3236-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3236-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 3236-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 3236-block  5
    $$$$$: 3236-block  6
Aufruf 11 niemals ausgeführt
        -: 3237:}
        -: 3238:
function _ZNK4Json5Value15isConvertibleToENS_9ValueTypeE called 0 returned 0% blocks executed 0%
    #####: 3239:bool Value::isConvertibleTo(ValueType other) const {
    #####: 3240:  switch (other) {
    %%%%%: 3240-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####: 3241:  case nullValue:
    #####: 3242:    return (isNumeric() && asDouble() == 0.0) ||
    %%%%%: 3242-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3242-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3243:           (type() == booleanValue && !value_.bool_) ||
    %%%%%: 3243-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3243-block  1
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3244:           (type() == stringValue && asString().empty()) ||
    %%%%%: 3244-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3244-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3244-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3244-block  3
Aufruf  9 niemals ausgeführt
    %%%%%: 3244-block  4
    $$$$$: 3244-block  5
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    $$$$$: 3244-block  6
Aufruf 12 niemals ausgeführt
    #####: 3245:           (type() == arrayValue && value_.map_->empty()) ||
    %%%%%: 3245-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3245-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3246:           (type() == objectValue && value_.map_->empty()) ||
    %%%%%: 3246-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3246-block  1
Aufruf  3 niemals ausgeführt
    %%%%%: 3246-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3246-block  3
    %%%%%: 3246-block  4
    #####: 3247:           type() == nullValue;
    %%%%%: 3247-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3247-block  1
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3248:  case intValue:
    #####: 3249:    return isInt() ||
    %%%%%: 3249-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3250:           (type() == realValue && InRange(value_.real_, minInt, maxInt)) ||
    %%%%%: 3250-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3250-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3251:           type() == booleanValue || type() == nullValue;
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3251-block  0
Aufruf  2 niemals ausgeführt
    %%%%%: 3251-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3251-block  2
    %%%%%: 3251-block  3
    %%%%%: 3251-block  4
    #####: 3252:  case uintValue:
    #####: 3253:    return isUInt() ||
    %%%%%: 3253-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3254:           (type() == realValue && InRange(value_.real_, 0, maxUInt)) ||
    %%%%%: 3254-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3254-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3255:           type() == booleanValue || type() == nullValue;
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3255-block  0
Aufruf  2 niemals ausgeführt
    %%%%%: 3255-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3255-block  2
    %%%%%: 3255-block  3
    %%%%%: 3255-block  4
    #####: 3256:  case realValue:
    #####: 3257:    return isNumeric() || type() == booleanValue || type() == nullValue;
    %%%%%: 3257-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3257-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3257-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3257-block  3
    %%%%%: 3257-block  4
    %%%%%: 3257-block  5
    #####: 3258:  case booleanValue:
    #####: 3259:    return isNumeric() || type() == booleanValue || type() == nullValue;
    %%%%%: 3259-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3259-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3259-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3259-block  3
    %%%%%: 3259-block  4
    %%%%%: 3259-block  5
    #####: 3260:  case stringValue:
    #####: 3261:    return isNumeric() || type() == booleanValue || type() == stringValue ||
    %%%%%: 3261-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3261-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3261-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3261-block  3
    %%%%%: 3261-block  4
    #####: 3262:           type() == nullValue;
    %%%%%: 3262-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3262-block  1
    #####: 3263:  case arrayValue:
    #####: 3264:    return type() == arrayValue || type() == nullValue;
    %%%%%: 3264-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3264-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3264-block  2
    %%%%%: 3264-block  3
    %%%%%: 3264-block  4
    #####: 3265:  case objectValue:
    #####: 3266:    return type() == objectValue || type() == nullValue;
    %%%%%: 3266-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3266-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3266-block  2
    %%%%%: 3266-block  3
    %%%%%: 3266-block  4
        -: 3267:  }
    #####: 3268:  JSON_ASSERT_UNREACHABLE;
    %%%%%: 3268-block  0
Aufruf  0 niemals ausgeführt
        -: 3269:  return false;
        -: 3270:}
        -: 3271:
        -: 3272:/// Number of values in array or object
function _ZNK4Json5Value4sizeEv called 0 returned 0% blocks executed 0%
    #####: 3273:ArrayIndex Value::size() const {
    #####: 3274:  switch (type()) {
    %%%%%: 3274-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3275:  case nullValue:
        -: 3276:  case intValue:
        -: 3277:  case uintValue:
        -: 3278:  case realValue:
        -: 3279:  case booleanValue:
        -: 3280:  case stringValue:
    #####: 3281:    return 0;
    %%%%%: 3281-block  0
    #####: 3282:  case arrayValue: // size of the array is highest index + 1
    #####: 3283:    if (!value_.map_->empty()) {
    %%%%%: 3283-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3284:      ObjectValues::const_iterator itLast = value_.map_->end();
    %%%%%: 3284-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3285:      --itLast;
Aufruf  0 niemals ausgeführt
    #####: 3286:      return (*itLast).first.index() + 1;
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3287:    }
    #####: 3288:    return 0;
    %%%%%: 3288-block  0
    #####: 3289:  case objectValue:
    #####: 3290:    return ArrayIndex(value_.map_->size());
    %%%%%: 3290-block  0
Aufruf  0 niemals ausgeführt
        -: 3291:  }
    #####: 3292:  JSON_ASSERT_UNREACHABLE;
    %%%%%: 3292-block  0
Aufruf  0 niemals ausgeführt
        -: 3293:  return 0; // unreachable;
        -: 3294:}
        -: 3295:
function _ZNK4Json5Value5emptyEv called 0 returned 0% blocks executed 0%
    #####: 3296:bool Value::empty() const {
    #####: 3297:  if (isNull() || isArray() || isObject())
    %%%%%: 3297-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3297-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3297-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3297-block  3
    %%%%%: 3297-block  4
    %%%%%: 3297-block  5
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    #####: 3298:    return size() == 0U;
    %%%%%: 3298-block  0
Aufruf  0 niemals ausgeführt
    #####: 3299:  return false;
    %%%%%: 3299-block  0
        -: 3300:}
        -: 3301:
function _ZNK4Json5ValuecvbEv called 0 returned 0% blocks executed 0%
    #####: 3302:Value::operator bool() const { return !isNull(); }
    %%%%%: 3302-block  0
Aufruf  0 niemals ausgeführt
        -: 3303:
function _ZN4Json5Value5clearEv called 0 returned 0% blocks executed 0%
    #####: 3304:void Value::clear() {
    #####: 3305:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == arrayValue ||
    %%%%%: 3305-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3305-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3305-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3305-block  3
    %%%%%: 3305-block  4
    %%%%%: 3305-block  5
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3305-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3305-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3305-block  8
Aufruf 17 niemals ausgeführt
Zweig 18 niemals ausgeführt
Zweig 19 niemals ausgeführt
    %%%%%: 3305-block  9
Aufruf 20 niemals ausgeführt
    $$$$$: 3305-block 10
Aufruf 21 niemals ausgeführt
    $$$$$: 3305-block 11
    $$$$$: 3305-block 12
Aufruf 22 niemals ausgeführt
        -: 3306:                          type() == objectValue,
        -: 3307:                      "in Json::Value::clear(): requires complex value");
    #####: 3308:  start_ = 0;
    #####: 3309:  limit_ = 0;
    #####: 3310:  switch (type()) {
    %%%%%: 3310-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3311:  case arrayValue:
        -: 3312:  case objectValue:
    #####: 3313:    value_.map_->clear();
    %%%%%: 3313-block  0
Aufruf  0 niemals ausgeführt
    #####: 3314:    break;
    #####: 3315:  default:
    #####: 3316:    break;
    %%%%%: 3316-block  0
        -: 3317:  }
    #####: 3318:}
    %%%%%: 3318-block  0
        -: 3319:
function _ZN4Json5Value6resizeEj called 0 returned 0% blocks executed 0%
    #####: 3320:void Value::resize(ArrayIndex newSize) {
    #####: 3321:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == arrayValue,
    %%%%%: 3321-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3321-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3321-block  2
    %%%%%: 3321-block  3
    %%%%%: 3321-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3321-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3321-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3321-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3321-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3321-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3321-block 10
    $$$$$: 3321-block 11
Aufruf 19 niemals ausgeführt
        -: 3322:                      "in Json::Value::resize(): requires arrayValue");
    #####: 3323:  if (type() == nullValue)
    %%%%%: 3323-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3324:    *this = Value(arrayValue);
    %%%%%: 3324-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3324-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 3324-block  2
Aufruf  5 niemals ausgeführt
    #####: 3325:  ArrayIndex oldSize = size();
    %%%%%: 3325-block  0
Aufruf  0 niemals ausgeführt
    #####: 3326:  if (newSize == 0)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3327:    clear();
    %%%%%: 3327-block  0
Aufruf  0 niemals ausgeführt
    #####: 3328:  else if (newSize > oldSize)
    %%%%%: 3328-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3329:    for (ArrayIndex i = oldSize; i < newSize; ++i)
    %%%%%: 3329-block  0
    %%%%%: 3329-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3330:      (*this)[i];
    %%%%%: 3330-block  0
Aufruf  0 niemals ausgeführt
        -: 3331:  else {
    #####: 3332:    for (ArrayIndex index = newSize; index < oldSize; ++index) {
    %%%%%: 3332-block  0
    %%%%%: 3332-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3333:      value_.map_->erase(index);
    %%%%%: 3333-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3333-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 3333-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 3333-block  3
Aufruf  6 niemals ausgeführt
        -: 3334:    }
    #####: 3335:    JSON_ASSERT(size() == newSize);
    %%%%%: 3335-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3335-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 3335-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 3335-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 3335-block  4
Aufruf  9 niemals ausgeführt
    $$$$$: 3335-block  5
        -: 3336:  }
    #####: 3337:}
    %%%%%: 3337-block  0
        -: 3338:
function _ZN4Json5ValueixEj called 0 returned 0% blocks executed 0%
    #####: 3339:Value& Value::operator[](ArrayIndex index) {
    #####: 3340:  JSON_ASSERT_MESSAGE(
    %%%%%: 3340-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3340-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3340-block  2
    %%%%%: 3340-block  3
    %%%%%: 3340-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3340-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3340-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3340-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3340-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3340-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3340-block 10
    $$$$$: 3340-block 11
Aufruf 19 niemals ausgeführt
        -: 3341:      type() == nullValue || type() == arrayValue,
        -: 3342:      "in Json::Value::operator[](ArrayIndex): requires arrayValue");
    #####: 3343:  if (type() == nullValue)
    %%%%%: 3343-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3344:    *this = Value(arrayValue);
    %%%%%: 3344-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3344-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 3344-block  2
    #####: 3345:  CZString key(index);
    %%%%%: 3345-block  0
Aufruf  0 niemals ausgeführt
    #####: 3346:  auto it = value_.map_->lower_bound(key);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3347:  if (it != value_.map_->end() && (*it).first == key)
    %%%%%: 3347-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3347-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3347-block  2
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%: 3347-block  3
    %%%%%: 3347-block  4
    %%%%%: 3347-block  5
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    $$$$$: 3347-block  6
    #####: 3348:    return (*it).second;
    %%%%%: 3348-block  0
Aufruf  0 niemals ausgeführt
        -: 3349:
    #####: 3350:  ObjectValues::value_type defaultValue(key, nullSingleton());
    %%%%%: 3350-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3350-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3351:  it = value_.map_->insert(it, defaultValue);
    %%%%%: 3351-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    $$$$$: 3351-block  1
    #####: 3352:  return (*it).second;
    %%%%%: 3352-block  0
Aufruf  0 niemals ausgeführt
    #####: 3353:}
Aufruf  0 niemals ausgeführt
    %%%%%: 3353-block  0
Aufruf  1 niemals ausgeführt
    $$$$$: 3353-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 3353-block  2
Aufruf  3 niemals ausgeführt
        -: 3354:
function _ZN4Json5ValueixEi called 0 returned 0% blocks executed 0%
    #####: 3355:Value& Value::operator[](int index) {
    #####: 3356:  JSON_ASSERT_MESSAGE(
    %%%%%: 3356-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3356-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 3356-block  2
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3356-block  3
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3356-block  4
Aufruf 11 niemals ausgeführt
    $$$$$: 3356-block  5
Aufruf 12 niemals ausgeführt
    $$$$$: 3356-block  6
    $$$$$: 3356-block  7
Aufruf 13 niemals ausgeführt
        -: 3357:      index >= 0,
        -: 3358:      "in Json::Value::operator[](int index): index cannot be negative");
    #####: 3359:  return (*this)[ArrayIndex(index)];
    %%%%%: 3359-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3359-block  1
        -: 3360:}
        -: 3361:
function _ZNK4Json5ValueixEj called 0 returned 0% blocks executed 0%
    #####: 3362:const Value& Value::operator[](ArrayIndex index) const {
    #####: 3363:  JSON_ASSERT_MESSAGE(
    %%%%%: 3363-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3363-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3363-block  2
    %%%%%: 3363-block  3
    %%%%%: 3363-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3363-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3363-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3363-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3363-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3363-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3363-block 10
    $$$$$: 3363-block 11
Aufruf 19 niemals ausgeführt
        -: 3364:      type() == nullValue || type() == arrayValue,
        -: 3365:      "in Json::Value::operator[](ArrayIndex)const: requires arrayValue");
    #####: 3366:  if (type() == nullValue)
    %%%%%: 3366-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3367:    return nullSingleton();
    %%%%%: 3367-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3367-block  1
    #####: 3368:  CZString key(index);
    %%%%%: 3368-block  0
Aufruf  0 niemals ausgeführt
    #####: 3369:  ObjectValues::const_iterator it = value_.map_->find(key);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3369-block  0
Aufruf  3 niemals ausgeführt
    $$$$$: 3369-block  1
    #####: 3370:  if (it == value_.map_->end())
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3371:    return nullSingleton();
    %%%%%: 3371-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3371-block  1
    #####: 3372:  return (*it).second;
    %%%%%: 3372-block  0
Aufruf  0 niemals ausgeführt
    #####: 3373:}
    %%%%%: 3373-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3373-block  1
Aufruf  1 niemals ausgeführt
        -: 3374:
function _ZNK4Json5ValueixEi called 0 returned 0% blocks executed 0%
    #####: 3375:const Value& Value::operator[](int index) const {
    #####: 3376:  JSON_ASSERT_MESSAGE(
    %%%%%: 3376-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3376-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 3376-block  2
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3376-block  3
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3376-block  4
Aufruf 11 niemals ausgeführt
    $$$$$: 3376-block  5
Aufruf 12 niemals ausgeführt
    $$$$$: 3376-block  6
    $$$$$: 3376-block  7
Aufruf 13 niemals ausgeführt
        -: 3377:      index >= 0,
        -: 3378:      "in Json::Value::operator[](int index) const: index cannot be negative");
    #####: 3379:  return (*this)[ArrayIndex(index)];
    %%%%%: 3379-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3379-block  1
        -: 3380:}
        -: 3381:
function _ZN4Json5Value9initBasicENS_9ValueTypeEb called 1 returned 100% blocks executed 100%
        1: 3382:void Value::initBasic(ValueType type, bool allocated) {
        1: 3383:  setType(type);
        1: 3383-block  0
Aufruf  0 gab 1 zurück
        1: 3384:  setIsAllocated(allocated);
Aufruf  0 gab 1 zurück
        1: 3385:  comments_ = Comments{};
Aufruf  0 gab 1 zurück
Aufruf  1 gab 1 zurück
Aufruf  2 gab 1 zurück
        1: 3386:  start_ = 0;
        1: 3387:  limit_ = 0;
        1: 3388:}
        -: 3389:
function _ZN4Json5Value10dupPayloadERKS0_ called 0 returned 0% blocks executed 0%
    #####: 3390:void Value::dupPayload(const Value& other) {
    #####: 3391:  setType(other.type());
    %%%%%: 3391-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3392:  setIsAllocated(false);
Aufruf  0 niemals ausgeführt
    #####: 3393:  switch (type()) {
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3394:  case nullValue:
        -: 3395:  case intValue:
        -: 3396:  case uintValue:
        -: 3397:  case realValue:
        -: 3398:  case booleanValue:
    #####: 3399:    value_ = other.value_;
    #####: 3400:    break;
    %%%%%: 3400-block  0
    #####: 3401:  case stringValue:
    #####: 3402:    if (other.value_.string_ && other.isAllocated()) {
    %%%%%: 3402-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3402-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 3402-block  2
    %%%%%: 3402-block  3
    %%%%%: 3402-block  4
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
        -: 3403:      unsigned len;
        -: 3404:      char const* str;
    #####: 3405:      decodePrefixedString(other.isAllocated(), other.value_.string_, &len,
    %%%%%: 3405-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3406:                           &str);
    #####: 3407:      value_.string_ = duplicateAndPrefixStringValue(str, len);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3408:      setIsAllocated(true);
    %%%%%: 3408-block  0
Aufruf  0 niemals ausgeführt
        -: 3409:    } else {
    #####: 3410:      value_.string_ = other.value_.string_;
    %%%%%: 3410-block  0
        -: 3411:    }
    #####: 3412:    break;
    %%%%%: 3412-block  0
    #####: 3413:  case arrayValue:
        -: 3414:  case objectValue:
    #####: 3415:    value_.map_ = new ObjectValues(*other.value_.map_);
    %%%%%: 3415-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    $$$$$: 3415-block  1
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    $$$$$: 3415-block  2
Aufruf  6 niemals ausgeführt
    #####: 3416:    break;
    %%%%%: 3416-block  0
    #####: 3417:  default:
    #####: 3418:    JSON_ASSERT_UNREACHABLE;
    %%%%%: 3418-block  0
Aufruf  0 niemals ausgeführt
        -: 3419:  }
    #####: 3420:}
    %%%%%: 3420-block  0
        -: 3421:
function _ZN4Json5Value14releasePayloadEv called 1 returned 100% blocks executed 31%
        1: 3422:void Value::releasePayload() {
        1: 3423:  switch (type()) {
        1: 3423-block  0
Aufruf  0 gab 1 zurück
Zweig  1 wurde genommen: 1
Zweig  2 wurde genommen: 0
Zweig  3 wurde genommen: 0
Zweig  4 wurde genommen: 0
        1: 3424:  case nullValue:
        -: 3425:  case intValue:
        -: 3426:  case uintValue:
        -: 3427:  case realValue:
        -: 3428:  case booleanValue:
        1: 3429:    break;
        1: 3429-block  0
    #####: 3430:  case stringValue:
    #####: 3431:    if (isAllocated())
    %%%%%: 3431-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3432:      releasePrefixedStringValue(value_.string_);
    %%%%%: 3432-block  0
Aufruf  0 niemals ausgeführt
    #####: 3433:    break;
    %%%%%: 3433-block  0
    #####: 3434:  case arrayValue:
        -: 3435:  case objectValue:
    #####: 3436:    delete value_.map_;
    %%%%%: 3436-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3436-block  1
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
    #####: 3437:    break;
    %%%%%: 3437-block  0
    #####: 3438:  default:
    #####: 3439:    JSON_ASSERT_UNREACHABLE;
    %%%%%: 3439-block  0
Aufruf  0 niemals ausgeführt
        -: 3440:  }
        1: 3441:}
        -: 3442:
function _ZN4Json5Value7dupMetaERKS0_ called 0 returned 0% blocks executed 0%
    #####: 3443:void Value::dupMeta(const Value& other) {
    #####: 3444:  comments_ = other.comments_;
    %%%%%: 3444-block  0
Aufruf  0 niemals ausgeführt
    #####: 3445:  start_ = other.start_;
    #####: 3446:  limit_ = other.limit_;
    #####: 3447:}
        -: 3448:
        -: 3449:// Access an object value by name, create a null member if it does not exist.
        -: 3450:// @pre Type of '*this' is object or null.
        -: 3451:// @param key is null-terminated.
function _ZN4Json5Value16resolveReferenceEPKc called 0 returned 0% blocks executed 0%
    #####: 3452:Value& Value::resolveReference(const char* key) {
    #####: 3453:  JSON_ASSERT_MESSAGE(
    %%%%%: 3453-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3453-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3453-block  2
    %%%%%: 3453-block  3
    %%%%%: 3453-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3453-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3453-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3453-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3453-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3453-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3453-block 10
    $$$$$: 3453-block 11
Aufruf 19 niemals ausgeführt
        -: 3454:      type() == nullValue || type() == objectValue,
        -: 3455:      "in Json::Value::resolveReference(): requires objectValue");
    #####: 3456:  if (type() == nullValue)
    %%%%%: 3456-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3457:    *this = Value(objectValue);
    %%%%%: 3457-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3457-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 3457-block  2
    #####: 3458:  CZString actualKey(key, static_cast<unsigned>(strlen(key)),
    #####: 3459:                     CZString::noDuplication); // NOTE!
    %%%%%: 3459-block  0
Aufruf  0 niemals ausgeführt
    #####: 3460:  auto it = value_.map_->lower_bound(actualKey);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3461:  if (it != value_.map_->end() && (*it).first == actualKey)
    %%%%%: 3461-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3461-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3461-block  2
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%: 3461-block  3
    %%%%%: 3461-block  4
    %%%%%: 3461-block  5
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    $$$$$: 3461-block  6
    #####: 3462:    return (*it).second;
    %%%%%: 3462-block  0
Aufruf  0 niemals ausgeführt
        -: 3463:
    #####: 3464:  ObjectValues::value_type defaultValue(actualKey, nullSingleton());
    %%%%%: 3464-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3464-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3465:  it = value_.map_->insert(it, defaultValue);
    %%%%%: 3465-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    $$$$$: 3465-block  1
    #####: 3466:  Value& value = (*it).second;
    %%%%%: 3466-block  0
Aufruf  0 niemals ausgeführt
    #####: 3467:  return value;
    #####: 3468:}
Aufruf  0 niemals ausgeführt
    %%%%%: 3468-block  0
Aufruf  1 niemals ausgeführt
    $$$$$: 3468-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 3468-block  2
Aufruf  3 niemals ausgeführt
        -: 3469:
        -: 3470:// @param key is not null-terminated.
function _ZN4Json5Value16resolveReferenceEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 3471:Value& Value::resolveReference(char const* key, char const* end) {
    #####: 3472:  JSON_ASSERT_MESSAGE(
    %%%%%: 3472-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3472-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3472-block  2
    %%%%%: 3472-block  3
    %%%%%: 3472-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3472-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3472-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3472-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3472-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3472-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3472-block 10
    $$$$$: 3472-block 11
Aufruf 19 niemals ausgeführt
        -: 3473:      type() == nullValue || type() == objectValue,
        -: 3474:      "in Json::Value::resolveReference(key, end): requires objectValue");
    #####: 3475:  if (type() == nullValue)
    %%%%%: 3475-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3476:    *this = Value(objectValue);
    %%%%%: 3476-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3476-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 3476-block  2
    #####: 3477:  CZString actualKey(key, static_cast<unsigned>(end - key),
    #####: 3478:                     CZString::duplicateOnCopy);
    %%%%%: 3478-block  0
Aufruf  0 niemals ausgeführt
    #####: 3479:  auto it = value_.map_->lower_bound(actualKey);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3480:  if (it != value_.map_->end() && (*it).first == actualKey)
    %%%%%: 3480-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3480-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3480-block  2
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%: 3480-block  3
    %%%%%: 3480-block  4
    %%%%%: 3480-block  5
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    $$$$$: 3480-block  6
    #####: 3481:    return (*it).second;
    %%%%%: 3481-block  0
Aufruf  0 niemals ausgeführt
        -: 3482:
    #####: 3483:  ObjectValues::value_type defaultValue(actualKey, nullSingleton());
    %%%%%: 3483-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3483-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3484:  it = value_.map_->insert(it, defaultValue);
    %%%%%: 3484-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    $$$$$: 3484-block  1
    #####: 3485:  Value& value = (*it).second;
    %%%%%: 3485-block  0
Aufruf  0 niemals ausgeführt
    #####: 3486:  return value;
    #####: 3487:}
Aufruf  0 niemals ausgeführt
    %%%%%: 3487-block  0
Aufruf  1 niemals ausgeführt
    $$$$$: 3487-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 3487-block  2
Aufruf  3 niemals ausgeführt
        -: 3488:
function _ZNK4Json5Value3getEjRKS0_ called 0 returned 0% blocks executed 0%
    #####: 3489:Value Value::get(ArrayIndex index, const Value& defaultValue) const {
    #####: 3490:  const Value* value = &((*this)[index]);
    %%%%%: 3490-block  0
Aufruf  0 niemals ausgeführt
    #####: 3491:  return value == &nullSingleton() ? defaultValue : *value;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3491-block  0
    %%%%%: 3491-block  1
    %%%%%: 3491-block  2
Aufruf  3 niemals ausgeführt
        -: 3492:}
        -: 3493:
function _ZNK4Json5Value12isValidIndexEj called 0 returned 0% blocks executed 0%
    #####: 3494:bool Value::isValidIndex(ArrayIndex index) const { return index < size(); }
    %%%%%: 3494-block  0
Aufruf  0 niemals ausgeführt
        -: 3495:
function _ZNK4Json5Value4findEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 3496:Value const* Value::find(char const* begin, char const* end) const {
    #####: 3497:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == objectValue,
    %%%%%: 3497-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3497-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3497-block  2
    %%%%%: 3497-block  3
    %%%%%: 3497-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3497-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3497-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3497-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3497-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3497-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3497-block 10
    $$$$$: 3497-block 11
Aufruf 19 niemals ausgeführt
        -: 3498:                      "in Json::Value::find(begin, end): requires "
        -: 3499:                      "objectValue or nullValue");
    #####: 3500:  if (type() == nullValue)
    %%%%%: 3500-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3501:    return nullptr;
    %%%%%: 3501-block  0
    #####: 3502:  CZString actualKey(begin, static_cast<unsigned>(end - begin),
    #####: 3503:                     CZString::noDuplication);
    %%%%%: 3503-block  0
Aufruf  0 niemals ausgeführt
    #####: 3504:  ObjectValues::const_iterator it = value_.map_->find(actualKey);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3504-block  0
Aufruf  3 niemals ausgeführt
    $$$$$: 3504-block  1
    #####: 3505:  if (it == value_.map_->end())
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3506:    return nullptr;
    %%%%%: 3506-block  0
    #####: 3507:  return &(*it).second;
    %%%%%: 3507-block  0
Aufruf  0 niemals ausgeführt
    #####: 3508:}
    %%%%%: 3508-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3508-block  1
Aufruf  1 niemals ausgeführt
function _ZN4Json5Value6demandEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 3509:Value* Value::demand(char const* begin, char const* end) {
    #####: 3510:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == objectValue,
    %%%%%: 3510-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3510-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3510-block  2
    %%%%%: 3510-block  3
    %%%%%: 3510-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3510-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3510-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3510-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3510-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3510-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3510-block 10
    $$$$$: 3510-block 11
Aufruf 19 niemals ausgeführt
        -: 3511:                      "in Json::Value::demand(begin, end): requires "
        -: 3512:                      "objectValue or nullValue");
    #####: 3513:  return &resolveReference(begin, end);
    %%%%%: 3513-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3513-block  1
        -: 3514:}
function _ZNK4Json5ValueixEPKc called 0 returned 0% blocks executed 0%
    #####: 3515:const Value& Value::operator[](const char* key) const {
    #####: 3516:  Value const* found = find(key, key + strlen(key));
    %%%%%: 3516-block  0
Aufruf  0 niemals ausgeführt
    #####: 3517:  if (!found)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3518:    return nullSingleton();
    %%%%%: 3518-block  0
Aufruf  0 niemals ausgeführt
    #####: 3519:  return *found;
    %%%%%: 3519-block  0
        -: 3520:}
function _ZNK4Json5ValueixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3521:Value const& Value::operator[](const String& key) const {
    #####: 3522:  Value const* found = find(key.data(), key.data() + key.length());
    %%%%%: 3522-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
    #####: 3523:  if (!found)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3524:    return nullSingleton();
    %%%%%: 3524-block  0
Aufruf  0 niemals ausgeführt
    #####: 3525:  return *found;
    %%%%%: 3525-block  0
        -: 3526:}
        -: 3527:
function _ZN4Json5ValueixEPKc called 0 returned 0% blocks executed 0%
    #####: 3528:Value& Value::operator[](const char* key) {
    #####: 3529:  return resolveReference(key, key + strlen(key));
    %%%%%: 3529-block  0
Aufruf  0 niemals ausgeführt
        -: 3530:}
        -: 3531:
function _ZN4Json5ValueixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3532:Value& Value::operator[](const String& key) {
    #####: 3533:  return resolveReference(key.data(), key.data() + key.length());
    %%%%%: 3533-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 3534:}
        -: 3535:
function _ZN4Json5ValueixERKNS_12StaticStringE called 0 returned 0% blocks executed 0%
    #####: 3536:Value& Value::operator[](const StaticString& key) {
    #####: 3537:  return resolveReference(key.c_str());
    %%%%%: 3537-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3538:}
        -: 3539:
function _ZN4Json5Value6appendERKS0_ called 0 returned 0% blocks executed 0%
    #####: 3540:Value& Value::append(const Value& value) { return append(Value(value)); }
    %%%%%: 3540-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3540-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3540-block  2
    %%%%%: 3540-block  3
Aufruf  6 niemals ausgeführt
    %%%%%: 3540-block  4
    $$$$$: 3540-block  5
Aufruf  7 niemals ausgeführt
        -: 3541:
function _ZN4Json5Value6appendEOS0_ called 0 returned 0% blocks executed 0%
    #####: 3542:Value& Value::append(Value&& value) {
    #####: 3543:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == arrayValue,
    %%%%%: 3543-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3543-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3543-block  2
    %%%%%: 3543-block  3
    %%%%%: 3543-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3543-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3543-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3543-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3543-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3543-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3543-block 10
    $$$$$: 3543-block 11
Aufruf 19 niemals ausgeführt
        -: 3544:                      "in Json::Value::append: requires arrayValue");
    #####: 3545:  if (type() == nullValue) {
    %%%%%: 3545-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3546:    *this = Value(arrayValue);
    %%%%%: 3546-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3546-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    $$$$$: 3546-block  2
Aufruf  5 niemals ausgeführt
        -: 3547:  }
    #####: 3548:  return this->value_.map_->emplace(size(), std::move(value)).first->second;
    %%%%%: 3548-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 3548-block  1
Aufruf  5 niemals ausgeführt
    %%%%%: 3548-block  2
    $$$$$: 3548-block  3
        -: 3549:}
        -: 3550:
function _ZN4Json5Value6insertEjRKS0_ called 0 returned 0% blocks executed 0%
    #####: 3551:bool Value::insert(ArrayIndex index, const Value& newValue) {
    #####: 3552:  return insert(index, Value(newValue));
    %%%%%: 3552-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3552-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3552-block  2
    %%%%%: 3552-block  3
Aufruf  6 niemals ausgeführt
    %%%%%: 3552-block  4
    $$$$$: 3552-block  5
Aufruf  7 niemals ausgeführt
        -: 3553:}
        -: 3554:
function _ZN4Json5Value6insertEjOS0_ called 0 returned 0% blocks executed 0%
    #####: 3555:bool Value::insert(ArrayIndex index, Value&& newValue) {
    #####: 3556:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == arrayValue,
    %%%%%: 3556-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3556-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3556-block  2
    %%%%%: 3556-block  3
    %%%%%: 3556-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3556-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3556-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3556-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3556-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3556-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3556-block 10
    $$$$$: 3556-block 11
Aufruf 19 niemals ausgeführt
        -: 3557:                      "in Json::Value::insert: requires arrayValue");
    #####: 3558:  ArrayIndex length = size();
    %%%%%: 3558-block  0
Aufruf  0 niemals ausgeführt
    #####: 3559:  if (index > length) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3560:    return false;
    %%%%%: 3560-block  0
        -: 3561:  }
    #####: 3562:  for (ArrayIndex i = length; i > index; i--) {
    %%%%%: 3562-block  0
    %%%%%: 3562-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3563:    (*this)[i] = std::move((*this)[i - 1]);
    %%%%%: 3563-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 3564:  }
    #####: 3565:  (*this)[index] = std::move(newValue);
    %%%%%: 3565-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    #####: 3566:  return true;
        -: 3567:}
        -: 3568:
function _ZNK4Json5Value3getEPKcS2_RKS0_ called 0 returned 0% blocks executed 0%
    #####: 3569:Value Value::get(char const* begin, char const* end,
        -: 3570:                 Value const& defaultValue) const {
    #####: 3571:  Value const* found = find(begin, end);
    %%%%%: 3571-block  0
Aufruf  0 niemals ausgeführt
    #####: 3572:  return !found ? defaultValue : *found;
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3572-block  0
    %%%%%: 3572-block  1
    %%%%%: 3572-block  2
Aufruf  2 niemals ausgeführt
        -: 3573:}
function _ZNK4Json5Value3getEPKcRKS0_ called 0 returned 0% blocks executed 0%
    #####: 3574:Value Value::get(char const* key, Value const& defaultValue) const {
    #####: 3575:  return get(key, key + strlen(key), defaultValue);
    %%%%%: 3575-block  0
Aufruf  0 niemals ausgeführt
        -: 3576:}
function _ZNK4Json5Value3getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS0_ called 0 returned 0% blocks executed 0%
    #####: 3577:Value Value::get(String const& key, Value const& defaultValue) const {
    #####: 3578:  return get(key.data(), key.data() + key.length(), defaultValue);
    %%%%%: 3578-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 3579:}
        -: 3580:
function _ZN4Json5Value12removeMemberEPKcS2_PS0_ called 0 returned 0% blocks executed 0%
    #####: 3581:bool Value::removeMember(const char* begin, const char* end, Value* removed) {
    #####: 3582:  if (type() != objectValue) {
    %%%%%: 3582-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3583:    return false;
    %%%%%: 3583-block  0
        -: 3584:  }
    #####: 3585:  CZString actualKey(begin, static_cast<unsigned>(end - begin),
    #####: 3586:                     CZString::noDuplication);
    %%%%%: 3586-block  0
Aufruf  0 niemals ausgeführt
    #####: 3587:  auto it = value_.map_->find(actualKey);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3588:  if (it == value_.map_->end())
    %%%%%: 3588-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3589:    return false;
    %%%%%: 3589-block  0
    #####: 3590:  if (removed)
    %%%%%: 3590-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3591:    *removed = std::move(it->second);
    %%%%%: 3591-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    #####: 3592:  value_.map_->erase(it);
    %%%%%: 3592-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3593:  return true;
    %%%%%: 3593-block  0
    #####: 3594:}
    %%%%%: 3594-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3594-block  1
Aufruf  1 niemals ausgeführt
function _ZN4Json5Value12removeMemberEPKcPS0_ called 0 returned 0% blocks executed 0%
    #####: 3595:bool Value::removeMember(const char* key, Value* removed) {
    #####: 3596:  return removeMember(key, key + strlen(key), removed);
    %%%%%: 3596-block  0
Aufruf  0 niemals ausgeführt
        -: 3597:}
function _ZN4Json5Value12removeMemberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS0_ called 0 returned 0% blocks executed 0%
    #####: 3598:bool Value::removeMember(String const& key, Value* removed) {
    #####: 3599:  return removeMember(key.data(), key.data() + key.length(), removed);
    %%%%%: 3599-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 3600:}
function _ZN4Json5Value12removeMemberEPKc called 0 returned 0% blocks executed 0%
    #####: 3601:void Value::removeMember(const char* key) {
    #####: 3602:  JSON_ASSERT_MESSAGE(type() == nullValue || type() == objectValue,
    %%%%%: 3602-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3602-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3602-block  2
    %%%%%: 3602-block  3
    %%%%%: 3602-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3602-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3602-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3602-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3602-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3602-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3602-block 10
    $$$$$: 3602-block 11
Aufruf 19 niemals ausgeführt
        -: 3603:                      "in Json::Value::removeMember(): requires objectValue");
    #####: 3604:  if (type() == nullValue)
    %%%%%: 3604-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3605:    return;
    %%%%%: 3605-block  0
        -: 3606:
    #####: 3607:  CZString actualKey(key, unsigned(strlen(key)), CZString::noDuplication);
    %%%%%: 3607-block  0
Aufruf  0 niemals ausgeführt
    #####: 3608:  value_.map_->erase(actualKey);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3609:}
    %%%%%: 3609-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3609-block  1
Aufruf  1 niemals ausgeführt
function _ZN4Json5Value12removeMemberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3610:void Value::removeMember(const String& key) { removeMember(key.c_str()); }
    %%%%%: 3610-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3611:
function _ZN4Json5Value11removeIndexEjPS0_ called 0 returned 0% blocks executed 0%
    #####: 3612:bool Value::removeIndex(ArrayIndex index, Value* removed) {
    #####: 3613:  if (type() != arrayValue) {
    %%%%%: 3613-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3614:    return false;
    %%%%%: 3614-block  0
        -: 3615:  }
    #####: 3616:  CZString key(index);
    %%%%%: 3616-block  0
Aufruf  0 niemals ausgeführt
    #####: 3617:  auto it = value_.map_->find(key);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3618:  if (it == value_.map_->end()) {
    %%%%%: 3618-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3619:    return false;
    %%%%%: 3619-block  0
        -: 3620:  }
    #####: 3621:  if (removed)
    %%%%%: 3621-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3622:    *removed = it->second;
    %%%%%: 3622-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3623:  ArrayIndex oldSize = size();
    %%%%%: 3623-block  0
Aufruf  0 niemals ausgeführt
        -: 3624:  // shift left all items left, into the place of the "removed"
    #####: 3625:  for (ArrayIndex i = index; i < (oldSize - 1); ++i) {
    %%%%%: 3625-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3626:    CZString keey(i);
    %%%%%: 3626-block  0
Aufruf  0 niemals ausgeführt
    #####: 3627:    (*value_.map_)[keey] = (*this)[i + 1];
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3627-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3627-block  1
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    #####: 3628:  }
    %%%%%: 3628-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3628-block  1
Aufruf  1 niemals ausgeführt
        -: 3629:  // erase the last one ("leftover")
    #####: 3630:  CZString keyLast(oldSize - 1);
    %%%%%: 3630-block  0
Aufruf  0 niemals ausgeführt
    #####: 3631:  auto itLast = value_.map_->find(keyLast);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3632:  value_.map_->erase(itLast);
    %%%%%: 3632-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3633:  return true;
    #####: 3634:}
    %%%%%: 3634-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3634-block  1
Aufruf  1 niemals ausgeführt
    $$$$$: 3634-block  2
Aufruf  2 niemals ausgeführt
    $$$$$: 3634-block  3
Aufruf  3 niemals ausgeführt
        -: 3635:
function _ZNK4Json5Value8isMemberEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 3636:bool Value::isMember(char const* begin, char const* end) const {
    #####: 3637:  Value const* value = find(begin, end);
    %%%%%: 3637-block  0
Aufruf  0 niemals ausgeführt
    #####: 3638:  return nullptr != value;
        -: 3639:}
function _ZNK4Json5Value8isMemberEPKc called 0 returned 0% blocks executed 0%
    #####: 3640:bool Value::isMember(char const* key) const {
    #####: 3641:  return isMember(key, key + strlen(key));
    %%%%%: 3641-block  0
Aufruf  0 niemals ausgeführt
        -: 3642:}
function _ZNK4Json5Value8isMemberERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3643:bool Value::isMember(String const& key) const {
    #####: 3644:  return isMember(key.data(), key.data() + key.length());
    %%%%%: 3644-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 3645:}
        -: 3646:
function _ZNK4Json5Value14getMemberNamesB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 3647:Value::Members Value::getMemberNames() const {
    #####: 3648:  JSON_ASSERT_MESSAGE(
    %%%%%: 3648-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3648-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3648-block  2
    %%%%%: 3648-block  3
    %%%%%: 3648-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3648-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3648-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3648-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3648-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3648-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3648-block 10
    $$$$$: 3648-block 11
Aufruf 19 niemals ausgeführt
        -: 3649:      type() == nullValue || type() == objectValue,
        -: 3650:      "in Json::Value::getMemberNames(), value must be objectValue");
    #####: 3651:  if (type() == nullValue)
    %%%%%: 3651-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3652:    return Value::Members();
    %%%%%: 3652-block  0
Aufruf  0 niemals ausgeführt
    #####: 3653:  Members members;
    %%%%%: 3653-block  0
Aufruf  0 niemals ausgeführt
    #####: 3654:  members.reserve(value_.map_->size());
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3655:  ObjectValues::const_iterator it = value_.map_->begin();
    %%%%%: 3655-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3656:  ObjectValues::const_iterator itEnd = value_.map_->end();
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3657:  for (; it != itEnd; ++it) {
    %%%%%: 3657-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3658:    members.push_back(String((*it).first.data(), (*it).first.length()));
    %%%%%: 3658-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3658-block  1
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3658-block  2
Aufruf 11 niemals ausgeführt
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
    $$$$$: 3658-block  3
Aufruf 14 niemals ausgeführt
    $$$$$: 3658-block  4
Aufruf 15 niemals ausgeführt
    $$$$$: 3658-block  5
    $$$$$: 3658-block  6
        -: 3659:  }
    #####: 3660:  return members;
    %%%%%: 3660-block  0
Aufruf  0 niemals ausgeführt
    #####: 3661:}
Aufruf  0 niemals ausgeführt
    $$$$$: 3661-block  0
Aufruf  1 niemals ausgeführt
        -: 3662:
function _ZN4JsonL10IsIntegralEd called 0 returned 0% blocks executed 0%
    #####: 3663:static bool IsIntegral(double d) {
        -: 3664:  double integral_part;
    #####: 3665:  return modf(d, &integral_part) == 0.0;
    %%%%%: 3665-block  0
        -: 3666:}
        -: 3667:
function _ZNK4Json5Value6isNullEv called 0 returned 0% blocks executed 0%
    #####: 3668:bool Value::isNull() const { return type() == nullValue; }
    %%%%%: 3668-block  0
Aufruf  0 niemals ausgeführt
        -: 3669:
function _ZNK4Json5Value6isBoolEv called 0 returned 0% blocks executed 0%
    #####: 3670:bool Value::isBool() const { return type() == booleanValue; }
    %%%%%: 3670-block  0
Aufruf  0 niemals ausgeführt
        -: 3671:
function _ZNK4Json5Value5isIntEv called 0 returned 0% blocks executed 0%
    #####: 3672:bool Value::isInt() const {
    #####: 3673:  switch (type()) {
    %%%%%: 3673-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3674:  case intValue:
        -: 3675:#if defined(JSON_HAS_INT64)
    #####: 3676:    return value_.int_ >= minInt && value_.int_ <= maxInt;
    %%%%%: 3676-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3676-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3676-block  2
    %%%%%: 3676-block  3
    %%%%%: 3676-block  4
        -: 3677:#else
        -: 3678:    return true;
        -: 3679:#endif
    #####: 3680:  case uintValue:
    #####: 3681:    return value_.uint_ <= UInt(maxInt);
    %%%%%: 3681-block  0
    #####: 3682:  case realValue:
    #####: 3683:    return value_.real_ >= minInt && value_.real_ <= maxInt &&
    %%%%%: 3683-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3683-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3683-block  2
    %%%%%: 3683-block  3
    #####: 3684:           IsIntegral(value_.real_);
    %%%%%: 3684-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3684-block  1
    #####: 3685:  default:
    #####: 3686:    break;
    %%%%%: 3686-block  0
        -: 3687:  }
    #####: 3688:  return false;
    %%%%%: 3688-block  0
        -: 3689:}
        -: 3690:
function _ZNK4Json5Value6isUIntEv called 0 returned 0% blocks executed 0%
    #####: 3691:bool Value::isUInt() const {
    #####: 3692:  switch (type()) {
    %%%%%: 3692-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3693:  case intValue:
        -: 3694:#if defined(JSON_HAS_INT64)
    #####: 3695:    return value_.int_ >= 0 && LargestUInt(value_.int_) <= LargestUInt(maxUInt);
    %%%%%: 3695-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3695-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3695-block  2
    %%%%%: 3695-block  3
    %%%%%: 3695-block  4
        -: 3696:#else
        -: 3697:    return value_.int_ >= 0;
        -: 3698:#endif
    #####: 3699:  case uintValue:
        -: 3700:#if defined(JSON_HAS_INT64)
    #####: 3701:    return value_.uint_ <= maxUInt;
    %%%%%: 3701-block  0
        -: 3702:#else
        -: 3703:    return true;
        -: 3704:#endif
    #####: 3705:  case realValue:
    #####: 3706:    return value_.real_ >= 0 && value_.real_ <= maxUInt &&
    %%%%%: 3706-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3706-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3706-block  2
    %%%%%: 3706-block  3
    #####: 3707:           IsIntegral(value_.real_);
    %%%%%: 3707-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3707-block  1
    #####: 3708:  default:
    #####: 3709:    break;
    %%%%%: 3709-block  0
        -: 3710:  }
    #####: 3711:  return false;
    %%%%%: 3711-block  0
        -: 3712:}
        -: 3713:
function _ZNK4Json5Value7isInt64Ev called 0 returned 0% blocks executed 0%
    #####: 3714:bool Value::isInt64() const {
        -: 3715:#if defined(JSON_HAS_INT64)
    #####: 3716:  switch (type()) {
    %%%%%: 3716-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3717:  case intValue:
    #####: 3718:    return true;
    %%%%%: 3718-block  0
    #####: 3719:  case uintValue:
    #####: 3720:    return value_.uint_ <= UInt64(maxInt64);
    %%%%%: 3720-block  0
    #####: 3721:  case realValue:
        -: 3722:    // Note that maxInt64 (= 2^63 - 1) is not exactly representable as a
        -: 3723:    // double, so double(maxInt64) will be rounded up to 2^63. Therefore we
        -: 3724:    // require the value to be strictly less than the limit.
    #####: 3725:    return value_.real_ >= double(minInt64) &&
    #####: 3726:           value_.real_ < double(maxInt64) && IsIntegral(value_.real_);
    %%%%%: 3726-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3726-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3726-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 3726-block  3
    %%%%%: 3726-block  4
    %%%%%: 3726-block  5
    #####: 3727:  default:
    #####: 3728:    break;
    %%%%%: 3728-block  0
        -: 3729:  }
        -: 3730:#endif // JSON_HAS_INT64
    #####: 3731:  return false;
    %%%%%: 3731-block  0
        -: 3732:}
        -: 3733:
function _ZNK4Json5Value8isUInt64Ev called 0 returned 0% blocks executed 0%
    #####: 3734:bool Value::isUInt64() const {
        -: 3735:#if defined(JSON_HAS_INT64)
    #####: 3736:  switch (type()) {
    %%%%%: 3736-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 3737:  case intValue:
    #####: 3738:    return value_.int_ >= 0;
    %%%%%: 3738-block  0
    #####: 3739:  case uintValue:
    #####: 3740:    return true;
    %%%%%: 3740-block  0
    #####: 3741:  case realValue:
        -: 3742:    // Note that maxUInt64 (= 2^64 - 1) is not exactly representable as a
        -: 3743:    // double, so double(maxUInt64) will be rounded up to 2^64. Therefore we
        -: 3744:    // require the value to be strictly less than the limit.
    #####: 3745:    return value_.real_ >= 0 && value_.real_ < maxUInt64AsDouble &&
    %%%%%: 3745-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3745-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3745-block  2
    %%%%%: 3745-block  3
    #####: 3746:           IsIntegral(value_.real_);
    %%%%%: 3746-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 3746-block  1
    #####: 3747:  default:
    #####: 3748:    break;
    %%%%%: 3748-block  0
        -: 3749:  }
        -: 3750:#endif // JSON_HAS_INT64
    #####: 3751:  return false;
    %%%%%: 3751-block  0
        -: 3752:}
        -: 3753:
function _ZNK4Json5Value10isIntegralEv called 0 returned 0% blocks executed 0%
    #####: 3754:bool Value::isIntegral() const {
    #####: 3755:  switch (type()) {
    %%%%%: 3755-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3756:  case intValue:
        -: 3757:  case uintValue:
    #####: 3758:    return true;
    %%%%%: 3758-block  0
    #####: 3759:  case realValue:
        -: 3760:#if defined(JSON_HAS_INT64)
        -: 3761:    // Note that maxUInt64 (= 2^64 - 1) is not exactly representable as a
        -: 3762:    // double, so double(maxUInt64) will be rounded up to 2^64. Therefore we
        -: 3763:    // require the value to be strictly less than the limit.
    #####: 3764:    return value_.real_ >= double(minInt64) &&
    #####: 3765:           value_.real_ < maxUInt64AsDouble && IsIntegral(value_.real_);
    %%%%%: 3765-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3765-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3765-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 3765-block  3
    %%%%%: 3765-block  4
    %%%%%: 3765-block  5
        -: 3766:#else
        -: 3767:    return value_.real_ >= minInt && value_.real_ <= maxUInt &&
        -: 3768:           IsIntegral(value_.real_);
        -: 3769:#endif // JSON_HAS_INT64
    #####: 3770:  default:
    #####: 3771:    break;
    %%%%%: 3771-block  0
        -: 3772:  }
    #####: 3773:  return false;
    %%%%%: 3773-block  0
        -: 3774:}
        -: 3775:
function _ZNK4Json5Value8isDoubleEv called 0 returned 0% blocks executed 0%
    #####: 3776:bool Value::isDouble() const {
    #####: 3777:  return type() == intValue || type() == uintValue || type() == realValue;
    %%%%%: 3777-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3777-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3777-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 3777-block  3
    %%%%%: 3777-block  4
    %%%%%: 3777-block  5
        -: 3778:}
        -: 3779:
function _ZNK4Json5Value9isNumericEv called 0 returned 0% blocks executed 0%
    #####: 3780:bool Value::isNumeric() const { return isDouble(); }
    %%%%%: 3780-block  0
Aufruf  0 niemals ausgeführt
        -: 3781:
function _ZNK4Json5Value8isStringEv called 0 returned 0% blocks executed 0%
    #####: 3782:bool Value::isString() const { return type() == stringValue; }
    %%%%%: 3782-block  0
Aufruf  0 niemals ausgeführt
        -: 3783:
function _ZNK4Json5Value7isArrayEv called 0 returned 0% blocks executed 0%
    #####: 3784:bool Value::isArray() const { return type() == arrayValue; }
    %%%%%: 3784-block  0
Aufruf  0 niemals ausgeführt
        -: 3785:
function _ZNK4Json5Value8isObjectEv called 0 returned 0% blocks executed 0%
    #####: 3786:bool Value::isObject() const { return type() == objectValue; }
    %%%%%: 3786-block  0
Aufruf  0 niemals ausgeführt
        -: 3787:
function _ZN4Json5Value8CommentsC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####: 3788:Value::Comments::Comments(const Comments& that)
    #####: 3789:    : ptr_{cloneUnique(that.ptr_)} {}
    %%%%%: 3789-block  0
Aufruf  0 niemals ausgeführt
        -: 3790:
function _ZN4Json5Value8CommentsC2EOS1_ called 0 returned 0% blocks executed 0%
    #####: 3791:Value::Comments::Comments(Comments&& that) noexcept
    #####: 3792:    : ptr_{std::move(that.ptr_)} {}
    %%%%%: 3792-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3793:
function _ZN4Json5Value8CommentsaSERKS1_ called 0 returned 0% blocks executed 0%
    #####: 3794:Value::Comments& Value::Comments::operator=(const Comments& that) {
    #####: 3795:  ptr_ = cloneUnique(that.ptr_);
    %%%%%: 3795-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3795-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
    #####: 3796:  return *this;
    %%%%%: 3796-block  0
        -: 3797:}
        -: 3798:
function _ZN4Json5Value8CommentsaSEOS1_ called 1 returned 100% blocks executed 100%
        1: 3799:Value::Comments& Value::Comments::operator=(Comments&& that) noexcept {
        1: 3800:  ptr_ = std::move(that.ptr_);
        1: 3800-block  0
Aufruf  0 gab 1 zurück
Aufruf  1 gab 1 zurück
        1: 3801:  return *this;
        -: 3802:}
        -: 3803:
function _ZNK4Json5Value8Comments3hasENS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####: 3804:bool Value::Comments::has(CommentPlacement slot) const {
    #####: 3805:  return ptr_ && !(*ptr_)[slot].empty();
    %%%%%: 3805-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3805-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3805-block  2
    %%%%%: 3805-block  3
    %%%%%: 3805-block  4
        -: 3806:}
        -: 3807:
function _ZNK4Json5Value8Comments3getB5cxx11ENS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####: 3808:String Value::Comments::get(CommentPlacement slot) const {
    #####: 3809:  if (!ptr_)
    %%%%%: 3809-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3810:    return {};
    %%%%%: 3810-block  0
Aufruf  0 niemals ausgeführt
    #####: 3811:  return (*ptr_)[slot];
    %%%%%: 3811-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
        -: 3812:}
        -: 3813:
function _ZN4Json5Value8Comments3setENS_16CommentPlacementENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3814:void Value::Comments::set(CommentPlacement slot, String comment) {
    #####: 3815:  if (slot >= CommentPlacement::numberOfCommentPlacement)
    %%%%%: 3815-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3816:    return;
    %%%%%: 3816-block  0
    #####: 3817:  if (!ptr_)
    %%%%%: 3817-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3818:    ptr_ = std::unique_ptr<Array>(new Array());
    %%%%%: 3818-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3818-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Aufruf  6 niemals ausgeführt
    #####: 3819:  (*ptr_)[slot] = std::move(comment);
    %%%%%: 3819-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 3820:}
        -: 3821:
function _ZN4Json5Value10setCommentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####: 3822:void Value::setComment(String comment, CommentPlacement placement) {
    #####: 3823:  if (!comment.empty() && (comment.back() == '\n')) {
    %%%%%: 3823-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3823-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3823-block  2
    %%%%%: 3823-block  3
    %%%%%: 3823-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
        -: 3824:    // Always discard trailing newline, to aid indentation.
    #####: 3825:    comment.pop_back();
    %%%%%: 3825-block  0
Aufruf  0 niemals ausgeführt
        -: 3826:  }
    #####: 3827:  JSON_ASSERT(!comment.empty());
    %%%%%: 3827-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3827-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 3827-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 3827-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 3827-block  4
Aufruf  9 niemals ausgeführt
    $$$$$: 3827-block  5
    $$$$$: 3827-block  6
Aufruf 10 niemals ausgeführt
    #####: 3828:  JSON_ASSERT_MESSAGE(
    %%%%%: 3828-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3828-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3828-block  2
    %%%%%: 3828-block  3
    %%%%%: 3828-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3828-block  5
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 3828-block  6
Aufruf 11 niemals ausgeführt
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    %%%%%: 3828-block  7
Aufruf 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
    %%%%%: 3828-block  8
Aufruf 17 niemals ausgeführt
    $$$$$: 3828-block  9
Aufruf 18 niemals ausgeführt
    $$$$$: 3828-block 10
    $$$$$: 3828-block 11
Aufruf 19 niemals ausgeführt
        -: 3829:      comment[0] == '\0' || comment[0] == '/',
        -: 3830:      "in Json::Value::setComment(): Comments must start with /");
    #####: 3831:  comments_.set(placement, std::move(comment));
    %%%%%: 3831-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 3831-block  1
Aufruf  5 niemals ausgeführt
    $$$$$: 3831-block  2
Aufruf  6 niemals ausgeführt
    #####: 3832:}
        -: 3833:
function _ZNK4Json5Value10hasCommentENS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####: 3834:bool Value::hasComment(CommentPlacement placement) const {
    #####: 3835:  return comments_.has(placement);
    %%%%%: 3835-block  0
Aufruf  0 niemals ausgeführt
        -: 3836:}
        -: 3837:
function _ZNK4Json5Value10getCommentB5cxx11ENS_16CommentPlacementE called 0 returned 0% blocks executed 0%
    #####: 3838:String Value::getComment(CommentPlacement placement) const {
    #####: 3839:  return comments_.get(placement);
    %%%%%: 3839-block  0
Aufruf  0 niemals ausgeführt
        -: 3840:}
        -: 3841:
function _ZN4Json5Value14setOffsetStartEl called 0 returned 0% blocks executed 0%
    #####: 3842:void Value::setOffsetStart(ptrdiff_t start) { start_ = start; }
        -: 3843:
function _ZN4Json5Value14setOffsetLimitEl called 0 returned 0% blocks executed 0%
    #####: 3844:void Value::setOffsetLimit(ptrdiff_t limit) { limit_ = limit; }
        -: 3845:
function _ZNK4Json5Value14getOffsetStartEv called 0 returned 0% blocks executed 0%
    #####: 3846:ptrdiff_t Value::getOffsetStart() const { return start_; }
    %%%%%: 3846-block  0
        -: 3847:
function _ZNK4Json5Value14getOffsetLimitEv called 0 returned 0% blocks executed 0%
    #####: 3848:ptrdiff_t Value::getOffsetLimit() const { return limit_; }
    %%%%%: 3848-block  0
        -: 3849:
function _ZNK4Json5Value14toStyledStringB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 3850:String Value::toStyledString() const {
    #####: 3851:  StreamWriterBuilder builder;
    %%%%%: 3851-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 3852:
    #####: 3853:  String out = this->hasComment(commentBefore) ? "\n" : "";
    %%%%%: 3853-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3853-block  1
    %%%%%: 3853-block  2
    %%%%%: 3853-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 3853-block  4
Aufruf  7 niemals ausgeführt
    $$$$$: 3853-block  5
Aufruf  8 niemals ausgeführt
    $$$$$: 3853-block  6
    #####: 3854:  out += Json::writeString(builder, *this);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3854-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3854-block  1
Aufruf  6 niemals ausgeführt
    $$$$$: 3854-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 3854-block  3
    #####: 3855:  out += '\n';
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 3856:
    #####: 3857:  return out;
    %%%%%: 3857-block  0
    %%%%%: 3857-block  1
    #####: 3858:}
    %%%%%: 3858-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3858-block  1
Aufruf  1 niemals ausgeführt
    $$$$$: 3858-block  2
Aufruf  2 niemals ausgeführt
        -: 3859:
function _ZNK4Json5Value5beginEv called 0 returned 0% blocks executed 0%
    #####: 3860:Value::const_iterator Value::begin() const {
    #####: 3861:  switch (type()) {
    %%%%%: 3861-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3862:  case arrayValue:
        -: 3863:  case objectValue:
    #####: 3864:    if (value_.map_)
    %%%%%: 3864-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3865:      return const_iterator(value_.map_->begin());
    %%%%%: 3865-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3866:    break;
    %%%%%: 3866-block  0
    #####: 3867:  default:
    #####: 3868:    break;
    %%%%%: 3868-block  0
        -: 3869:  }
    #####: 3870:  return {};
    %%%%%: 3870-block  0
Aufruf  0 niemals ausgeführt
        -: 3871:}
        -: 3872:
function _ZNK4Json5Value3endEv called 0 returned 0% blocks executed 0%
    #####: 3873:Value::const_iterator Value::end() const {
    #####: 3874:  switch (type()) {
    %%%%%: 3874-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3875:  case arrayValue:
        -: 3876:  case objectValue:
    #####: 3877:    if (value_.map_)
    %%%%%: 3877-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3878:      return const_iterator(value_.map_->end());
    %%%%%: 3878-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3879:    break;
    %%%%%: 3879-block  0
    #####: 3880:  default:
    #####: 3881:    break;
    %%%%%: 3881-block  0
        -: 3882:  }
    #####: 3883:  return {};
    %%%%%: 3883-block  0
Aufruf  0 niemals ausgeführt
        -: 3884:}
        -: 3885:
function _ZN4Json5Value5beginEv called 0 returned 0% blocks executed 0%
    #####: 3886:Value::iterator Value::begin() {
    #####: 3887:  switch (type()) {
    %%%%%: 3887-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3888:  case arrayValue:
        -: 3889:  case objectValue:
    #####: 3890:    if (value_.map_)
    %%%%%: 3890-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3891:      return iterator(value_.map_->begin());
    %%%%%: 3891-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3892:    break;
    %%%%%: 3892-block  0
    #####: 3893:  default:
    #####: 3894:    break;
    %%%%%: 3894-block  0
        -: 3895:  }
    #####: 3896:  return iterator();
    %%%%%: 3896-block  0
Aufruf  0 niemals ausgeführt
        -: 3897:}
        -: 3898:
function _ZN4Json5Value3endEv called 0 returned 0% blocks executed 0%
    #####: 3899:Value::iterator Value::end() {
    #####: 3900:  switch (type()) {
    %%%%%: 3900-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3901:  case arrayValue:
        -: 3902:  case objectValue:
    #####: 3903:    if (value_.map_)
    %%%%%: 3903-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3904:      return iterator(value_.map_->end());
    %%%%%: 3904-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3905:    break;
    %%%%%: 3905-block  0
    #####: 3906:  default:
    #####: 3907:    break;
    %%%%%: 3907-block  0
        -: 3908:  }
    #####: 3909:  return iterator();
    %%%%%: 3909-block  0
Aufruf  0 niemals ausgeführt
        -: 3910:}
        -: 3911:
        -: 3912:// class PathArgument
        -: 3913:// //////////////////////////////////////////////////////////////////
        -: 3914:
function _ZN4Json12PathArgumentC2Ev called 0 returned 0% blocks executed 0%
    #####: 3915:PathArgument::PathArgument() = default;
    %%%%%: 3915-block  0
Aufruf  0 niemals ausgeführt
        -: 3916:
function _ZN4Json12PathArgumentC2Ej called 0 returned 0% blocks executed 0%
    #####: 3917:PathArgument::PathArgument(ArrayIndex index)
    #####: 3918:    : index_(index), kind_(kindIndex) {}
    %%%%%: 3918-block  0
Aufruf  0 niemals ausgeführt
        -: 3919:
function _ZN4Json12PathArgumentC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3920:PathArgument::PathArgument(const char* key) : key_(key), kind_(kindKey) {}
    %%%%%: 3920-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3920-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 3920-block  2
Aufruf  5 niemals ausgeführt
        -: 3921:
function _ZN4Json12PathArgumentC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3922:PathArgument::PathArgument(String key) : key_(std::move(key)), kind_(kindKey) {}
    %%%%%: 3922-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 3923:
        -: 3924:// class Path
        -: 3925:// //////////////////////////////////////////////////////////////////
        -: 3926:
function _ZN4Json4PathC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12PathArgumentESB_SB_SB_SB_ called 0 returned 0% blocks executed 0%
    #####: 3927:Path::Path(const String& path, const PathArgument& a1, const PathArgument& a2,
        -: 3928:           const PathArgument& a3, const PathArgument& a4,
    #####: 3929:           const PathArgument& a5) {
    %%%%%: 3929-block  0
Aufruf  0 niemals ausgeführt
    #####: 3930:  InArgs in;
Aufruf  0 niemals ausgeführt
    #####: 3931:  in.reserve(5);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3932:  in.push_back(&a1);
    %%%%%: 3932-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 3932-block  1
    #####: 3933:  in.push_back(&a2);
    %%%%%: 3933-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 3933-block  1
    #####: 3934:  in.push_back(&a3);
    %%%%%: 3934-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 3934-block  1
    #####: 3935:  in.push_back(&a4);
    %%%%%: 3935-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 3935-block  1
    #####: 3936:  in.push_back(&a5);
    %%%%%: 3936-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    $$$$$: 3936-block  1
    #####: 3937:  makePath(path, in);
    %%%%%: 3937-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3938:}
    %%%%%: 3938-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 3938-block  1
Aufruf  1 niemals ausgeführt
    $$$$$: 3938-block  2
Aufruf  2 niemals ausgeführt
        -: 3939:
function _ZN4Json4Path8makePathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIPKNS_12PathArgumentESaISC_EE called 0 returned 0% blocks executed 0%
    #####: 3940:void Path::makePath(const String& path, const InArgs& in) {
    #####: 3941:  const char* current = path.c_str();
    %%%%%: 3941-block  0
Aufruf  0 niemals ausgeführt
    #####: 3942:  const char* end = current + path.length();
Aufruf  0 niemals ausgeführt
    #####: 3943:  auto itInArg = in.begin();
Aufruf  0 niemals ausgeführt
    #####: 3944:  while (current != end) {
    %%%%%: 3944-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3945:    if (*current == '[') {
    %%%%%: 3945-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3946:      ++current;
    #####: 3947:      if (*current == '%')
    %%%%%: 3947-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3948:        addPathInArg(path, in, itInArg, PathArgument::kindIndex);
    %%%%%: 3948-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 3949:      else {
    #####: 3950:        ArrayIndex index = 0;
    #####: 3951:        for (; current != end && *current >= '0' && *current <= '9'; ++current)
    %%%%%: 3951-block  0
    %%%%%: 3951-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3951-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3951-block  3
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3952:          index = index * 10 + ArrayIndex(*current - '0');
    %%%%%: 3952-block  0
    #####: 3953:        args_.push_back(index);
    %%%%%: 3953-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3953-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 3953-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 3953-block  3
        -: 3954:      }
    #####: 3955:      if (current == end || *++current != ']')
    %%%%%: 3955-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3955-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3955-block  2
    %%%%%: 3955-block  3
    %%%%%: 3955-block  4
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 3956:        invalidPath(path, int(current - path.c_str()));
    %%%%%: 3956-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 3957:    } else if (*current == '%') {
    %%%%%: 3957-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3958:      addPathInArg(path, in, itInArg, PathArgument::kindKey);
    %%%%%: 3958-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 3959:      ++current;
    %%%%%: 3959-block  0
    #####: 3960:    } else if (*current == '.' || *current == ']') {
    %%%%%: 3960-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3960-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3961:      ++current;
    %%%%%: 3961-block  0
        -: 3962:    } else {
    #####: 3963:      const char* beginName = current;
    #####: 3964:      while (current != end && !strchr("[.", *current))
    %%%%%: 3964-block  0
    %%%%%: 3964-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 3964-block  2
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 3965:        ++current;
    %%%%%: 3965-block  0
    #####: 3966:      args_.push_back(String(beginName, current));
    %%%%%: 3966-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 3966-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 3966-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Aufruf 10 niemals ausgeführt
    $$$$$: 3966-block  3
Aufruf 11 niemals ausgeführt
    $$$$$: 3966-block  4
Aufruf 12 niemals ausgeführt
    $$$$$: 3966-block  5
Aufruf 13 niemals ausgeführt
    $$$$$: 3966-block  6
    $$$$$: 3966-block  7
    $$$$$: 3966-block  8
        -: 3967:    }
        -: 3968:  }
    #####: 3969:}
    %%%%%: 3969-block  0
        -: 3970:
function _ZN4Json4Path12addPathInArgERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIPKNS_12PathArgumentESaISC_EERN9__gnu_cxx17__normal_iteratorIPKSC_SE_EENSA_4KindE called 0 returned 0% blocks executed 0%
    #####: 3971:void Path::addPathInArg(const String& /*path*/, const InArgs& in,
        -: 3972:                        InArgs::const_iterator& itInArg,
        -: 3973:                        PathArgument::Kind kind) {
    #####: 3974:  if (itInArg == in.end()) {
    %%%%%: 3974-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -: 3975:    // Error: missing argument %d
    #####: 3976:  } else if ((*itInArg)->kind_ != kind) {
    %%%%%: 3976-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 3977:    // Error: bad argument type
        -: 3978:  } else {
    #####: 3979:    args_.push_back(**itInArg++);
    %%%%%: 3979-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 3979-block  1
        -: 3980:  }
    #####: 3981:}
    %%%%%: 3981-block  0
        -: 3982:
function _ZN4Json4Path11invalidPathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 3983:void Path::invalidPath(const String& /*path*/, int /*location*/) {
        -: 3984:  // Error: invalid path.
    #####: 3985:}
        -: 3986:
function _ZNK4Json4Path7resolveERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 3987:const Value& Path::resolve(const Value& root) const {
    #####: 3988:  const Value* node = &root;
    #####: 3989:  for (const auto& arg : args_) {
    %%%%%: 3989-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 3989-block  1
Aufruf  2 niemals ausgeführt
    %%%%%: 3989-block  2
Aufruf  3 niemals ausgeführt
    %%%%%: 3989-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 3990:    if (arg.kind_ == PathArgument::kindIndex) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3991:      if (!node->isArray() || !node->isValidIndex(arg.index_)) {
    %%%%%: 3991-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3991-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 3991-block  2
    %%%%%: 3991-block  3
    %%%%%: 3991-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
        -: 3992:        // Error: unable to resolve path (array value expected at position... )
    #####: 3993:        return Value::nullSingleton();
    %%%%%: 3993-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3993-block  1
    %%%%%: 3993-block  2
        -: 3994:      }
    #####: 3995:      node = &((*node)[arg.index_]);
    %%%%%: 3995-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3995-block  1
    #####: 3996:    } else if (arg.kind_ == PathArgument::kindKey) {
    %%%%%: 3996-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 3997:      if (!node->isObject()) {
    %%%%%: 3997-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 3998:        // Error: unable to resolve path (object value expected at position...)
    #####: 3999:        return Value::nullSingleton();
    %%%%%: 3999-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 3999-block  1
        -: 4000:      }
    #####: 4001:      node = &((*node)[arg.key_]);
    %%%%%: 4001-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4002:      if (node == &Value::nullSingleton()) {
    %%%%%: 4002-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4002-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
        -: 4003:        // Error: unable to resolve path (object has no member named '' at
        -: 4004:        // position...)
    #####: 4005:        return Value::nullSingleton();
    %%%%%: 4005-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4005-block  1
        -: 4006:      }
        -: 4007:    }
        -: 4008:  }
    #####: 4009:  return *node;
    %%%%%: 4009-block  0
        -: 4010:}
        -: 4011:
function _ZNK4Json4Path7resolveERKNS_5ValueES3_ called 0 returned 0% blocks executed 0%
    #####: 4012:Value Path::resolve(const Value& root, const Value& defaultValue) const {
    #####: 4013:  const Value* node = &root;
    #####: 4014:  for (const auto& arg : args_) {
    %%%%%: 4014-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 4014-block  1
Aufruf  2 niemals ausgeführt
    %%%%%: 4014-block  2
Aufruf  3 niemals ausgeführt
    %%%%%: 4014-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 4015:    if (arg.kind_ == PathArgument::kindIndex) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4016:      if (!node->isArray() || !node->isValidIndex(arg.index_))
    %%%%%: 4016-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4016-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4016-block  2
    %%%%%: 4016-block  3
    %%%%%: 4016-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 4017:        return defaultValue;
    %%%%%: 4017-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4017-block  1
    #####: 4018:      node = &((*node)[arg.index_]);
    %%%%%: 4018-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4018-block  1
    #####: 4019:    } else if (arg.kind_ == PathArgument::kindKey) {
    %%%%%: 4019-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4020:      if (!node->isObject())
    %%%%%: 4020-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4021:        return defaultValue;
    %%%%%: 4021-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4022:      node = &((*node)[arg.key_]);
    %%%%%: 4022-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4023:      if (node == &Value::nullSingleton())
    %%%%%: 4023-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4023-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 4024:        return defaultValue;
    %%%%%: 4024-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4025:    }
        -: 4026:  }
    #####: 4027:  return *node;
    %%%%%: 4027-block  0
Aufruf  0 niemals ausgeführt
        -: 4028:}
        -: 4029:
function _ZNK4Json4Path4makeERNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4030:Value& Path::make(Value& root) const {
    #####: 4031:  Value* node = &root;
    #####: 4032:  for (const auto& arg : args_) {
    %%%%%: 4032-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%: 4032-block  1
Aufruf  2 niemals ausgeführt
    %%%%%: 4032-block  2
Aufruf  3 niemals ausgeführt
    %%%%%: 4032-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####: 4033:    if (arg.kind_ == PathArgument::kindIndex) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4034:      if (!node->isArray()) {
    %%%%%: 4034-block  0
Aufruf  0 niemals ausgeführt
        -: 4035:        // Error: node is not an array at position ...
        -: 4036:      }
    #####: 4037:      node = &((*node)[arg.index_]);
    %%%%%: 4037-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4037-block  1
    #####: 4038:    } else if (arg.kind_ == PathArgument::kindKey) {
    %%%%%: 4038-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4039:      if (!node->isObject()) {
    %%%%%: 4039-block  0
Aufruf  0 niemals ausgeführt
        -: 4040:        // Error: node is not an object at position...
        -: 4041:      }
    #####: 4042:      node = &((*node)[arg.key_]);
    %%%%%: 4042-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4042-block  1
        -: 4043:    }
        -: 4044:  }
    #####: 4045:  return *node;
    %%%%%: 4045-block  0
    %%%%%: 4045-block  1
        -: 4046:}
        -: 4047:
        -: 4048:} // namespace Json
        -: 4049:
        -: 4050:// //////////////////////////////////////////////////////////////////////
        -: 4051:// End of content of file: src/lib_json/json_value.cpp
        -: 4052:// //////////////////////////////////////////////////////////////////////
        -: 4053:
        -: 4054:
        -: 4055:
        -: 4056:
        -: 4057:
        -: 4058:
        -: 4059:// //////////////////////////////////////////////////////////////////////
        -: 4060:// Beginning of content of file: src/lib_json/json_writer.cpp
        -: 4061:// //////////////////////////////////////////////////////////////////////
        -: 4062:
        -: 4063:// Copyright 2011 Baptiste Lepilleur and The JsonCpp Authors
        -: 4064:// Distributed under MIT license, or public domain if desired and
        -: 4065:// recognized in your jurisdiction.
        -: 4066:// See file LICENSE for detail or copy at http://jsoncpp.sourceforge.net/LICENSE
        -: 4067:
        -: 4068:#if !defined(JSON_IS_AMALGAMATION)
        -: 4069:#include "json_tool.h"
        -: 4070:#include <json/writer.h>
        -: 4071:#endif // if !defined(JSON_IS_AMALGAMATION)
        -: 4072:#include <algorithm>
        -: 4073:#include <cassert>
        -: 4074:#include <cctype>
        -: 4075:#include <cstring>
        -: 4076:#include <iomanip>
        -: 4077:#include <memory>
        -: 4078:#include <set>
        -: 4079:#include <sstream>
        -: 4080:#include <utility>
        -: 4081:
        -: 4082:#if __cplusplus >= 201103L
        -: 4083:#include <cmath>
        -: 4084:#include <cstdio>
        -: 4085:
        -: 4086:#if !defined(isnan)
        -: 4087:#define isnan std::isnan
        -: 4088:#endif
        -: 4089:
        -: 4090:#if !defined(isfinite)
        -: 4091:#define isfinite std::isfinite
        -: 4092:#endif
        -: 4093:
        -: 4094:#else
        -: 4095:#include <cmath>
        -: 4096:#include <cstdio>
        -: 4097:
        -: 4098:#if defined(_MSC_VER)
        -: 4099:#if !defined(isnan)
        -: 4100:#include <float.h>
        -: 4101:#define isnan _isnan
        -: 4102:#endif
        -: 4103:
        -: 4104:#if !defined(isfinite)
        -: 4105:#include <float.h>
        -: 4106:#define isfinite _finite
        -: 4107:#endif
        -: 4108:
        -: 4109:#if !defined(_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES)
        -: 4110:#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1
        -: 4111:#endif //_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
        -: 4112:
        -: 4113:#endif //_MSC_VER
        -: 4114:
        -: 4115:#if defined(__sun) && defined(__SVR4) // Solaris
        -: 4116:#if !defined(isfinite)
        -: 4117:#include <ieeefp.h>
        -: 4118:#define isfinite finite
        -: 4119:#endif
        -: 4120:#endif
        -: 4121:
        -: 4122:#if defined(__hpux)
        -: 4123:#if !defined(isfinite)
        -: 4124:#if defined(__ia64) && !defined(finite)
        -: 4125:#define isfinite(x)                                                            \
        -: 4126:  ((sizeof(x) == sizeof(float) ? _Isfinitef(x) : _IsFinite(x)))
        -: 4127:#endif
        -: 4128:#endif
        -: 4129:#endif
        -: 4130:
        -: 4131:#if !defined(isnan)
        -: 4132:// IEEE standard states that NaN values will not compare to themselves
        -: 4133:#define isnan(x) ((x) != (x))
        -: 4134:#endif
        -: 4135:
        -: 4136:#if !defined(__APPLE__)
        -: 4137:#if !defined(isfinite)
        -: 4138:#define isfinite finite
        -: 4139:#endif
        -: 4140:#endif
        -: 4141:#endif
        -: 4142:
        -: 4143:#if defined(_MSC_VER)
        -: 4144:// Disable warning about strdup being deprecated.
        -: 4145:#pragma warning(disable : 4996)
        -: 4146:#endif
        -: 4147:
        -: 4148:namespace Json {
        -: 4149:
        -: 4150:#if __cplusplus >= 201103L || (defined(_CPPLIB_VER) && _CPPLIB_VER >= 520)
        -: 4151:using StreamWriterPtr = std::unique_ptr<StreamWriter>;
        -: 4152:#else
        -: 4153:using StreamWriterPtr = std::auto_ptr<StreamWriter>;
        -: 4154:#endif
        -: 4155:
function _ZN4Json13valueToStringB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4156:String valueToString(LargestInt value) {
        -: 4157:  UIntToStringBuffer buffer;
    #####: 4158:  char* current = buffer + sizeof(buffer);
    #####: 4159:  if (value == Value::minLargestInt) {
    %%%%%: 4159-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4160:    uintToString(LargestUInt(Value::maxLargestInt) + 1, current);
    %%%%%: 4160-block  0
Aufruf  0 niemals ausgeführt
    #####: 4161:    *--current = '-';
    #####: 4162:  } else if (value < 0) {
    %%%%%: 4162-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4163:    uintToString(LargestUInt(-value), current);
    %%%%%: 4163-block  0
Aufruf  0 niemals ausgeführt
    #####: 4164:    *--current = '-';
        -: 4165:  } else {
    #####: 4166:    uintToString(LargestUInt(value), current);
    %%%%%: 4166-block  0
Aufruf  0 niemals ausgeführt
        -: 4167:  }
    #####: 4168:  assert(current >= buffer);
    %%%%%: 4168-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4168-block  1
Aufruf  2 niemals ausgeführt
    #####: 4169:  return current;
    %%%%%: 4169-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4169-block  1
Aufruf  4 niemals ausgeführt
    %%%%%: 4169-block  2
    $$$$$: 4169-block  3
Aufruf  5 niemals ausgeführt
    $$$$$: 4169-block  4
        -: 4170:}
        -: 4171:
function _ZN4Json13valueToStringB5cxx11Em called 0 returned 0% blocks executed 0%
    #####: 4172:String valueToString(LargestUInt value) {
        -: 4173:  UIntToStringBuffer buffer;
    #####: 4174:  char* current = buffer + sizeof(buffer);
    #####: 4175:  uintToString(value, current);
    %%%%%: 4175-block  0
Aufruf  0 niemals ausgeführt
    #####: 4176:  assert(current >= buffer);
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4176-block  0
Aufruf  2 niemals ausgeführt
    #####: 4177:  return current;
    %%%%%: 4177-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4177-block  1
Aufruf  4 niemals ausgeführt
    %%%%%: 4177-block  2
    $$$$$: 4177-block  3
Aufruf  5 niemals ausgeführt
    $$$$$: 4177-block  4
        -: 4178:}
        -: 4179:
        -: 4180:#if defined(JSON_HAS_INT64)
        -: 4181:
function _ZN4Json13valueToStringB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 4182:String valueToString(Int value) { return valueToString(LargestInt(value)); }
    %%%%%: 4182-block  0
Aufruf  0 niemals ausgeführt
        -: 4183:
function _ZN4Json13valueToStringB5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 4184:String valueToString(UInt value) { return valueToString(LargestUInt(value)); }
    %%%%%: 4184-block  0
Aufruf  0 niemals ausgeführt
        -: 4185:
        -: 4186:#endif // # if defined(JSON_HAS_INT64)
        -: 4187:
        -: 4188:namespace {
function _ZN4Json12_GLOBAL__N_113valueToStringEdbjNS_13PrecisionTypeE called 0 returned 0% blocks executed 0%
    #####: 4189:String valueToString(double value, bool useSpecialFloats,
        -: 4190:                     unsigned int precision, PrecisionType precisionType) {
        -: 4191:  // Print into the buffer. We need not request the alternative representation
        -: 4192:  // that always has a decimal point because JSON doesn't distinguish the
        -: 4193:  // concepts of reals and integers.
    #####: 4194:  if (!isfinite(value)) {
    %%%%%: 4194-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4195:    static const char* const reps[2][3] = {{"NaN", "-Infinity", "Infinity"},
        -: 4196:                                           {"null", "-1e+9999", "1e+9999"}};
    #####: 4197:    return reps[useSpecialFloats ? 0 : 1]
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4197-block  0
    %%%%%: 4197-block  1
    #####: 4198:               [isnan(value) ? 0 : (value < 0) ? 1 : 2];
    %%%%%: 4198-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 4198-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4198-block  2
    %%%%%: 4198-block  3
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4198-block  4
    %%%%%: 4198-block  5
    %%%%%: 4198-block  6
    %%%%%: 4198-block  7
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4198-block  8
Aufruf  9 niemals ausgeführt
    $$$$$: 4198-block  9
Aufruf 10 niemals ausgeführt
    $$$$$: 4198-block 10
        -: 4199:  }
        -: 4200:
    #####: 4201:  String buffer(size_t(36), '\0');
    %%%%%: 4201-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4201-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 4201-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 4201-block  3
        -: 4202:  while (true) {
    #####: 4203:    int len = jsoncpp_snprintf(
    %%%%%: 4203-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4203-block  1
    %%%%%: 4203-block  2
    %%%%%: 4203-block  3
Aufruf  2 niemals ausgeführt
    #####: 4204:        &*buffer.begin(), buffer.size(),
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4205:        (precisionType == PrecisionType::significantDigits) ? "%.*g" : "%.*f",
        -: 4206:        precision, value);
    #####: 4207:    assert(len >= 0);
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4207-block  0
Aufruf  2 niemals ausgeführt
    #####: 4208:    auto wouldPrint = static_cast<size_t>(len);
    #####: 4209:    if (wouldPrint >= buffer.size()) {
    %%%%%: 4209-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4210:      buffer.resize(wouldPrint + 1);
    %%%%%: 4210-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4211:      continue;
    %%%%%: 4211-block  0
        -: 4212:    }
    #####: 4213:    buffer.resize(wouldPrint);
    %%%%%: 4213-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4214:    break;
    %%%%%: 4214-block  0
    #####: 4215:  }
    %%%%%: 4215-block  0
        -: 4216:
    #####: 4217:  buffer.erase(fixNumericLocale(buffer.begin(), buffer.end()), buffer.end());
    %%%%%: 4217-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    $$$$$: 4217-block  1
    $$$$$: 4217-block  2
    $$$$$: 4217-block  3
    $$$$$: 4217-block  4
        -: 4218:
        -: 4219:  // try to ensure we preserve the fact that this was given to us as a double on
        -: 4220:  // input
    #####: 4221:  if (buffer.find('.') == buffer.npos && buffer.find('e') == buffer.npos) {
    %%%%%: 4221-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4221-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4221-block  2
    %%%%%: 4221-block  3
    %%%%%: 4221-block  4
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 4222:    buffer += ".0";
    %%%%%: 4222-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4223:  }
        -: 4224:
        -: 4225:  // strip the zero padding from the right
    #####: 4226:  if (precisionType == PrecisionType::decimalPlaces) {
    %%%%%: 4226-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4227:    buffer.erase(fixZerosInTheEnd(buffer.begin(), buffer.end(), precision),
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    $$$$$: 4227-block  0
    $$$$$: 4227-block  1
    $$$$$: 4227-block  2
    #####: 4228:                 buffer.end());
    %%%%%: 4228-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 4228-block  1
    $$$$$: 4228-block  2
        -: 4229:  }
        -: 4230:
    #####: 4231:  return buffer;
    %%%%%: 4231-block  0
Aufruf  0 niemals ausgeführt
    #####: 4232:}
Aufruf  0 niemals ausgeführt
    $$$$$: 4232-block  0
Aufruf  1 niemals ausgeführt
        -: 4233:} // namespace
        -: 4234:
function _ZN4Json13valueToStringB5cxx11EdjNS_13PrecisionTypeE called 0 returned 0% blocks executed 0%
    #####: 4235:String valueToString(double value, unsigned int precision,
        -: 4236:                     PrecisionType precisionType) {
    #####: 4237:  return valueToString(value, false, precision, precisionType);
    %%%%%: 4237-block  0
Aufruf  0 niemals ausgeführt
        -: 4238:}
        -: 4239:
function _ZN4Json13valueToStringB5cxx11Eb called 0 returned 0% blocks executed 0%
    #####: 4240:String valueToString(bool value) { return value ? "true" : "false"; }
    %%%%%: 4240-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4240-block  1
    %%%%%: 4240-block  2
    %%%%%: 4240-block  3
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4240-block  4
Aufruf  6 niemals ausgeführt
    %%%%%: 4240-block  5
    $$$$$: 4240-block  6
Aufruf  7 niemals ausgeführt
        -: 4241:
function _ZN4JsonL26doesAnyCharRequireEscapingEPKcm called 0 returned 0% blocks executed 0%
    #####: 4242:static bool doesAnyCharRequireEscaping(char const* s, size_t n) {
    #####: 4243:  assert(s || !n);
    %%%%%: 4243-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4243-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4243-block  2
Aufruf  4 niemals ausgeführt
        -: 4244:
function _ZZN4JsonL26doesAnyCharRequireEscapingEPKcmENKUlhE_clEh called 0 returned 0% blocks executed 0%
    #####: 4245:  return std::any_of(s, s + n, [](unsigned char c) {
    %%%%%: 4245-block  0
Aufruf  0 niemals ausgeführt
    #####: 4246:    return c == '\\' || c == '"' || c < 0x20 || c > 0x7F;
    %%%%%: 4246-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4246-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4246-block  2
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4246-block  3
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 4246-block  4
    %%%%%: 4246-block  5
    %%%%%: 4246-block  6
    #####: 4247:  });
        -: 4248:}
        -: 4249:
function _ZN4JsonL15utf8ToCodepointERPKcS1_ called 0 returned 0% blocks executed 0%
    #####: 4250:static unsigned int utf8ToCodepoint(const char*& s, const char* e) {
    #####: 4251:  const unsigned int REPLACEMENT_CHARACTER = 0xFFFD;
        -: 4252:
    #####: 4253:  unsigned int firstByte = static_cast<unsigned char>(*s);
        -: 4254:
    #####: 4255:  if (firstByte < 0x80)
    %%%%%: 4255-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4256:    return firstByte;
    %%%%%: 4256-block  0
        -: 4257:
    #####: 4258:  if (firstByte < 0xE0) {
    %%%%%: 4258-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4259:    if (e - s < 2)
    %%%%%: 4259-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4260:      return REPLACEMENT_CHARACTER;
    %%%%%: 4260-block  0
        -: 4261:
    #####: 4262:    unsigned int calculated =
    #####: 4263:        ((firstByte & 0x1F) << 6) | (static_cast<unsigned int>(s[1]) & 0x3F);
    #####: 4264:    s += 1;
        -: 4265:    // oversized encoded characters are invalid
    #####: 4266:    return calculated < 0x80 ? REPLACEMENT_CHARACTER : calculated;
    %%%%%: 4266-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4266-block  1
    %%%%%: 4266-block  2
    %%%%%: 4266-block  3
        -: 4267:  }
        -: 4268:
    #####: 4269:  if (firstByte < 0xF0) {
    %%%%%: 4269-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4270:    if (e - s < 3)
    %%%%%: 4270-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4271:      return REPLACEMENT_CHARACTER;
    %%%%%: 4271-block  0
        -: 4272:
    #####: 4273:    unsigned int calculated = ((firstByte & 0x0F) << 12) |
    #####: 4274:                              ((static_cast<unsigned int>(s[1]) & 0x3F) << 6) |
    #####: 4275:                              (static_cast<unsigned int>(s[2]) & 0x3F);
    #####: 4276:    s += 2;
        -: 4277:    // surrogates aren't valid codepoints itself
        -: 4278:    // shouldn't be UTF-8 encoded
    #####: 4279:    if (calculated >= 0xD800 && calculated <= 0xDFFF)
    %%%%%: 4279-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4279-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4280:      return REPLACEMENT_CHARACTER;
    %%%%%: 4280-block  0
        -: 4281:    // oversized encoded characters are invalid
    #####: 4282:    return calculated < 0x800 ? REPLACEMENT_CHARACTER : calculated;
    %%%%%: 4282-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4282-block  1
    %%%%%: 4282-block  2
    %%%%%: 4282-block  3
        -: 4283:  }
        -: 4284:
    #####: 4285:  if (firstByte < 0xF8) {
    %%%%%: 4285-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4286:    if (e - s < 4)
    %%%%%: 4286-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4287:      return REPLACEMENT_CHARACTER;
    %%%%%: 4287-block  0
        -: 4288:
    #####: 4289:    unsigned int calculated = ((firstByte & 0x07) << 18) |
    #####: 4290:                              ((static_cast<unsigned int>(s[1]) & 0x3F) << 12) |
    #####: 4291:                              ((static_cast<unsigned int>(s[2]) & 0x3F) << 6) |
    #####: 4292:                              (static_cast<unsigned int>(s[3]) & 0x3F);
    #####: 4293:    s += 3;
        -: 4294:    // oversized encoded characters are invalid
    #####: 4295:    return calculated < 0x10000 ? REPLACEMENT_CHARACTER : calculated;
    %%%%%: 4295-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4295-block  1
    %%%%%: 4295-block  2
    %%%%%: 4295-block  3
        -: 4296:  }
        -: 4297:
    #####: 4298:  return REPLACEMENT_CHARACTER;
    %%%%%: 4298-block  0
        -: 4299:}
        -: 4300:
        -: 4301:static const char hex2[] = "000102030405060708090a0b0c0d0e0f"
        -: 4302:                           "101112131415161718191a1b1c1d1e1f"
        -: 4303:                           "202122232425262728292a2b2c2d2e2f"
        -: 4304:                           "303132333435363738393a3b3c3d3e3f"
        -: 4305:                           "404142434445464748494a4b4c4d4e4f"
        -: 4306:                           "505152535455565758595a5b5c5d5e5f"
        -: 4307:                           "606162636465666768696a6b6c6d6e6f"
        -: 4308:                           "707172737475767778797a7b7c7d7e7f"
        -: 4309:                           "808182838485868788898a8b8c8d8e8f"
        -: 4310:                           "909192939495969798999a9b9c9d9e9f"
        -: 4311:                           "a0a1a2a3a4a5a6a7a8a9aaabacadaeaf"
        -: 4312:                           "b0b1b2b3b4b5b6b7b8b9babbbcbdbebf"
        -: 4313:                           "c0c1c2c3c4c5c6c7c8c9cacbcccdcecf"
        -: 4314:                           "d0d1d2d3d4d5d6d7d8d9dadbdcdddedf"
        -: 4315:                           "e0e1e2e3e4e5e6e7e8e9eaebecedeeef"
        -: 4316:                           "f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff";
        -: 4317:
function _ZN4JsonL10toHex16BitEj called 0 returned 0% blocks executed 0%
    #####: 4318:static String toHex16Bit(unsigned int x) {
    #####: 4319:  const unsigned int hi = (x >> 8) & 0xff;
    #####: 4320:  const unsigned int lo = x & 0xff;
    #####: 4321:  String result(4, ' ');
    %%%%%: 4321-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4321-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 4321-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 4321-block  3
Aufruf  6 niemals ausgeführt
    #####: 4322:  result[0] = hex2[2 * hi];
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4323:  result[1] = hex2[2 * hi + 1];
    %%%%%: 4323-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4324:  result[2] = hex2[2 * lo];
    %%%%%: 4324-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4325:  result[3] = hex2[2 * lo + 1];
    %%%%%: 4325-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4326:  return result;
    %%%%%: 4326-block  0
    %%%%%: 4326-block  1
    =====: 4327:}
    $$$$$: 4327-block  0
Aufruf  0 niemals ausgeführt
        -: 4328:
function _ZN4JsonL9appendRawERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj called 0 returned 0% blocks executed 0%
    #####: 4329:static void appendRaw(String& result, unsigned ch) {
    #####: 4330:  result += static_cast<char>(ch);
    %%%%%: 4330-block  0
Aufruf  0 niemals ausgeführt
    #####: 4331:}
        -: 4332:
function _ZN4JsonL9appendHexERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj called 0 returned 0% blocks executed 0%
    #####: 4333:static void appendHex(String& result, unsigned ch) {
    #####: 4334:  result.append("\\u").append(toHex16Bit(ch));
    %%%%%: 4334-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4334-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4334-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 4334-block  3
Aufruf  8 niemals ausgeführt
    #####: 4335:}
        -: 4336:
function _ZN4JsonL20valueToQuotedStringNEPKcmb called 0 returned 0% blocks executed 0%
    #####: 4337:static String valueToQuotedStringN(const char* value, size_t length,
        -: 4338:                                   bool emitUTF8 = false) {
    #####: 4339:  if (value == nullptr)
    %%%%%: 4339-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4340:    return "";
    %%%%%: 4340-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4340-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 4340-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 4340-block  3
        -: 4341:
    #####: 4342:  if (!doesAnyCharRequireEscaping(value, length))
    %%%%%: 4342-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4342-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 4343:    return String("\"") + value + "\"";
    %%%%%: 4343-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4343-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4343-block  2
Aufruf  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%: 4343-block  3
Aufruf 10 niemals ausgeführt
Aufruf 11 niemals ausgeführt
Aufruf 12 niemals ausgeführt
    $$$$$: 4343-block  4
Aufruf 13 niemals ausgeführt
    $$$$$: 4343-block  5
Aufruf 14 niemals ausgeführt
    $$$$$: 4343-block  6
Aufruf 15 niemals ausgeführt
    $$$$$: 4343-block  7
    $$$$$: 4343-block  8
    $$$$$: 4343-block  9
        -: 4344:  // We have to walk value and escape any special characters.
        -: 4345:  // Appending to String is not efficient, but this should be rare.
        -: 4346:  // (Note: forward slashes are *not* rare, but I am not escaping them.)
    #####: 4347:  String::size_type maxsize = length * 2 + 3; // allescaped+quotes+NULL
    #####: 4348:  String result;
    %%%%%: 4348-block  0
Aufruf  0 niemals ausgeführt
    #####: 4349:  result.reserve(maxsize); // to avoid lots of mallocs
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4350:  result += "\"";
    %%%%%: 4350-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4351:  char const* end = value + length;
    #####: 4352:  for (const char* c = value; c != end; ++c) {
    %%%%%: 4352-block  0
    %%%%%: 4352-block  1
    %%%%%: 4352-block  2
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4353:    switch (*c) {
    %%%%%: 4353-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    #####: 4354:    case '\"':
    #####: 4355:      result += "\\\"";
    %%%%%: 4355-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4356:      break;
    %%%%%: 4356-block  0
    #####: 4357:    case '\\':
    #####: 4358:      result += "\\\\";
    %%%%%: 4358-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4359:      break;
    %%%%%: 4359-block  0
    #####: 4360:    case '\b':
    #####: 4361:      result += "\\b";
    %%%%%: 4361-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4362:      break;
    %%%%%: 4362-block  0
    #####: 4363:    case '\f':
    #####: 4364:      result += "\\f";
    %%%%%: 4364-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4365:      break;
    %%%%%: 4365-block  0
    #####: 4366:    case '\n':
    #####: 4367:      result += "\\n";
    %%%%%: 4367-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4368:      break;
    %%%%%: 4368-block  0
    #####: 4369:    case '\r':
    #####: 4370:      result += "\\r";
    %%%%%: 4370-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4371:      break;
    %%%%%: 4371-block  0
    #####: 4372:    case '\t':
    #####: 4373:      result += "\\t";
    %%%%%: 4373-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4374:      break;
    %%%%%: 4374-block  0
        -: 4375:    // case '/':
        -: 4376:    // Even though \/ is considered a legal escape in JSON, a bare
        -: 4377:    // slash is also legal, so I see no reason to escape it.
        -: 4378:    // (I hope I am not misunderstanding something.)
        -: 4379:    // blep notes: actually escaping \/ may be useful in javascript to avoid </
        -: 4380:    // sequence.
        -: 4381:    // Should add a flag to allow this compatibility mode and prevent this
        -: 4382:    // sequence from occurring.
    #####: 4383:    default: {
    #####: 4384:      if (emitUTF8) {
    %%%%%: 4384-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4385:        unsigned codepoint = static_cast<unsigned char>(*c);
    #####: 4386:        if (codepoint < 0x20) {
    %%%%%: 4386-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4387:          appendHex(result, codepoint);
    %%%%%: 4387-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4388:        } else {
    #####: 4389:          appendRaw(result, codepoint);
    %%%%%: 4389-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4390:        }
        -: 4391:      } else {
    #####: 4392:        unsigned codepoint = utf8ToCodepoint(c, end); // modifies `c`
    %%%%%: 4392-block  0
Aufruf  0 niemals ausgeführt
    #####: 4393:        if (codepoint < 0x20) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4394:          appendHex(result, codepoint);
    %%%%%: 4394-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4395:        } else if (codepoint < 0x80) {
    %%%%%: 4395-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4396:          appendRaw(result, codepoint);
    %%%%%: 4396-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4397:        } else if (codepoint < 0x10000) {
    %%%%%: 4397-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 4398:          // Basic Multilingual Plane
    #####: 4399:          appendHex(result, codepoint);
    %%%%%: 4399-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4400:        } else {
        -: 4401:          // Extended Unicode. Encode 20 bits as a surrogate pair.
    #####: 4402:          codepoint -= 0x10000;
    #####: 4403:          appendHex(result, 0xd800 + ((codepoint >> 10) & 0x3ff));
    %%%%%: 4403-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4404:          appendHex(result, 0xdc00 + (codepoint & 0x3ff));
    %%%%%: 4404-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4405:        }
        -: 4406:      }
    #####: 4407:    } break;
    %%%%%: 4407-block  0
        -: 4408:    }
        -: 4409:  }
    #####: 4410:  result += "\"";
    %%%%%: 4410-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4411:  return result;
    %%%%%: 4411-block  0
Aufruf  0 niemals ausgeführt
    #####: 4412:}
Aufruf  0 niemals ausgeführt
    $$$$$: 4412-block  0
Aufruf  1 niemals ausgeführt
        -: 4413:
function _ZN4Json19valueToQuotedStringB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4414:String valueToQuotedString(const char* value) {
    #####: 4415:  return valueToQuotedStringN(value, strlen(value));
    %%%%%: 4415-block  0
Aufruf  0 niemals ausgeführt
        -: 4416:}
        -: 4417:
        -: 4418:// Class Writer
        -: 4419:// //////////////////////////////////////////////////////////////////
    #####: 4420:Writer::~Writer() = default;
------------------
_ZN4Json6WriterD0Ev:
function _ZN4Json6WriterD0Ev called 0 returned 0% blocks executed 0%
    #####: 4420:Writer::~Writer() = default;
    %%%%%: 4420-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZN4Json6WriterD2Ev:
function _ZN4Json6WriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 4420:Writer::~Writer() = default;
------------------
        -: 4421:
        -: 4422:// Class FastWriter
        -: 4423:// //////////////////////////////////////////////////////////////////
        -: 4424:
function _ZN4Json10FastWriterC2Ev called 0 returned 0% blocks executed 0%
    #####: 4425:FastWriter::FastWriter()
    %%%%%: 4425-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4426:
        -: 4427:    = default;
        -: 4428:
function _ZN4Json10FastWriter23enableYAMLCompatibilityEv called 0 returned 0% blocks executed 0%
    #####: 4429:void FastWriter::enableYAMLCompatibility() { yamlCompatibilityEnabled_ = true; }
        -: 4430:
function _ZN4Json10FastWriter20dropNullPlaceholdersEv called 0 returned 0% blocks executed 0%
    #####: 4431:void FastWriter::dropNullPlaceholders() { dropNullPlaceholders_ = true; }
        -: 4432:
function _ZN4Json10FastWriter18omitEndingLineFeedEv called 0 returned 0% blocks executed 0%
    #####: 4433:void FastWriter::omitEndingLineFeed() { omitEndingLineFeed_ = true; }
        -: 4434:
function _ZN4Json10FastWriter5writeB5cxx11ERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4435:String FastWriter::write(const Value& root) {
    #####: 4436:  document_.clear();
    %%%%%: 4436-block  0
Aufruf  0 niemals ausgeführt
    #####: 4437:  writeValue(root);
Aufruf  0 niemals ausgeführt
    #####: 4438:  if (!omitEndingLineFeed_)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4439:    document_ += '\n';
    %%%%%: 4439-block  0
Aufruf  0 niemals ausgeführt
    #####: 4440:  return document_;
    %%%%%: 4440-block  0
Aufruf  0 niemals ausgeführt
        -: 4441:}
        -: 4442:
function _ZN4Json10FastWriter10writeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4443:void FastWriter::writeValue(const Value& value) {
    #####: 4444:  switch (value.type()) {
    %%%%%: 4444-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####: 4445:  case nullValue:
    #####: 4446:    if (!dropNullPlaceholders_)
    %%%%%: 4446-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4447:      document_ += "null";
    %%%%%: 4447-block  0
Aufruf  0 niemals ausgeführt
    #####: 4448:    break;
    %%%%%: 4448-block  0
    #####: 4449:  case intValue:
    #####: 4450:    document_ += valueToString(value.asLargestInt());
    %%%%%: 4450-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4450-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4450-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4450-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4450-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4450-block  5
Aufruf 11 niemals ausgeführt
    #####: 4451:    break;
    #####: 4452:  case uintValue:
    #####: 4453:    document_ += valueToString(value.asLargestUInt());
    %%%%%: 4453-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4453-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4453-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4453-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4453-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4453-block  5
Aufruf 11 niemals ausgeführt
    #####: 4454:    break;
    #####: 4455:  case realValue:
    #####: 4456:    document_ += valueToString(value.asDouble());
    %%%%%: 4456-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4456-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4456-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4456-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4456-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4456-block  5
Aufruf 11 niemals ausgeführt
    #####: 4457:    break;
    #####: 4458:  case stringValue: {
        -: 4459:    // Is NULL possible for value.string_? No.
        -: 4460:    char const* str;
        -: 4461:    char const* end;
    #####: 4462:    bool ok = value.getString(&str, &end);
    %%%%%: 4462-block  0
Aufruf  0 niemals ausgeführt
    #####: 4463:    if (ok)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4464:      document_ += valueToQuotedStringN(str, static_cast<size_t>(end - str));
    %%%%%: 4464-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4464-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4464-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 4464-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 4464-block  4
    #####: 4465:    break;
    %%%%%: 4465-block  0
        -: 4466:  }
    #####: 4467:  case booleanValue:
    #####: 4468:    document_ += valueToString(value.asBool());
    %%%%%: 4468-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4468-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4468-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4468-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4468-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4468-block  5
Aufruf 11 niemals ausgeführt
    #####: 4469:    break;
    #####: 4470:  case arrayValue: {
    #####: 4471:    document_ += '[';
    %%%%%: 4471-block  0
Aufruf  0 niemals ausgeführt
    #####: 4472:    ArrayIndex size = value.size();
Aufruf  0 niemals ausgeführt
    #####: 4473:    for (ArrayIndex index = 0; index < size; ++index) {
    %%%%%: 4473-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4474:      if (index > 0)
    %%%%%: 4474-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4475:        document_ += ',';
    %%%%%: 4475-block  0
Aufruf  0 niemals ausgeführt
    #####: 4476:      writeValue(value[index]);
    %%%%%: 4476-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4477:    }
    #####: 4478:    document_ += ']';
    %%%%%: 4478-block  0
Aufruf  0 niemals ausgeführt
    #####: 4479:  } break;
    #####: 4480:  case objectValue: {
    #####: 4481:    Value::Members members(value.getMemberNames());
    %%%%%: 4481-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4482:    document_ += '{';
    %%%%%: 4482-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4483:    for (auto it = members.begin(); it != members.end(); ++it) {
    %%%%%: 4483-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 4483-block  1
Aufruf  1 niemals ausgeführt
    %%%%%: 4483-block  2
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 4484:      const String& name = *it;
    %%%%%: 4484-block  0
Aufruf  0 niemals ausgeführt
    #####: 4485:      if (it != members.begin())
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4486:        document_ += ',';
    %%%%%: 4486-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4487:      document_ += valueToQuotedStringN(name.data(), name.length());
    %%%%%: 4487-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 4487-block  1
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 4487-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 4487-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4487-block  4
    #####: 4488:      document_ += yamlCompatibilityEnabled_ ? ": " : ":";
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4488-block  0
    %%%%%: 4488-block  1
    %%%%%: 4488-block  2
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 4489:      writeValue(value[name]);
    %%%%%: 4489-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4489-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -: 4490:    }
    #####: 4491:    document_ += '}';
    %%%%%: 4491-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4492:  } break;
    %%%%%: 4492-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 4492-block  1
Aufruf  1 niemals ausgeführt
        -: 4493:  }
    #####: 4494:}
    %%%%%: 4494-block  0
        -: 4495:
        -: 4496:// Class StyledWriter
        -: 4497:// //////////////////////////////////////////////////////////////////
        -: 4498:
function _ZN4Json12StyledWriterC2Ev called 0 returned 0% blocks executed 0%
    #####: 4499:StyledWriter::StyledWriter() = default;
    %%%%%: 4499-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
        -: 4500:
function _ZN4Json12StyledWriter5writeB5cxx11ERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4501:String StyledWriter::write(const Value& root) {
    #####: 4502:  document_.clear();
    %%%%%: 4502-block  0
Aufruf  0 niemals ausgeführt
    #####: 4503:  addChildValues_ = false;
    #####: 4504:  indentString_.clear();
Aufruf  0 niemals ausgeführt
    #####: 4505:  writeCommentBeforeValue(root);
Aufruf  0 niemals ausgeführt
    #####: 4506:  writeValue(root);
Aufruf  0 niemals ausgeführt
    #####: 4507:  writeCommentAfterValueOnSameLine(root);
Aufruf  0 niemals ausgeführt
    #####: 4508:  document_ += '\n';
Aufruf  0 niemals ausgeführt
    #####: 4509:  return document_;
Aufruf  0 niemals ausgeführt
        -: 4510:}
        -: 4511:
function _ZN4Json12StyledWriter10writeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4512:void StyledWriter::writeValue(const Value& value) {
    #####: 4513:  switch (value.type()) {
    %%%%%: 4513-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####: 4514:  case nullValue:
    #####: 4515:    pushValue("null");
    %%%%%: 4515-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4515-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4515-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4515-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4515-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4515-block  5
    $$$$$: 4515-block  6
Aufruf 11 niemals ausgeführt
    #####: 4516:    break;
    #####: 4517:  case intValue:
    #####: 4518:    pushValue(valueToString(value.asLargestInt()));
    %%%%%: 4518-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4518-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4518-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4518-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4518-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4518-block  5
Aufruf 11 niemals ausgeführt
    #####: 4519:    break;
    #####: 4520:  case uintValue:
    #####: 4521:    pushValue(valueToString(value.asLargestUInt()));
    %%%%%: 4521-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4521-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4521-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4521-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4521-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4521-block  5
Aufruf 11 niemals ausgeführt
    #####: 4522:    break;
    #####: 4523:  case realValue:
    #####: 4524:    pushValue(valueToString(value.asDouble()));
    %%%%%: 4524-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4524-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4524-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4524-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4524-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4524-block  5
Aufruf 11 niemals ausgeführt
    #####: 4525:    break;
    #####: 4526:  case stringValue: {
        -: 4527:    // Is NULL possible for value.string_? No.
        -: 4528:    char const* str;
        -: 4529:    char const* end;
    #####: 4530:    bool ok = value.getString(&str, &end);
    %%%%%: 4530-block  0
Aufruf  0 niemals ausgeführt
    #####: 4531:    if (ok)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4532:      pushValue(valueToQuotedStringN(str, static_cast<size_t>(end - str)));
    %%%%%: 4532-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4532-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4532-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 4532-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 4532-block  4
        -: 4533:    else
    #####: 4534:      pushValue("");
    %%%%%: 4534-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4534-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4534-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4534-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4534-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4534-block  5
    $$$$$: 4534-block  6
    #####: 4535:    break;
    %%%%%: 4535-block  0
        -: 4536:  }
    #####: 4537:  case booleanValue:
    #####: 4538:    pushValue(valueToString(value.asBool()));
    %%%%%: 4538-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4538-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4538-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4538-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4538-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4538-block  5
Aufruf 11 niemals ausgeführt
    #####: 4539:    break;
    #####: 4540:  case arrayValue:
    #####: 4541:    writeArrayValue(value);
    %%%%%: 4541-block  0
Aufruf  0 niemals ausgeführt
    #####: 4542:    break;
    #####: 4543:  case objectValue: {
    #####: 4544:    Value::Members members(value.getMemberNames());
    %%%%%: 4544-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4545:    if (members.empty())
    %%%%%: 4545-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4546:      pushValue("{}");
    %%%%%: 4546-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4546-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4546-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4546-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4546-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4546-block  5
    $$$$$: 4546-block  6
        -: 4547:    else {
    #####: 4548:      writeWithIndent("{");
    %%%%%: 4548-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4548-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4548-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4548-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4548-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4548-block  5
    $$$$$: 4548-block  6
    #####: 4549:      indent();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4550:      auto it = members.begin();
    %%%%%: 4550-block  0
Aufruf  0 niemals ausgeführt
        -: 4551:      for (;;) {
    #####: 4552:        const String& name = *it;
    %%%%%: 4552-block  0
Aufruf  0 niemals ausgeführt
    #####: 4553:        const Value& childValue = value[name];
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4554:        writeCommentBeforeValue(childValue);
    %%%%%: 4554-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4555:        writeWithIndent(valueToQuotedString(name.c_str()));
    %%%%%: 4555-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4555-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4555-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 4555-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 4555-block  4
    #####: 4556:        document_ += " : ";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4557:        writeValue(childValue);
    %%%%%: 4557-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4558:        if (++it == members.end()) {
    %%%%%: 4558-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 4559:          writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 4559-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4560:          break;
    %%%%%: 4560-block  0
        -: 4561:        }
    #####: 4562:        document_ += ',';
    %%%%%: 4562-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4563:        writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 4563-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4564:      }
    %%%%%: 4564-block  0
    #####: 4565:      unindent();
    %%%%%: 4565-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4566:      writeWithIndent("}");
    %%%%%: 4566-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4566-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4566-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4566-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4566-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4566-block  5
    $$$$$: 4566-block  6
        -: 4567:    }
    #####: 4568:  } break;
    %%%%%: 4568-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 4568-block  1
Aufruf  1 niemals ausgeführt
        -: 4569:  }
    #####: 4570:}
    %%%%%: 4570-block  0
        -: 4571:
function _ZN4Json12StyledWriter15writeArrayValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4572:void StyledWriter::writeArrayValue(const Value& value) {
    #####: 4573:  size_t size = value.size();
    %%%%%: 4573-block  0
Aufruf  0 niemals ausgeführt
    #####: 4574:  if (size == 0)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4575:    pushValue("[]");
    %%%%%: 4575-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4575-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4575-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4575-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4575-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4575-block  5
    $$$$$: 4575-block  6
Aufruf 11 niemals ausgeführt
        -: 4576:  else {
    #####: 4577:    bool isArrayMultiLine = isMultilineArray(value);
    %%%%%: 4577-block  0
Aufruf  0 niemals ausgeführt
    #####: 4578:    if (isArrayMultiLine) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4579:      writeWithIndent("[");
    %%%%%: 4579-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4579-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4579-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4579-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4579-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4579-block  5
    $$$$$: 4579-block  6
Aufruf 11 niemals ausgeführt
    #####: 4580:      indent();
Aufruf  0 niemals ausgeführt
    #####: 4581:      bool hasChildValue = !childValues_.empty();
Aufruf  0 niemals ausgeführt
    #####: 4582:      ArrayIndex index = 0;
        -: 4583:      for (;;) {
    #####: 4584:        const Value& childValue = value[index];
    %%%%%: 4584-block  0
Aufruf  0 niemals ausgeführt
    #####: 4585:        writeCommentBeforeValue(childValue);
Aufruf  0 niemals ausgeführt
    #####: 4586:        if (hasChildValue)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4587:          writeWithIndent(childValues_[index]);
    %%%%%: 4587-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4588:        else {
    #####: 4589:          writeIndent();
    %%%%%: 4589-block  0
Aufruf  0 niemals ausgeführt
    #####: 4590:          writeValue(childValue);
Aufruf  0 niemals ausgeführt
        -: 4591:        }
    #####: 4592:        if (++index == size) {
    %%%%%: 4592-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4593:          writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 4593-block  0
Aufruf  0 niemals ausgeführt
    #####: 4594:          break;
        -: 4595:        }
    #####: 4596:        document_ += ',';
    %%%%%: 4596-block  0
Aufruf  0 niemals ausgeführt
    #####: 4597:        writeCommentAfterValueOnSameLine(childValue);
Aufruf  0 niemals ausgeführt
    #####: 4598:      }
    #####: 4599:      unindent();
    %%%%%: 4599-block  0
Aufruf  0 niemals ausgeführt
    #####: 4600:      writeWithIndent("]");
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4600-block  0
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4600-block  1
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4600-block  2
Aufruf  9 niemals ausgeführt
    $$$$$: 4600-block  3
Aufruf 10 niemals ausgeführt
    $$$$$: 4600-block  4
        -: 4601:    } else // output on a single line
        -: 4602:    {
    #####: 4603:      assert(childValues_.size() == size);
    %%%%%: 4603-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4603-block  1
Aufruf  3 niemals ausgeführt
    #####: 4604:      document_ += "[ ";
    %%%%%: 4604-block  0
Aufruf  0 niemals ausgeführt
    #####: 4605:      for (size_t index = 0; index < size; ++index) {
    %%%%%: 4605-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4606:        if (index > 0)
    %%%%%: 4606-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4607:          document_ += ", ";
    %%%%%: 4607-block  0
Aufruf  0 niemals ausgeführt
    #####: 4608:        document_ += childValues_[index];
    %%%%%: 4608-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4609:      }
    #####: 4610:      document_ += " ]";
    %%%%%: 4610-block  0
Aufruf  0 niemals ausgeführt
        -: 4611:    }
        -: 4612:  }
    #####: 4613:}
    %%%%%: 4613-block  0
        -: 4614:
function _ZN4Json12StyledWriter16isMultilineArrayERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4615:bool StyledWriter::isMultilineArray(const Value& value) {
    #####: 4616:  ArrayIndex const size = value.size();
    %%%%%: 4616-block  0
Aufruf  0 niemals ausgeführt
    #####: 4617:  bool isMultiLine = size * 3 >= rightMargin_;
    #####: 4618:  childValues_.clear();
Aufruf  0 niemals ausgeführt
    #####: 4619:  for (ArrayIndex index = 0; index < size && !isMultiLine; ++index) {
    %%%%%: 4619-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4619-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4620:    const Value& childValue = value[index];
    %%%%%: 4620-block  0
Aufruf  0 niemals ausgeführt
    #####: 4621:    isMultiLine = ((childValue.isArray() || childValue.isObject()) &&
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4621-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4621-block  1
    %%%%%: 4621-block  2
    %%%%%: 4621-block  3
    #####: 4622:                   !childValue.empty());
    %%%%%: 4622-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4623:  }
    #####: 4624:  if (!isMultiLine) // check if line length > max line length
    %%%%%: 4624-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 4625:  {
    #####: 4626:    childValues_.reserve(size);
    %%%%%: 4626-block  0
Aufruf  0 niemals ausgeführt
    #####: 4627:    addChildValues_ = true;
    #####: 4628:    ArrayIndex lineLength = 4 + (size - 1) * 2; // '[ ' + ', '*n + ' ]'
    #####: 4629:    for (ArrayIndex index = 0; index < size; ++index) {
    %%%%%: 4629-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4630:      if (hasCommentForValue(value[index])) {
    %%%%%: 4630-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4631:        isMultiLine = true;
    %%%%%: 4631-block  0
        -: 4632:      }
    #####: 4633:      writeValue(value[index]);
    %%%%%: 4633-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4634:      lineLength += static_cast<ArrayIndex>(childValues_[index].length());
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4635:    }
    #####: 4636:    addChildValues_ = false;
    #####: 4637:    isMultiLine = isMultiLine || lineLength >= rightMargin_;
    %%%%%: 4637-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4637-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4637-block  2
    %%%%%: 4637-block  3
    %%%%%: 4637-block  4
        -: 4638:  }
    #####: 4639:  return isMultiLine;
    %%%%%: 4639-block  0
        -: 4640:}
        -: 4641:
function _ZN4Json12StyledWriter9pushValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4642:void StyledWriter::pushValue(const String& value) {
    #####: 4643:  if (addChildValues_)
    %%%%%: 4643-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4644:    childValues_.push_back(value);
    %%%%%: 4644-block  0
Aufruf  0 niemals ausgeführt
        -: 4645:  else
    #####: 4646:    document_ += value;
    %%%%%: 4646-block  0
Aufruf  0 niemals ausgeführt
    #####: 4647:}
        -: 4648:
function _ZN4Json12StyledWriter11writeIndentEv called 0 returned 0% blocks executed 0%
    #####: 4649:void StyledWriter::writeIndent() {
    #####: 4650:  if (!document_.empty()) {
    %%%%%: 4650-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4651:    char last = document_[document_.length() - 1];
    %%%%%: 4651-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4652:    if (last == ' ') // already indented
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4653:      return;
    %%%%%: 4653-block  0
    #####: 4654:    if (last != '\n') // Comments may add new-line
    %%%%%: 4654-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4655:      document_ += '\n';
    %%%%%: 4655-block  0
Aufruf  0 niemals ausgeführt
        -: 4656:  }
    #####: 4657:  document_ += indentString_;
    %%%%%: 4657-block  0
Aufruf  0 niemals ausgeführt
        -: 4658:}
        -: 4659:
function _ZN4Json12StyledWriter15writeWithIndentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4660:void StyledWriter::writeWithIndent(const String& value) {
    #####: 4661:  writeIndent();
    %%%%%: 4661-block  0
Aufruf  0 niemals ausgeführt
    #####: 4662:  document_ += value;
Aufruf  0 niemals ausgeführt
    #####: 4663:}
        -: 4664:
function _ZN4Json12StyledWriter6indentEv called 0 returned 0% blocks executed 0%
    #####: 4665:void StyledWriter::indent() { indentString_ += String(indentSize_, ' '); }
    %%%%%: 4665-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4665-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4665-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4665-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4665-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4665-block  5
        -: 4666:
function _ZN4Json12StyledWriter8unindentEv called 0 returned 0% blocks executed 0%
    #####: 4667:void StyledWriter::unindent() {
    #####: 4668:  assert(indentString_.size() >= indentSize_);
    %%%%%: 4668-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4668-block  1
Aufruf  3 niemals ausgeführt
    #####: 4669:  indentString_.resize(indentString_.size() - indentSize_);
    %%%%%: 4669-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4670:}
        -: 4671:
function _ZN4Json12StyledWriter23writeCommentBeforeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4672:void StyledWriter::writeCommentBeforeValue(const Value& root) {
    #####: 4673:  if (!root.hasComment(commentBefore))
    %%%%%: 4673-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4674:    return;
    %%%%%: 4674-block  0
        -: 4675:
    #####: 4676:  document_ += '\n';
    %%%%%: 4676-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4677:  writeIndent();
    %%%%%: 4677-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4678:  const String& comment = root.getComment(commentBefore);
    %%%%%: 4678-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4679:  String::const_iterator iter = comment.begin();
    %%%%%: 4679-block  0
Aufruf  0 niemals ausgeführt
    #####: 4680:  while (iter != comment.end()) {
    %%%%%: 4680-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4681:    document_ += *iter;
    %%%%%: 4681-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4682:    if (*iter == '\n' && ((iter + 1) != comment.end() && *(iter + 1) == '/'))
    %%%%%: 4682-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4682-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 4682-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 4682-block  3
    %%%%%: 4682-block  4
    %%%%%: 4682-block  5
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    #####: 4683:      writeIndent();
    %%%%%: 4683-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4684:    ++iter;
    %%%%%: 4684-block  0
Aufruf  0 niemals ausgeführt
        -: 4685:  }
        -: 4686:
        -: 4687:  // Comments are stripped of trailing newlines, so add one here
    #####: 4688:  document_ += '\n';
    %%%%%: 4688-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4689:}
    %%%%%: 4689-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 4689-block  1
Aufruf  1 niemals ausgeführt
        -: 4690:
function _ZN4Json12StyledWriter32writeCommentAfterValueOnSameLineERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4691:void StyledWriter::writeCommentAfterValueOnSameLine(const Value& root) {
    #####: 4692:  if (root.hasComment(commentAfterOnSameLine))
    %%%%%: 4692-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4693:    document_ += " " + root.getComment(commentAfterOnSameLine);
    %%%%%: 4693-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4693-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4693-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4693-block  3
Aufruf  9 niemals ausgeführt
Aufruf 10 niemals ausgeführt
    $$$$$: 4693-block  4
Aufruf 11 niemals ausgeführt
    $$$$$: 4693-block  5
Aufruf 12 niemals ausgeführt
    $$$$$: 4693-block  6
    $$$$$: 4693-block  7
Aufruf 13 niemals ausgeführt
        -: 4694:
    #####: 4695:  if (root.hasComment(commentAfter)) {
    %%%%%: 4695-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4696:    document_ += '\n';
    %%%%%: 4696-block  0
Aufruf  0 niemals ausgeführt
    #####: 4697:    document_ += root.getComment(commentAfter);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4697-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4697-block  1
Aufruf  6 niemals ausgeführt
    $$$$$: 4697-block  2
Aufruf  7 niemals ausgeführt
    #####: 4698:    document_ += '\n';
Aufruf  0 niemals ausgeführt
        -: 4699:  }
    #####: 4700:}
    %%%%%: 4700-block  0
        -: 4701:
function _ZN4Json12StyledWriter18hasCommentForValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4702:bool StyledWriter::hasCommentForValue(const Value& value) {
    #####: 4703:  return value.hasComment(commentBefore) ||
    %%%%%: 4703-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4704:         value.hasComment(commentAfterOnSameLine) ||
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4704-block  0
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 4704-block  1
    %%%%%: 4704-block  2
    #####: 4705:         value.hasComment(commentAfter);
    %%%%%: 4705-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 4705-block  1
        -: 4706:}
        -: 4707:
        -: 4708:// Class StyledStreamWriter
        -: 4709:// //////////////////////////////////////////////////////////////////
        -: 4710:
function _ZN4Json18StyledStreamWriterC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4711:StyledStreamWriter::StyledStreamWriter(String indentation)
    #####: 4712:    : document_(nullptr), indentation_(std::move(indentation)),
Aufruf  0 niemals ausgeführt
    #####: 4713:      addChildValues_(), indented_(false) {}
    %%%%%: 4713-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
        -: 4714:
function _ZN4Json18StyledStreamWriter5writeERSoRKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4715:void StyledStreamWriter::write(OStream& out, const Value& root) {
    #####: 4716:  document_ = &out;
    #####: 4717:  addChildValues_ = false;
    #####: 4718:  indentString_.clear();
    %%%%%: 4718-block  0
Aufruf  0 niemals ausgeführt
    #####: 4719:  indented_ = true;
    #####: 4720:  writeCommentBeforeValue(root);
Aufruf  0 niemals ausgeführt
    #####: 4721:  if (!indented_)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4722:    writeIndent();
    %%%%%: 4722-block  0
Aufruf  0 niemals ausgeführt
    #####: 4723:  indented_ = true;
    #####: 4724:  writeValue(root);
    %%%%%: 4724-block  0
Aufruf  0 niemals ausgeführt
    #####: 4725:  writeCommentAfterValueOnSameLine(root);
Aufruf  0 niemals ausgeführt
    #####: 4726:  *document_ << "\n";
Aufruf  0 niemals ausgeführt
    #####: 4727:  document_ = nullptr; // Forget the stream, for safety.
    #####: 4728:}
        -: 4729:
function _ZN4Json18StyledStreamWriter10writeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4730:void StyledStreamWriter::writeValue(const Value& value) {
    #####: 4731:  switch (value.type()) {
    %%%%%: 4731-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####: 4732:  case nullValue:
    #####: 4733:    pushValue("null");
    %%%%%: 4733-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4733-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4733-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4733-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4733-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4733-block  5
    $$$$$: 4733-block  6
Aufruf 11 niemals ausgeführt
    #####: 4734:    break;
    #####: 4735:  case intValue:
    #####: 4736:    pushValue(valueToString(value.asLargestInt()));
    %%%%%: 4736-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4736-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4736-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4736-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4736-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4736-block  5
Aufruf 11 niemals ausgeführt
    #####: 4737:    break;
    #####: 4738:  case uintValue:
    #####: 4739:    pushValue(valueToString(value.asLargestUInt()));
    %%%%%: 4739-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4739-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4739-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4739-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4739-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4739-block  5
Aufruf 11 niemals ausgeführt
    #####: 4740:    break;
    #####: 4741:  case realValue:
    #####: 4742:    pushValue(valueToString(value.asDouble()));
    %%%%%: 4742-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4742-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4742-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4742-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4742-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4742-block  5
Aufruf 11 niemals ausgeführt
    #####: 4743:    break;
    #####: 4744:  case stringValue: {
        -: 4745:    // Is NULL possible for value.string_? No.
        -: 4746:    char const* str;
        -: 4747:    char const* end;
    #####: 4748:    bool ok = value.getString(&str, &end);
    %%%%%: 4748-block  0
Aufruf  0 niemals ausgeführt
    #####: 4749:    if (ok)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4750:      pushValue(valueToQuotedStringN(str, static_cast<size_t>(end - str)));
    %%%%%: 4750-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4750-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4750-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 4750-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 4750-block  4
        -: 4751:    else
    #####: 4752:      pushValue("");
    %%%%%: 4752-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4752-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4752-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4752-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4752-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4752-block  5
    $$$$$: 4752-block  6
    #####: 4753:    break;
    %%%%%: 4753-block  0
        -: 4754:  }
    #####: 4755:  case booleanValue:
    #####: 4756:    pushValue(valueToString(value.asBool()));
    %%%%%: 4756-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4756-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4756-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 4756-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4756-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4756-block  5
Aufruf 11 niemals ausgeführt
    #####: 4757:    break;
    #####: 4758:  case arrayValue:
    #####: 4759:    writeArrayValue(value);
    %%%%%: 4759-block  0
Aufruf  0 niemals ausgeführt
    #####: 4760:    break;
    #####: 4761:  case objectValue: {
    #####: 4762:    Value::Members members(value.getMemberNames());
    %%%%%: 4762-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4763:    if (members.empty())
    %%%%%: 4763-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4764:      pushValue("{}");
    %%%%%: 4764-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4764-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4764-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4764-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4764-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4764-block  5
    $$$$$: 4764-block  6
        -: 4765:    else {
    #####: 4766:      writeWithIndent("{");
    %%%%%: 4766-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4766-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4766-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4766-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4766-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4766-block  5
    $$$$$: 4766-block  6
    #####: 4767:      indent();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4768:      auto it = members.begin();
    %%%%%: 4768-block  0
Aufruf  0 niemals ausgeführt
        -: 4769:      for (;;) {
    #####: 4770:        const String& name = *it;
    %%%%%: 4770-block  0
Aufruf  0 niemals ausgeführt
    #####: 4771:        const Value& childValue = value[name];
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4772:        writeCommentBeforeValue(childValue);
    %%%%%: 4772-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4773:        writeWithIndent(valueToQuotedString(name.c_str()));
    %%%%%: 4773-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4773-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4773-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 4773-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 4773-block  4
    #####: 4774:        *document_ << " : ";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4775:        writeValue(childValue);
    %%%%%: 4775-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4776:        if (++it == members.end()) {
    %%%%%: 4776-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 4777:          writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 4777-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4778:          break;
    %%%%%: 4778-block  0
        -: 4779:        }
    #####: 4780:        *document_ << ",";
    %%%%%: 4780-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4781:        writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 4781-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4782:      }
    %%%%%: 4782-block  0
    #####: 4783:      unindent();
    %%%%%: 4783-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4784:      writeWithIndent("}");
    %%%%%: 4784-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4784-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4784-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4784-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4784-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4784-block  5
    $$$$$: 4784-block  6
        -: 4785:    }
    #####: 4786:  } break;
    %%%%%: 4786-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 4786-block  1
Aufruf  1 niemals ausgeführt
        -: 4787:  }
    #####: 4788:}
    %%%%%: 4788-block  0
        -: 4789:
function _ZN4Json18StyledStreamWriter15writeArrayValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4790:void StyledStreamWriter::writeArrayValue(const Value& value) {
    #####: 4791:  unsigned size = value.size();
    %%%%%: 4791-block  0
Aufruf  0 niemals ausgeführt
    #####: 4792:  if (size == 0)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4793:    pushValue("[]");
    %%%%%: 4793-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4793-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4793-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4793-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4793-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4793-block  5
    $$$$$: 4793-block  6
Aufruf 11 niemals ausgeführt
        -: 4794:  else {
    #####: 4795:    bool isArrayMultiLine = isMultilineArray(value);
    %%%%%: 4795-block  0
Aufruf  0 niemals ausgeführt
    #####: 4796:    if (isArrayMultiLine) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4797:      writeWithIndent("[");
    %%%%%: 4797-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4797-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4797-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4797-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 4797-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 4797-block  5
    $$$$$: 4797-block  6
Aufruf 11 niemals ausgeführt
    #####: 4798:      indent();
Aufruf  0 niemals ausgeführt
    #####: 4799:      bool hasChildValue = !childValues_.empty();
Aufruf  0 niemals ausgeführt
    #####: 4800:      unsigned index = 0;
        -: 4801:      for (;;) {
    #####: 4802:        const Value& childValue = value[index];
    %%%%%: 4802-block  0
Aufruf  0 niemals ausgeführt
    #####: 4803:        writeCommentBeforeValue(childValue);
Aufruf  0 niemals ausgeführt
    #####: 4804:        if (hasChildValue)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4805:          writeWithIndent(childValues_[index]);
    %%%%%: 4805-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4806:        else {
    #####: 4807:          if (!indented_)
    %%%%%: 4807-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4808:            writeIndent();
    %%%%%: 4808-block  0
Aufruf  0 niemals ausgeführt
    #####: 4809:          indented_ = true;
    #####: 4810:          writeValue(childValue);
    %%%%%: 4810-block  0
Aufruf  0 niemals ausgeführt
    #####: 4811:          indented_ = false;
        -: 4812:        }
    #####: 4813:        if (++index == size) {
    %%%%%: 4813-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4814:          writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 4814-block  0
Aufruf  0 niemals ausgeführt
    #####: 4815:          break;
        -: 4816:        }
    #####: 4817:        *document_ << ",";
    %%%%%: 4817-block  0
Aufruf  0 niemals ausgeführt
    #####: 4818:        writeCommentAfterValueOnSameLine(childValue);
Aufruf  0 niemals ausgeführt
    #####: 4819:      }
    #####: 4820:      unindent();
    %%%%%: 4820-block  0
Aufruf  0 niemals ausgeführt
    #####: 4821:      writeWithIndent("]");
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4821-block  0
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4821-block  1
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 4821-block  2
Aufruf  9 niemals ausgeführt
    $$$$$: 4821-block  3
Aufruf 10 niemals ausgeführt
    $$$$$: 4821-block  4
        -: 4822:    } else // output on a single line
        -: 4823:    {
    #####: 4824:      assert(childValues_.size() == size);
    %%%%%: 4824-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4824-block  1
Aufruf  3 niemals ausgeführt
    #####: 4825:      *document_ << "[ ";
    %%%%%: 4825-block  0
Aufruf  0 niemals ausgeführt
    #####: 4826:      for (unsigned index = 0; index < size; ++index) {
    %%%%%: 4826-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4827:        if (index > 0)
    %%%%%: 4827-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4828:          *document_ << ", ";
    %%%%%: 4828-block  0
Aufruf  0 niemals ausgeführt
    #####: 4829:        *document_ << childValues_[index];
    %%%%%: 4829-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4830:      }
    #####: 4831:      *document_ << " ]";
    %%%%%: 4831-block  0
Aufruf  0 niemals ausgeführt
        -: 4832:    }
        -: 4833:  }
    #####: 4834:}
    %%%%%: 4834-block  0
        -: 4835:
function _ZN4Json18StyledStreamWriter16isMultilineArrayERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4836:bool StyledStreamWriter::isMultilineArray(const Value& value) {
    #####: 4837:  ArrayIndex const size = value.size();
    %%%%%: 4837-block  0
Aufruf  0 niemals ausgeführt
    #####: 4838:  bool isMultiLine = size * 3 >= rightMargin_;
    #####: 4839:  childValues_.clear();
Aufruf  0 niemals ausgeführt
    #####: 4840:  for (ArrayIndex index = 0; index < size && !isMultiLine; ++index) {
    %%%%%: 4840-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4840-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4841:    const Value& childValue = value[index];
    %%%%%: 4841-block  0
Aufruf  0 niemals ausgeführt
    #####: 4842:    isMultiLine = ((childValue.isArray() || childValue.isObject()) &&
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4842-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4842-block  1
    %%%%%: 4842-block  2
    %%%%%: 4842-block  3
    #####: 4843:                   !childValue.empty());
    %%%%%: 4843-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 4844:  }
    #####: 4845:  if (!isMultiLine) // check if line length > max line length
    %%%%%: 4845-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 4846:  {
    #####: 4847:    childValues_.reserve(size);
    %%%%%: 4847-block  0
Aufruf  0 niemals ausgeführt
    #####: 4848:    addChildValues_ = true;
    #####: 4849:    ArrayIndex lineLength = 4 + (size - 1) * 2; // '[ ' + ', '*n + ' ]'
    #####: 4850:    for (ArrayIndex index = 0; index < size; ++index) {
    %%%%%: 4850-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4851:      if (hasCommentForValue(value[index])) {
    %%%%%: 4851-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4852:        isMultiLine = true;
    %%%%%: 4852-block  0
        -: 4853:      }
    #####: 4854:      writeValue(value[index]);
    %%%%%: 4854-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4855:      lineLength += static_cast<ArrayIndex>(childValues_[index].length());
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 4856:    }
    #####: 4857:    addChildValues_ = false;
    #####: 4858:    isMultiLine = isMultiLine || lineLength >= rightMargin_;
    %%%%%: 4858-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4858-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4858-block  2
    %%%%%: 4858-block  3
    %%%%%: 4858-block  4
        -: 4859:  }
    #####: 4860:  return isMultiLine;
    %%%%%: 4860-block  0
        -: 4861:}
        -: 4862:
function _ZN4Json18StyledStreamWriter9pushValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4863:void StyledStreamWriter::pushValue(const String& value) {
    #####: 4864:  if (addChildValues_)
    %%%%%: 4864-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4865:    childValues_.push_back(value);
    %%%%%: 4865-block  0
Aufruf  0 niemals ausgeführt
        -: 4866:  else
    #####: 4867:    *document_ << value;
    %%%%%: 4867-block  0
Aufruf  0 niemals ausgeführt
    #####: 4868:}
        -: 4869:
function _ZN4Json18StyledStreamWriter11writeIndentEv called 0 returned 0% blocks executed 0%
    #####: 4870:void StyledStreamWriter::writeIndent() {
        -: 4871:  // blep intended this to look at the so-far-written string
        -: 4872:  // to determine whether we are already indented, but
        -: 4873:  // with a stream we cannot do that. So we rely on some saved state.
        -: 4874:  // The caller checks indented_.
    #####: 4875:  *document_ << '\n' << indentString_;
    %%%%%: 4875-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4876:}
        -: 4877:
function _ZN4Json18StyledStreamWriter15writeWithIndentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4878:void StyledStreamWriter::writeWithIndent(const String& value) {
    #####: 4879:  if (!indented_)
    %%%%%: 4879-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4880:    writeIndent();
    %%%%%: 4880-block  0
Aufruf  0 niemals ausgeführt
    #####: 4881:  *document_ << value;
    %%%%%: 4881-block  0
Aufruf  0 niemals ausgeführt
    #####: 4882:  indented_ = false;
    #####: 4883:}
        -: 4884:
function _ZN4Json18StyledStreamWriter6indentEv called 0 returned 0% blocks executed 0%
    #####: 4885:void StyledStreamWriter::indent() { indentString_ += indentation_; }
    %%%%%: 4885-block  0
Aufruf  0 niemals ausgeführt
        -: 4886:
function _ZN4Json18StyledStreamWriter8unindentEv called 0 returned 0% blocks executed 0%
    #####: 4887:void StyledStreamWriter::unindent() {
    #####: 4888:  assert(indentString_.size() >= indentation_.size());
    %%%%%: 4888-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4888-block  1
Aufruf  4 niemals ausgeführt
    #####: 4889:  indentString_.resize(indentString_.size() - indentation_.size());
    %%%%%: 4889-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    #####: 4890:}
        -: 4891:
function _ZN4Json18StyledStreamWriter23writeCommentBeforeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4892:void StyledStreamWriter::writeCommentBeforeValue(const Value& root) {
    #####: 4893:  if (!root.hasComment(commentBefore))
    %%%%%: 4893-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4894:    return;
    %%%%%: 4894-block  0
        -: 4895:
    #####: 4896:  if (!indented_)
    %%%%%: 4896-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4897:    writeIndent();
    %%%%%: 4897-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4898:  const String& comment = root.getComment(commentBefore);
    %%%%%: 4898-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4899:  String::const_iterator iter = comment.begin();
    %%%%%: 4899-block  0
Aufruf  0 niemals ausgeführt
    #####: 4900:  while (iter != comment.end()) {
    %%%%%: 4900-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4901:    *document_ << *iter;
    %%%%%: 4901-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 4902:    if (*iter == '\n' && ((iter + 1) != comment.end() && *(iter + 1) == '/'))
    %%%%%: 4902-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4902-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 4902-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 4902-block  3
    %%%%%: 4902-block  4
    %%%%%: 4902-block  5
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
        -: 4903:      // writeIndent();  // would include newline
    #####: 4904:      *document_ << indentString_;
    %%%%%: 4904-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4905:    ++iter;
    %%%%%: 4905-block  0
Aufruf  0 niemals ausgeführt
        -: 4906:  }
    #####: 4907:  indented_ = false;
    #####: 4908:}
    %%%%%: 4908-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 4908-block  1
Aufruf  1 niemals ausgeführt
        -: 4909:
function _ZN4Json18StyledStreamWriter32writeCommentAfterValueOnSameLineERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4910:void StyledStreamWriter::writeCommentAfterValueOnSameLine(const Value& root) {
    #####: 4911:  if (root.hasComment(commentAfterOnSameLine))
    %%%%%: 4911-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4912:    *document_ << ' ' << root.getComment(commentAfterOnSameLine);
    %%%%%: 4912-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 4912-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 4912-block  2
Aufruf  7 niemals ausgeführt
    $$$$$: 4912-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 4912-block  4
Aufruf  9 niemals ausgeführt
        -: 4913:
    #####: 4914:  if (root.hasComment(commentAfter)) {
    %%%%%: 4914-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4915:    writeIndent();
    %%%%%: 4915-block  0
Aufruf  0 niemals ausgeführt
    #####: 4916:    *document_ << root.getComment(commentAfter);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 4916-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 4916-block  1
Aufruf  6 niemals ausgeführt
    $$$$$: 4916-block  2
Aufruf  7 niemals ausgeführt
        -: 4917:  }
    #####: 4918:  indented_ = false;
    #####: 4919:}
    %%%%%: 4919-block  0
        -: 4920:
function _ZN4Json18StyledStreamWriter18hasCommentForValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 4921:bool StyledStreamWriter::hasCommentForValue(const Value& value) {
    #####: 4922:  return value.hasComment(commentBefore) ||
    %%%%%: 4922-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 4923:         value.hasComment(commentAfterOnSameLine) ||
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 4923-block  0
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 4923-block  1
    %%%%%: 4923-block  2
    #####: 4924:         value.hasComment(commentAfter);
    %%%%%: 4924-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 4924-block  1
        -: 4925:}
        -: 4926:
        -: 4927://////////////////////////
        -: 4928:// BuiltStyledStreamWriter
        -: 4929:
        -: 4930:/// Scoped enums are not available until C++11.
        -: 4931:struct CommentStyle {
        -: 4932:  /// Decide whether to write comments.
        -: 4933:  enum Enum {
        -: 4934:    None, ///< Drop all comments.
        -: 4935:    Most, ///< Recover odd behavior of previous versions (not implemented yet).
        -: 4936:    All   ///< Keep all comments.
        -: 4937:  };
        -: 4938:};
        -: 4939:
        -: 4940:struct BuiltStyledStreamWriter : public StreamWriter {
        -: 4941:  BuiltStyledStreamWriter(String indentation, CommentStyle::Enum cs,
        -: 4942:                          String colonSymbol, String nullSymbol,
        -: 4943:                          String endingLineFeedSymbol, bool useSpecialFloats,
        -: 4944:                          bool emitUTF8, unsigned int precision,
        -: 4945:                          PrecisionType precisionType);
        -: 4946:  int write(Value const& root, OStream* sout) override;
        -: 4947:
        -: 4948:private:
        -: 4949:  void writeValue(Value const& value);
        -: 4950:  void writeArrayValue(Value const& value);
        -: 4951:  bool isMultilineArray(Value const& value);
        -: 4952:  void pushValue(String const& value);
        -: 4953:  void writeIndent();
        -: 4954:  void writeWithIndent(String const& value);
        -: 4955:  void indent();
        -: 4956:  void unindent();
        -: 4957:  void writeCommentBeforeValue(Value const& root);
        -: 4958:  void writeCommentAfterValueOnSameLine(Value const& root);
        -: 4959:  static bool hasCommentForValue(const Value& value);
        -: 4960:
        -: 4961:  using ChildValues = std::vector<String>;
        -: 4962:
        -: 4963:  ChildValues childValues_;
        -: 4964:  String indentString_;
        -: 4965:  unsigned int rightMargin_;
        -: 4966:  String indentation_;
        -: 4967:  CommentStyle::Enum cs_;
        -: 4968:  String colonSymbol_;
        -: 4969:  String nullSymbol_;
        -: 4970:  String endingLineFeedSymbol_;
        -: 4971:  bool addChildValues_ : 1;
        -: 4972:  bool indented_ : 1;
        -: 4973:  bool useSpecialFloats_ : 1;
        -: 4974:  bool emitUTF8_ : 1;
        -: 4975:  unsigned int precision_;
        -: 4976:  PrecisionType precisionType_;
        -: 4977:};
function _ZN4Json23BuiltStyledStreamWriterC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_12CommentStyle4EnumES6_S6_S6_bbjNS_13PrecisionTypeE called 0 returned 0% blocks executed 0%
    #####: 4978:BuiltStyledStreamWriter::BuiltStyledStreamWriter(
        -: 4979:    String indentation, CommentStyle::Enum cs, String colonSymbol,
        -: 4980:    String nullSymbol, String endingLineFeedSymbol, bool useSpecialFloats,
    #####: 4981:    bool emitUTF8, unsigned int precision, PrecisionType precisionType)
    #####: 4982:    : rightMargin_(74), indentation_(std::move(indentation)), cs_(cs),
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4983:      colonSymbol_(std::move(colonSymbol)), nullSymbol_(std::move(nullSymbol)),
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
    #####: 4984:      endingLineFeedSymbol_(std::move(endingLineFeedSymbol)),
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 4985:      addChildValues_(false), indented_(false),
    #####: 4986:      useSpecialFloats_(useSpecialFloats), emitUTF8_(emitUTF8),
    #####: 4987:      precision_(precision), precisionType_(precisionType) {}
    %%%%%: 4987-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
function _ZN4Json23BuiltStyledStreamWriter5writeERKNS_5ValueEPSo called 0 returned 0% blocks executed 0%
    #####: 4988:int BuiltStyledStreamWriter::write(Value const& root, OStream* sout) {
    #####: 4989:  sout_ = sout;
    #####: 4990:  addChildValues_ = false;
    #####: 4991:  indented_ = true;
    #####: 4992:  indentString_.clear();
    %%%%%: 4992-block  0
Aufruf  0 niemals ausgeführt
    #####: 4993:  writeCommentBeforeValue(root);
Aufruf  0 niemals ausgeführt
    #####: 4994:  if (!indented_)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 4995:    writeIndent();
    %%%%%: 4995-block  0
Aufruf  0 niemals ausgeführt
    #####: 4996:  indented_ = true;
    #####: 4997:  writeValue(root);
    %%%%%: 4997-block  0
Aufruf  0 niemals ausgeführt
    #####: 4998:  writeCommentAfterValueOnSameLine(root);
Aufruf  0 niemals ausgeführt
    #####: 4999:  *sout_ << endingLineFeedSymbol_;
Aufruf  0 niemals ausgeführt
    #####: 5000:  sout_ = nullptr;
    #####: 5001:  return 0;
        -: 5002:}
function _ZN4Json23BuiltStyledStreamWriter10writeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5003:void BuiltStyledStreamWriter::writeValue(Value const& value) {
    #####: 5004:  switch (value.type()) {
    %%%%%: 5004-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    #####: 5005:  case nullValue:
    #####: 5006:    pushValue(nullSymbol_);
    %%%%%: 5006-block  0
Aufruf  0 niemals ausgeführt
    #####: 5007:    break;
    #####: 5008:  case intValue:
    #####: 5009:    pushValue(valueToString(value.asLargestInt()));
    %%%%%: 5009-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5009-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5009-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 5009-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5009-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5009-block  5
Aufruf 11 niemals ausgeführt
    #####: 5010:    break;
    #####: 5011:  case uintValue:
    #####: 5012:    pushValue(valueToString(value.asLargestUInt()));
    %%%%%: 5012-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5012-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5012-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 5012-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5012-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5012-block  5
Aufruf 11 niemals ausgeführt
    #####: 5013:    break;
    #####: 5014:  case realValue:
    #####: 5015:    pushValue(valueToString(value.asDouble(), useSpecialFloats_, precision_,
    %%%%%: 5015-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5015-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5015-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 5015-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5015-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5015-block  5
Aufruf 11 niemals ausgeführt
        -: 5016:                            precisionType_));
    #####: 5017:    break;
    #####: 5018:  case stringValue: {
        -: 5019:    // Is NULL is possible for value.string_? No.
        -: 5020:    char const* str;
        -: 5021:    char const* end;
    #####: 5022:    bool ok = value.getString(&str, &end);
    %%%%%: 5022-block  0
Aufruf  0 niemals ausgeführt
    #####: 5023:    if (ok)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5024:      pushValue(
    %%%%%: 5024-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5025:          valueToQuotedStringN(str, static_cast<size_t>(end - str), emitUTF8_));
    %%%%%: 5025-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5025-block  1
Aufruf  3 niemals ausgeführt
    $$$$$: 5025-block  2
Aufruf  4 niemals ausgeführt
    $$$$$: 5025-block  3
        -: 5026:    else
    #####: 5027:      pushValue("");
    %%%%%: 5027-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5027-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5027-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5027-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5027-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5027-block  5
    $$$$$: 5027-block  6
    #####: 5028:    break;
    %%%%%: 5028-block  0
        -: 5029:  }
    #####: 5030:  case booleanValue:
    #####: 5031:    pushValue(valueToString(value.asBool()));
    %%%%%: 5031-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5031-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5031-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 5031-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5031-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5031-block  5
Aufruf 11 niemals ausgeführt
    #####: 5032:    break;
    #####: 5033:  case arrayValue:
    #####: 5034:    writeArrayValue(value);
    %%%%%: 5034-block  0
Aufruf  0 niemals ausgeführt
    #####: 5035:    break;
    #####: 5036:  case objectValue: {
    #####: 5037:    Value::Members members(value.getMemberNames());
    %%%%%: 5037-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5038:    if (members.empty())
    %%%%%: 5038-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5039:      pushValue("{}");
    %%%%%: 5039-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5039-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5039-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5039-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5039-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5039-block  5
    $$$$$: 5039-block  6
        -: 5040:    else {
    #####: 5041:      writeWithIndent("{");
    %%%%%: 5041-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5041-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5041-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5041-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5041-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5041-block  5
    $$$$$: 5041-block  6
    #####: 5042:      indent();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5043:      auto it = members.begin();
    %%%%%: 5043-block  0
Aufruf  0 niemals ausgeführt
        -: 5044:      for (;;) {
    #####: 5045:        String const& name = *it;
    %%%%%: 5045-block  0
Aufruf  0 niemals ausgeführt
    #####: 5046:        Value const& childValue = value[name];
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5047:        writeCommentBeforeValue(childValue);
    %%%%%: 5047-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5048:        writeWithIndent(
    %%%%%: 5048-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5049:            valueToQuotedStringN(name.data(), name.length(), emitUTF8_));
    %%%%%: 5049-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 5049-block  1
Aufruf  5 niemals ausgeführt
    $$$$$: 5049-block  2
Aufruf  6 niemals ausgeführt
    $$$$$: 5049-block  3
    #####: 5050:        *sout_ << colonSymbol_;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5051:        writeValue(childValue);
    %%%%%: 5051-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5052:        if (++it == members.end()) {
    %%%%%: 5052-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 5053:          writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 5053-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5054:          break;
    %%%%%: 5054-block  0
        -: 5055:        }
    #####: 5056:        *sout_ << ",";
    %%%%%: 5056-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5057:        writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 5057-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5058:      }
    %%%%%: 5058-block  0
    #####: 5059:      unindent();
    %%%%%: 5059-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5060:      writeWithIndent("}");
    %%%%%: 5060-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5060-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5060-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5060-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5060-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5060-block  5
    $$$$$: 5060-block  6
        -: 5061:    }
    #####: 5062:  } break;
    %%%%%: 5062-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 5062-block  1
Aufruf  1 niemals ausgeführt
        -: 5063:  }
    #####: 5064:}
    %%%%%: 5064-block  0
        -: 5065:
function _ZN4Json23BuiltStyledStreamWriter15writeArrayValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5066:void BuiltStyledStreamWriter::writeArrayValue(Value const& value) {
    #####: 5067:  unsigned size = value.size();
    %%%%%: 5067-block  0
Aufruf  0 niemals ausgeführt
    #####: 5068:  if (size == 0)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5069:    pushValue("[]");
    %%%%%: 5069-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5069-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5069-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5069-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5069-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5069-block  5
    $$$$$: 5069-block  6
Aufruf 11 niemals ausgeführt
        -: 5070:  else {
    #####: 5071:    bool isMultiLine = (cs_ == CommentStyle::All) || isMultilineArray(value);
    %%%%%: 5071-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 5071-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 5071-block  2
    %%%%%: 5071-block  3
    #####: 5072:    if (isMultiLine) {
    %%%%%: 5072-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5073:      writeWithIndent("[");
    %%%%%: 5073-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5073-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5073-block  2
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5073-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5073-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5073-block  5
    $$$$$: 5073-block  6
Aufruf 11 niemals ausgeführt
    #####: 5074:      indent();
Aufruf  0 niemals ausgeführt
    #####: 5075:      bool hasChildValue = !childValues_.empty();
Aufruf  0 niemals ausgeführt
    #####: 5076:      unsigned index = 0;
        -: 5077:      for (;;) {
    #####: 5078:        Value const& childValue = value[index];
    %%%%%: 5078-block  0
Aufruf  0 niemals ausgeführt
    #####: 5079:        writeCommentBeforeValue(childValue);
Aufruf  0 niemals ausgeführt
    #####: 5080:        if (hasChildValue)
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5081:          writeWithIndent(childValues_[index]);
    %%%%%: 5081-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 5082:        else {
    #####: 5083:          if (!indented_)
    %%%%%: 5083-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5084:            writeIndent();
    %%%%%: 5084-block  0
Aufruf  0 niemals ausgeführt
    #####: 5085:          indented_ = true;
    #####: 5086:          writeValue(childValue);
    %%%%%: 5086-block  0
Aufruf  0 niemals ausgeführt
    #####: 5087:          indented_ = false;
        -: 5088:        }
    #####: 5089:        if (++index == size) {
    %%%%%: 5089-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5090:          writeCommentAfterValueOnSameLine(childValue);
    %%%%%: 5090-block  0
Aufruf  0 niemals ausgeführt
    #####: 5091:          break;
        -: 5092:        }
    #####: 5093:        *sout_ << ",";
    %%%%%: 5093-block  0
Aufruf  0 niemals ausgeführt
    #####: 5094:        writeCommentAfterValueOnSameLine(childValue);
Aufruf  0 niemals ausgeführt
    #####: 5095:      }
    #####: 5096:      unindent();
    %%%%%: 5096-block  0
Aufruf  0 niemals ausgeführt
    #####: 5097:      writeWithIndent("]");
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5097-block  0
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5097-block  1
Aufruf  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
    $$$$$: 5097-block  2
Aufruf  9 niemals ausgeführt
    $$$$$: 5097-block  3
Aufruf 10 niemals ausgeführt
    $$$$$: 5097-block  4
        -: 5098:    } else // output on a single line
        -: 5099:    {
    #####: 5100:      assert(childValues_.size() == size);
    %%%%%: 5100-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5100-block  1
Aufruf  3 niemals ausgeführt
    #####: 5101:      *sout_ << "[";
    %%%%%: 5101-block  0
Aufruf  0 niemals ausgeführt
    #####: 5102:      if (!indentation_.empty())
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5103:        *sout_ << " ";
    %%%%%: 5103-block  0
Aufruf  0 niemals ausgeführt
    #####: 5104:      for (unsigned index = 0; index < size; ++index) {
    %%%%%: 5104-block  0
    %%%%%: 5104-block  1
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5105:        if (index > 0)
    %%%%%: 5105-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5106:          *sout_ << ((!indentation_.empty()) ? ", " : ",");
    %%%%%: 5106-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5106-block  1
    %%%%%: 5106-block  2
    %%%%%: 5106-block  3
Aufruf  3 niemals ausgeführt
    #####: 5107:        *sout_ << childValues_[index];
    %%%%%: 5107-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 5108:      }
    #####: 5109:      if (!indentation_.empty())
    %%%%%: 5109-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5110:        *sout_ << " ";
    %%%%%: 5110-block  0
Aufruf  0 niemals ausgeführt
    #####: 5111:      *sout_ << "]";
    %%%%%: 5111-block  0
Aufruf  0 niemals ausgeführt
        -: 5112:    }
        -: 5113:  }
    #####: 5114:}
    %%%%%: 5114-block  0
        -: 5115:
function _ZN4Json23BuiltStyledStreamWriter16isMultilineArrayERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5116:bool BuiltStyledStreamWriter::isMultilineArray(Value const& value) {
    #####: 5117:  ArrayIndex const size = value.size();
    %%%%%: 5117-block  0
Aufruf  0 niemals ausgeführt
    #####: 5118:  bool isMultiLine = size * 3 >= rightMargin_;
    #####: 5119:  childValues_.clear();
Aufruf  0 niemals ausgeführt
    #####: 5120:  for (ArrayIndex index = 0; index < size && !isMultiLine; ++index) {
    %%%%%: 5120-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 5120-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 5121:    Value const& childValue = value[index];
    %%%%%: 5121-block  0
Aufruf  0 niemals ausgeführt
    #####: 5122:    isMultiLine = ((childValue.isArray() || childValue.isObject()) &&
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5122-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5122-block  1
    %%%%%: 5122-block  2
    %%%%%: 5122-block  3
    #####: 5123:                   !childValue.empty());
    %%%%%: 5123-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 5124:  }
    #####: 5125:  if (!isMultiLine) // check if line length > max line length
    %%%%%: 5125-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
        -: 5126:  {
    #####: 5127:    childValues_.reserve(size);
    %%%%%: 5127-block  0
Aufruf  0 niemals ausgeführt
    #####: 5128:    addChildValues_ = true;
    #####: 5129:    ArrayIndex lineLength = 4 + (size - 1) * 2; // '[ ' + ', '*n + ' ]'
    #####: 5130:    for (ArrayIndex index = 0; index < size; ++index) {
    %%%%%: 5130-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5131:      if (hasCommentForValue(value[index])) {
    %%%%%: 5131-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 5132:        isMultiLine = true;
    %%%%%: 5132-block  0
        -: 5133:      }
    #####: 5134:      writeValue(value[index]);
    %%%%%: 5134-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####: 5135:      lineLength += static_cast<ArrayIndex>(childValues_[index].length());
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 5136:    }
    #####: 5137:    addChildValues_ = false;
    #####: 5138:    isMultiLine = isMultiLine || lineLength >= rightMargin_;
    %%%%%: 5138-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 5138-block  1
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5138-block  2
    %%%%%: 5138-block  3
    %%%%%: 5138-block  4
        -: 5139:  }
    #####: 5140:  return isMultiLine;
    %%%%%: 5140-block  0
        -: 5141:}
        -: 5142:
function _ZN4Json23BuiltStyledStreamWriter9pushValueERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5143:void BuiltStyledStreamWriter::pushValue(String const& value) {
    #####: 5144:  if (addChildValues_)
    %%%%%: 5144-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5145:    childValues_.push_back(value);
    %%%%%: 5145-block  0
Aufruf  0 niemals ausgeführt
        -: 5146:  else
    #####: 5147:    *sout_ << value;
    %%%%%: 5147-block  0
Aufruf  0 niemals ausgeführt
    #####: 5148:}
        -: 5149:
function _ZN4Json23BuiltStyledStreamWriter11writeIndentEv called 0 returned 0% blocks executed 0%
    #####: 5150:void BuiltStyledStreamWriter::writeIndent() {
        -: 5151:  // blep intended this to look at the so-far-written string
        -: 5152:  // to determine whether we are already indented, but
        -: 5153:  // with a stream we cannot do that. So we rely on some saved state.
        -: 5154:  // The caller checks indented_.
        -: 5155:
    #####: 5156:  if (!indentation_.empty()) {
    %%%%%: 5156-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 5157:    // In this case, drop newlines too.
    #####: 5158:    *sout_ << '\n' << indentString_;
    %%%%%: 5158-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
        -: 5159:  }
    #####: 5160:}
        -: 5161:
function _ZN4Json23BuiltStyledStreamWriter15writeWithIndentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5162:void BuiltStyledStreamWriter::writeWithIndent(String const& value) {
    #####: 5163:  if (!indented_)
    %%%%%: 5163-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5164:    writeIndent();
    %%%%%: 5164-block  0
Aufruf  0 niemals ausgeführt
    #####: 5165:  *sout_ << value;
    %%%%%: 5165-block  0
Aufruf  0 niemals ausgeführt
    #####: 5166:  indented_ = false;
    #####: 5167:}
        -: 5168:
function _ZN4Json23BuiltStyledStreamWriter6indentEv called 0 returned 0% blocks executed 0%
    #####: 5169:void BuiltStyledStreamWriter::indent() { indentString_ += indentation_; }
    %%%%%: 5169-block  0
Aufruf  0 niemals ausgeführt
        -: 5170:
function _ZN4Json23BuiltStyledStreamWriter8unindentEv called 0 returned 0% blocks executed 0%
    #####: 5171:void BuiltStyledStreamWriter::unindent() {
    #####: 5172:  assert(indentString_.size() >= indentation_.size());
    %%%%%: 5172-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5172-block  1
Aufruf  4 niemals ausgeführt
    #####: 5173:  indentString_.resize(indentString_.size() - indentation_.size());
    %%%%%: 5173-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    #####: 5174:}
        -: 5175:
function _ZN4Json23BuiltStyledStreamWriter23writeCommentBeforeValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5176:void BuiltStyledStreamWriter::writeCommentBeforeValue(Value const& root) {
    #####: 5177:  if (cs_ == CommentStyle::None)
    %%%%%: 5177-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5178:    return;
    %%%%%: 5178-block  0
    %%%%%: 5178-block  1
    #####: 5179:  if (!root.hasComment(commentBefore))
    %%%%%: 5179-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5180:    return;
    %%%%%: 5180-block  0
        -: 5181:
    #####: 5182:  if (!indented_)
    %%%%%: 5182-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5183:    writeIndent();
    %%%%%: 5183-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5184:  const String& comment = root.getComment(commentBefore);
    %%%%%: 5184-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5185:  String::const_iterator iter = comment.begin();
    %%%%%: 5185-block  0
Aufruf  0 niemals ausgeführt
    #####: 5186:  while (iter != comment.end()) {
    %%%%%: 5186-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 5187:    *sout_ << *iter;
    %%%%%: 5187-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 5188:    if (*iter == '\n' && ((iter + 1) != comment.end() && *(iter + 1) == '/'))
    %%%%%: 5188-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5188-block  1
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 5188-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 5188-block  3
    %%%%%: 5188-block  4
    %%%%%: 5188-block  5
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
        -: 5189:      // writeIndent();  // would write extra newline
    #####: 5190:      *sout_ << indentString_;
    %%%%%: 5190-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5191:    ++iter;
    %%%%%: 5191-block  0
Aufruf  0 niemals ausgeführt
        -: 5192:  }
    #####: 5193:  indented_ = false;
    #####: 5194:}
    %%%%%: 5194-block  0
Aufruf  0 niemals ausgeführt
    $$$$$: 5194-block  1
Aufruf  1 niemals ausgeführt
        -: 5195:
function _ZN4Json23BuiltStyledStreamWriter32writeCommentAfterValueOnSameLineERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5196:void BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine(
        -: 5197:    Value const& root) {
    #####: 5198:  if (cs_ == CommentStyle::None)
    %%%%%: 5198-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5199:    return;
    %%%%%: 5199-block  0
    #####: 5200:  if (root.hasComment(commentAfterOnSameLine))
    %%%%%: 5200-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5201:    *sout_ << " " + root.getComment(commentAfterOnSameLine);
    %%%%%: 5201-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5201-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5201-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 5201-block  3
Aufruf  9 niemals ausgeführt
Aufruf 10 niemals ausgeführt
    $$$$$: 5201-block  4
Aufruf 11 niemals ausgeführt
    $$$$$: 5201-block  5
Aufruf 12 niemals ausgeführt
    $$$$$: 5201-block  6
    $$$$$: 5201-block  7
Aufruf 13 niemals ausgeführt
        -: 5202:
    #####: 5203:  if (root.hasComment(commentAfter)) {
    %%%%%: 5203-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5204:    writeIndent();
    %%%%%: 5204-block  0
Aufruf  0 niemals ausgeführt
    #####: 5205:    *sout_ << root.getComment(commentAfter);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5205-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5205-block  1
Aufruf  6 niemals ausgeführt
    $$$$$: 5205-block  2
Aufruf  7 niemals ausgeführt
        -: 5206:  }
        -: 5207:}
        -: 5208:
        -: 5209:// static
function _ZN4Json23BuiltStyledStreamWriter18hasCommentForValueERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5210:bool BuiltStyledStreamWriter::hasCommentForValue(const Value& value) {
    #####: 5211:  return value.hasComment(commentBefore) ||
    %%%%%: 5211-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5212:         value.hasComment(commentAfterOnSameLine) ||
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 5212-block  0
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 5212-block  1
    %%%%%: 5212-block  2
    #####: 5213:         value.hasComment(commentAfter);
    %%%%%: 5213-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 5213-block  1
        -: 5214:}
        -: 5215:
        -: 5216:///////////////
        -: 5217:// StreamWriter
        -: 5218:
function _ZN4Json12StreamWriterC2Ev called 0 returned 0% blocks executed 0%
    #####: 5219:StreamWriter::StreamWriter() : sout_(nullptr) {}
    #####: 5220:StreamWriter::~StreamWriter() = default;
------------------
_ZN4Json12StreamWriterD0Ev:
function _ZN4Json12StreamWriterD0Ev called 0 returned 0% blocks executed 0%
    #####: 5220:StreamWriter::~StreamWriter() = default;
    %%%%%: 5220-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZN4Json12StreamWriterD2Ev:
function _ZN4Json12StreamWriterD2Ev called 0 returned 0% blocks executed 0%
    #####: 5220:StreamWriter::~StreamWriter() = default;
------------------
    #####: 5221:StreamWriter::Factory::~Factory() = default;
------------------
_ZN4Json12StreamWriter7FactoryD0Ev:
function _ZN4Json12StreamWriter7FactoryD0Ev called 0 returned 0% blocks executed 0%
    #####: 5221:StreamWriter::Factory::~Factory() = default;
    %%%%%: 5221-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZN4Json12StreamWriter7FactoryD2Ev:
function _ZN4Json12StreamWriter7FactoryD2Ev called 0 returned 0% blocks executed 0%
    #####: 5221:StreamWriter::Factory::~Factory() = default;
------------------
function _ZN4Json19StreamWriterBuilderC2Ev called 0 returned 0% blocks executed 0%
    #####: 5222:StreamWriterBuilder::StreamWriterBuilder() { setDefaults(&settings_); }
    %%%%%: 5222-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5222-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%: 5222-block  2
    $$$$$: 5222-block  3
Aufruf  7 niemals ausgeführt
    $$$$$: 5222-block  4
Aufruf  8 niemals ausgeführt
    #####: 5223:StreamWriterBuilder::~StreamWriterBuilder() = default;
------------------
_ZN4Json19StreamWriterBuilderD0Ev:
function _ZN4Json19StreamWriterBuilderD0Ev called 0 returned 0% blocks executed 0%
    #####: 5223:StreamWriterBuilder::~StreamWriterBuilder() = default;
    %%%%%: 5223-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
_ZN4Json19StreamWriterBuilderD2Ev:
function _ZN4Json19StreamWriterBuilderD2Ev called 0 returned 0% blocks executed 0%
    #####: 5223:StreamWriterBuilder::~StreamWriterBuilder() = default;
    %%%%%: 5223-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
------------------
function _ZNK4Json19StreamWriterBuilder15newStreamWriterEv called 0 returned 0% blocks executed 0%
    #####: 5224:StreamWriter* StreamWriterBuilder::newStreamWriter() const {
    #####: 5225:  const String indentation = settings_["indentation"].asString();
    %%%%%: 5225-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5225-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5226:  const String cs_str = settings_["commentStyle"].asString();
    %%%%%: 5226-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5226-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5227:  const String pt_str = settings_["precisionType"].asString();
    %%%%%: 5227-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5227-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5228:  const bool eyc = settings_["enableYAMLCompatibility"].asBool();
    %%%%%: 5228-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5228-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5229:  const bool dnp = settings_["dropNullPlaceholders"].asBool();
    %%%%%: 5229-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5229-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5230:  const bool usf = settings_["useSpecialFloats"].asBool();
    %%%%%: 5230-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5230-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5231:  const bool emitUTF8 = settings_["emitUTF8"].asBool();
    %%%%%: 5231-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5231-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5232:  unsigned int pre = settings_["precision"].asUInt();
    %%%%%: 5232-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5232-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####: 5233:  CommentStyle::Enum cs = CommentStyle::All;
    #####: 5234:  if (cs_str == "All") {
    %%%%%: 5234-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5235:    cs = CommentStyle::All;
    %%%%%: 5235-block  0
    #####: 5236:  } else if (cs_str == "None") {
    %%%%%: 5236-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5237:    cs = CommentStyle::None;
    %%%%%: 5237-block  0
        -: 5238:  } else {
    #####: 5239:    throwRuntimeError("commentStyle must be 'All' or 'None'");
    %%%%%: 5239-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5239-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 5239-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 5239-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 5239-block  4
    $$$$$: 5239-block  5
        -: 5240:  }
    #####: 5241:  PrecisionType precisionType(significantDigits);
    #####: 5242:  if (pt_str == "significant") {
    %%%%%: 5242-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5243:    precisionType = PrecisionType::significantDigits;
    %%%%%: 5243-block  0
    #####: 5244:  } else if (pt_str == "decimal") {
    %%%%%: 5244-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5245:    precisionType = PrecisionType::decimalPlaces;
    %%%%%: 5245-block  0
        -: 5246:  } else {
    #####: 5247:    throwRuntimeError("precisionType must be 'significant' or 'decimal'");
    %%%%%: 5247-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5247-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 5247-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 5247-block  3
Aufruf  6 niemals ausgeführt
    $$$$$: 5247-block  4
    $$$$$: 5247-block  5
        -: 5248:  }
    #####: 5249:  String colonSymbol = " : ";
    %%%%%: 5249-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5249-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 5249-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 5249-block  3
    #####: 5250:  if (eyc) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5251:    colonSymbol = ": ";
    %%%%%: 5251-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5252:  } else if (indentation.empty()) {
    %%%%%: 5252-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5253:    colonSymbol = ":";
    %%%%%: 5253-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -: 5254:  }
    #####: 5255:  String nullSymbol = "null";
    %%%%%: 5255-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5255-block  1
Aufruf  4 niemals ausgeführt
    $$$$$: 5255-block  2
Aufruf  5 niemals ausgeführt
    $$$$$: 5255-block  3
    #####: 5256:  if (dnp) {
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5257:    nullSymbol.clear();
    %%%%%: 5257-block  0
Aufruf  0 niemals ausgeführt
        -: 5258:  }
    #####: 5259:  if (pre > 17)
    %%%%%: 5259-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5260:    pre = 17;
    %%%%%: 5260-block  0
    #####: 5261:  String endingLineFeedSymbol;
    %%%%%: 5261-block  0
Aufruf  0 niemals ausgeführt
        -: 5262:  return new BuiltStyledStreamWriter(indentation, cs, colonSymbol, nullSymbol,
        -: 5263:                                     endingLineFeedSymbol, usf, emitUTF8, pre,
    #####: 5264:                                     precisionType);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5264-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5264-block  1
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%: 5264-block  2
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 5264-block  3
Aufruf 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
Zweig 14 niemals ausgeführt
    %%%%%: 5264-block  4
Aufruf 15 niemals ausgeführt
Zweig 16 niemals ausgeführt
Zweig 17 niemals ausgeführt
    %%%%%: 5264-block  5
Aufruf 18 niemals ausgeführt
Aufruf 19 niemals ausgeführt
Aufruf 20 niemals ausgeführt
Aufruf 21 niemals ausgeführt
    %%%%%: 5264-block  6
    $$$$$: 5264-block  7
Aufruf 22 niemals ausgeführt
    $$$$$: 5264-block  8
    $$$$$: 5264-block  9
Aufruf 23 niemals ausgeführt
    $$$$$: 5264-block 10
    $$$$$: 5264-block 11
Aufruf 24 niemals ausgeführt
    $$$$$: 5264-block 12
    $$$$$: 5264-block 13
Aufruf 25 niemals ausgeführt
    $$$$$: 5264-block 14
    $$$$$: 5264-block 15
Zweig 26 niemals ausgeführt
Zweig 27 niemals ausgeführt
    $$$$$: 5264-block 16
Aufruf 28 niemals ausgeführt
    #####: 5265:}
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
    $$$$$: 5265-block  0
Aufruf  6 niemals ausgeführt
    $$$$$: 5265-block  1
Aufruf  7 niemals ausgeführt
    $$$$$: 5265-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5265-block  3
Aufruf  9 niemals ausgeführt
    $$$$$: 5265-block  4
Aufruf 10 niemals ausgeführt
    $$$$$: 5265-block  5
Aufruf 11 niemals ausgeführt
        -: 5266:
function _ZNK4Json19StreamWriterBuilder8validateEPNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5267:bool StreamWriterBuilder::validate(Json::Value* invalid) const {
        -: 5268:  static const auto& valid_keys = *new std::set<String>{
        -: 5269:      "indentation",
        -: 5270:      "commentStyle",
        -: 5271:      "enableYAMLCompatibility",
        -: 5272:      "dropNullPlaceholders",
        -: 5273:      "useSpecialFloats",
        -: 5274:      "emitUTF8",
        -: 5275:      "precision",
        -: 5276:      "precisionType",
    #####: 5277:  };
    %%%%%: 5277-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 5277-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 5277-block  2
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Aufruf  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
    %%%%%: 5277-block  3
Aufruf 11 niemals ausgeführt
Aufruf 12 niemals ausgeführt
    %%%%%: 5277-block  4
Zweig 13 niemals ausgeführt
Zweig 14 niemals ausgeführt
    %%%%%: 5277-block  5
Aufruf 15 niemals ausgeführt
    $$$$$: 5277-block  6
Aufruf 16 niemals ausgeführt
    $$$$$: 5277-block  7
    $$$$$: 5277-block  8
    $$$$$: 5277-block  9
    $$$$$: 5277-block 10
Zweig 17 niemals ausgeführt
Zweig 18 niemals ausgeführt
    $$$$$: 5277-block 11
Aufruf 19 niemals ausgeführt
    $$$$$: 5277-block 12
    $$$$$: 5277-block 13
Zweig 20 niemals ausgeführt
Zweig 21 niemals ausgeführt
    $$$$$: 5277-block 14
Aufruf 22 niemals ausgeführt
    $$$$$: 5277-block 15
Zweig 23 niemals ausgeführt
Zweig 24 niemals ausgeführt
    $$$$$: 5277-block 16
Aufruf 25 niemals ausgeführt
    #####: 5278:  for (auto si = settings_.begin(); si != settings_.end(); ++si) {
    %%%%%: 5278-block  0
Aufruf  0 niemals ausgeführt
    %%%%%: 5278-block  1
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5278-block  2
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 5278-block  3
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    $$$$$: 5278-block  4
    #####: 5279:    auto key = si.name();
    %%%%%: 5279-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5280:    if (valid_keys.count(key))
    %%%%%: 5280-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5280-block  1
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    #####: 5281:      continue;
    %%%%%: 5281-block  0
    #####: 5282:    if (invalid)
    %%%%%: 5282-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    #####: 5283:      (*invalid)[key] = *si;
    %%%%%: 5283-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5283-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5283-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
        -: 5284:    else
    #####: 5285:      return false;
    %%%%%: 5285-block  0
    #####: 5286:  }
    %%%%%: 5286-block  0
    %%%%%: 5286-block  1
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    $$$$$: 5286-block  2
Aufruf  4 niemals ausgeführt
    #####: 5287:  return invalid ? invalid->empty() : true;
    %%%%%: 5287-block  0
Zweig  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
    %%%%%: 5287-block  1
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%: 5287-block  2
    %%%%%: 5287-block  3
    %%%%%: 5287-block  4
    #####: 5288:}
    %%%%%: 5288-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    %%%%%: 5288-block  1
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
    %%%%%: 5288-block  2
Aufruf  8 niemals ausgeführt
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
    %%%%%: 5288-block  3
Aufruf 12 niemals ausgeführt
Aufruf 13 niemals ausgeführt
Zweig 14 niemals ausgeführt
Zweig 15 niemals ausgeführt
    %%%%%: 5288-block  4
Aufruf 16 niemals ausgeführt
Aufruf 17 niemals ausgeführt
Zweig 18 niemals ausgeführt
Zweig 19 niemals ausgeführt
    %%%%%: 5288-block  5
Aufruf 20 niemals ausgeführt
Aufruf 21 niemals ausgeführt
Zweig 22 niemals ausgeführt
Zweig 23 niemals ausgeführt
    %%%%%: 5288-block  6
Aufruf 24 niemals ausgeführt
Aufruf 25 niemals ausgeführt
Zweig 26 niemals ausgeführt
Zweig 27 niemals ausgeführt
    %%%%%: 5288-block  7
Aufruf 28 niemals ausgeführt
Aufruf 29 niemals ausgeführt
Zweig 30 niemals ausgeführt
Zweig 31 niemals ausgeführt
    %%%%%: 5288-block  8
Aufruf 32 niemals ausgeführt
    %%%%%: 5288-block  9
Aufruf 33 niemals ausgeführt
Aufruf 34 niemals ausgeführt
Aufruf 35 niemals ausgeführt
Aufruf 36 niemals ausgeführt
Aufruf 37 niemals ausgeführt
Aufruf 38 niemals ausgeführt
Aufruf 39 niemals ausgeführt
Aufruf 40 niemals ausgeführt
    $$$$$: 5288-block 10
Aufruf 41 niemals ausgeführt
    $$$$$: 5288-block 11
    $$$$$: 5288-block 12
Aufruf 42 niemals ausgeführt
    $$$$$: 5288-block 13
    $$$$$: 5288-block 14
Aufruf 43 niemals ausgeführt
    $$$$$: 5288-block 15
    $$$$$: 5288-block 16
Aufruf 44 niemals ausgeführt
    $$$$$: 5288-block 17
    $$$$$: 5288-block 18
Aufruf 45 niemals ausgeführt
    $$$$$: 5288-block 19
    $$$$$: 5288-block 20
Aufruf 46 niemals ausgeführt
    $$$$$: 5288-block 21
    $$$$$: 5288-block 22
Aufruf 47 niemals ausgeführt
    $$$$$: 5288-block 23
    $$$$$: 5288-block 24
Aufruf 48 niemals ausgeführt
    $$$$$: 5288-block 25
    $$$$$: 5288-block 26
Zweig 49 niemals ausgeführt
Zweig 50 niemals ausgeführt
    $$$$$: 5288-block 27
    $$$$$: 5288-block 28
Zweig 51 niemals ausgeführt
Zweig 52 niemals ausgeführt
    $$$$$: 5288-block 29
Aufruf 53 niemals ausgeführt
        -: 5289:
function _ZN4Json19StreamWriterBuilderixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 5290:Value& StreamWriterBuilder::operator[](const String& key) {
    #####: 5291:  return settings_[key];
    %%%%%: 5291-block  0
Aufruf  0 niemals ausgeführt
        -: 5292:}
        -: 5293:// static
function _ZN4Json19StreamWriterBuilder11setDefaultsEPNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5294:void StreamWriterBuilder::setDefaults(Json::Value* settings) {
        -: 5295:  //! [StreamWriterBuilderDefaults]
    #####: 5296:  (*settings)["commentStyle"] = "All";
    %%%%%: 5296-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5296-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5296-block  2
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5296-block  3
Aufruf  8 niemals ausgeführt
    $$$$$: 5296-block  4
Aufruf  9 niemals ausgeführt
    #####: 5297:  (*settings)["indentation"] = "\t";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5297-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5297-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5297-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5297-block  3
Aufruf  9 niemals ausgeführt
    #####: 5298:  (*settings)["enableYAMLCompatibility"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5298-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5298-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5298-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5298-block  3
Aufruf  9 niemals ausgeführt
    #####: 5299:  (*settings)["dropNullPlaceholders"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5299-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5299-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5299-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5299-block  3
Aufruf  9 niemals ausgeführt
    #####: 5300:  (*settings)["useSpecialFloats"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5300-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5300-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5300-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5300-block  3
Aufruf  9 niemals ausgeführt
    #####: 5301:  (*settings)["emitUTF8"] = false;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5301-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5301-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5301-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5301-block  3
Aufruf  9 niemals ausgeführt
    #####: 5302:  (*settings)["precision"] = 17;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5302-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5302-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5302-block  2
Aufruf  8 niemals ausgeführt
    $$$$$: 5302-block  3
Aufruf  9 niemals ausgeführt
    #####: 5303:  (*settings)["precisionType"] = "significant";
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5303-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%: 5303-block  1
Aufruf  6 niemals ausgeführt
Aufruf  7 niemals ausgeführt
    $$$$$: 5303-block  2
Aufruf  8 niemals ausgeführt
        -: 5304:  //! [StreamWriterBuilderDefaults]
    #####: 5305:}
        -: 5306:
function _ZN4Json11writeStringB5cxx11ERKNS_12StreamWriter7FactoryERKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5307:String writeString(StreamWriter::Factory const& factory, Value const& root) {
    #####: 5308:  OStringStream sout;
    %%%%%: 5308-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5309:  StreamWriterPtr const writer(factory.newStreamWriter());
    %%%%%: 5309-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5309-block  1
Aufruf  3 niemals ausgeführt
    #####: 5310:  writer->write(root, &sout);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 5311:  return sout.str();
    %%%%%: 5311-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5311-block  1
    #####: 5312:}
    %%%%%: 5312-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$: 5312-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 5312-block  2
Aufruf  3 niemals ausgeführt
        -: 5313:
function _ZN4JsonlsERSoRKNS_5ValueE called 0 returned 0% blocks executed 0%
    #####: 5314:OStream& operator<<(OStream& sout, Value const& root) {
    #####: 5315:  StreamWriterBuilder builder;
    %%%%%: 5315-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####: 5316:  StreamWriterPtr const writer(builder.newStreamWriter());
    %%%%%: 5316-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%: 5316-block  1
Aufruf  3 niemals ausgeführt
    #####: 5317:  writer->write(root, &sout);
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
    #####: 5318:  return sout;
    %%%%%: 5318-block  0
    #####: 5319:}
    %%%%%: 5319-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    $$$$$: 5319-block  1
Aufruf  2 niemals ausgeführt
    $$$$$: 5319-block  2
Aufruf  3 niemals ausgeführt
        -: 5320:
        -: 5321:} // namespace Json
        -: 5322:
        -: 5323:// //////////////////////////////////////////////////////////////////////
        -: 5324:// End of content of file: src/lib_json/json_writer.cpp
        -: 5325:// //////////////////////////////////////////////////////////////////////
        -: 5326:
        -: 5327:
        -: 5328:
        -: 5329:
        -: 5330:
