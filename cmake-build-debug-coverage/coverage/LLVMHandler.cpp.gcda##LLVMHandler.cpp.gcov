        -:    0:Source:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/src/main/include/LLVM-Handler/LLVMHandler.cpp
        -:    0:Graph:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/src/main/include/LLVM-Handler/LLVMHandler.cpp.gcno
        -:    0:Data:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/src/main/include/LLVM-Handler/LLVMHandler.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include "LLVMHandler.h"
        -:    3:
function _ZN11LLVMHandlerC2EN4Json5ValueEl called 0 returned 0% blocks executed 0%
    #####:    4:LLVMHandler::LLVMHandler( Json::Value energy, long valueIfIntederminate) {
    %%%%%:    4-block  0
Aufruf  0 niemals ausgeführt
    #####:    5:    this->energyValues = energy;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:    6:    this->valueIfIndeterminate = valueIfIntederminate;
    #####:    7:}
    %%%%%:    7-block  0
    $$$$$:    7-block  1
Aufruf  0 niemals ausgeführt
        -:    8:
function _ZN11LLVMHandler16getBasicBlockSumERN4llvm10BasicBlockE called 0 returned 0% blocks executed 0%
    #####:    9:double LLVMHandler::getBasicBlockSum( llvm::BasicBlock &BB ){
        -:   10:    //Init the sum of this block
    #####:   11:    double blocksum = 0;
        -:   12:
        -:   13:    //Iterate over the instructions in this block
    #####:   14:    for ( auto &I : BB ) {
    %%%%%:   14-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   14-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:   14-block  2
    %%%%%:   14-block  3
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%:   14-block  4
Aufruf  9 niemals ausgeführt
Zweig 10 niemals ausgeführt
Zweig 11 niemals ausgeführt
        -:   15:        //Categorize the current instruction
    #####:   16:        InstructionCategory::Category cat = InstructionCategory::getCategory(I);
    %%%%%:   16-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:   17:
        -:   18:        //Get the energy from the JSON energy values by referencing the category
    #####:   19:        double iValue = this->energyValues[InstructionCategory::toString(cat)].asDouble();
    %%%%%:   19-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   19-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:   19-block  2
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%:   19-block  3
Aufruf  9 niemals ausgeführt
    $$$$$:   19-block  4
Aufruf 10 niemals ausgeführt
    $$$$$:   19-block  5
        -:   20:        //Add the value to the sum
    #####:   21:        blocksum += iValue;
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:   22:    }
        -:   23:
    #####:   24:    return blocksum;
    %%%%%:   24-block  0
    %%%%%:   24-block  1
        -:   25:}
        -:   26:
function _ZN11LLVMHandler17getLoopUpperBoundEPN4llvm4LoopE called 0 returned 0% blocks executed 0%
    #####:   27:long LLVMHandler::getLoopUpperBound(llvm::Loop *L){
        -:   28:    //Get the Latch instruction responsible for containing the compare instruction
    #####:   29:    auto li = L->getLatchCmpInst();
    %%%%%:   29-block  0
Aufruf  0 niemals ausgeführt
        -:   30:    //Init the bound with a default value if we are not comparing with a natural number
    #####:   31:    long bound = this->valueIfIndeterminate;
        -:   32:    //Assume the number to compare with is the second argument of the instruction
        -:   33:
    #####:   34:    for(int i=0; i < li->getNumOperands(); i++){
    %%%%%:   34-block  0
    %%%%%:   34-block  1
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:   35:        //Try to cast the value to a constantint pointer
    #####:   36:        if (auto *CI = llvm::dyn_cast<llvm::ConstantInt>(li->getOperand(i))) {
    %%%%%:   36-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -:   37:            //Gets a 64-bit signed int value from the cast constant
    #####:   38:            bound = CI->getSExtValue();
    %%%%%:   38-block  0
Aufruf  0 niemals ausgeführt
        -:   39:        }
        -:   40:    }
        -:   41:
    #####:   42:    return bound;
    %%%%%:   42-block  0
        -:   43:}
