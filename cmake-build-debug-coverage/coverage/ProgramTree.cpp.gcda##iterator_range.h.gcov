        -:    0:Source:/usr/include/llvm/ADT/iterator_range.h
        -:    0:Graph:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/src/main/include/ProgramTree/ProgramTree.cpp.gcno
        -:    0:Data:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/src/main/include/ProgramTree/ProgramTree.cpp.gcda
        -:    0:Runs:1
        -:    1://===- iterator_range.h - A range adaptor for iterators ---------*- C++ -*-===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:/// \file
        -:    9:/// This provides a very simple, boring adaptor for a begin and end iterator
        -:   10:/// into a range type. This should be used to build range views that work well
        -:   11:/// with range based for loops and range based constructors.
        -:   12:///
        -:   13:/// Note that code here follows more standards-based coding conventions as it
        -:   14:/// is mirroring proposed interfaces for standardization.
        -:   15:///
        -:   16://===----------------------------------------------------------------------===//
        -:   17:
        -:   18:#ifndef LLVM_ADT_ITERATOR_RANGE_H
        -:   19:#define LLVM_ADT_ITERATOR_RANGE_H
        -:   20:
        -:   21:#include <utility>
        -:   22:
        -:   23:namespace llvm {
        -:   24:
        -:   25:/// A range adaptor for a pair of iterators.
        -:   26:///
        -:   27:/// This just wraps two iterators into a range-compatible interface. Nothing
        -:   28:/// fancy at all.
        -:   29:template <typename IteratorT>
        -:   30:class iterator_range {
        -:   31:  IteratorT begin_iterator, end_iterator;
        -:   32:
        -:   33:public:
        -:   34:  //TODO: Add SFINAE to test that the Container's iterators match the range's
        -:   35:  //      iterators.
        -:   36:  template <typename Container>
        -:   37:  iterator_range(Container &&c)
        -:   38:  //TODO: Consider ADL/non-member begin/end calls.
        -:   39:      : begin_iterator(c.begin()), end_iterator(c.end()) {}
function _ZN4llvm14iterator_rangeINS_12SuccIteratorINS_11InstructionENS_10BasicBlockEEEEC2ES4_S4_ called 0 returned 0% blocks executed 0%
    #####:   40:  iterator_range(IteratorT begin_iterator, IteratorT end_iterator)
    #####:   41:      : begin_iterator(std::move(begin_iterator)),
    %%%%%:   41-block  0
Aufruf  0 niemals ausgeführt
    #####:   42:        end_iterator(std::move(end_iterator)) {}
Aufruf  0 niemals ausgeführt
        -:   43:
function _ZNK4llvm14iterator_rangeINS_12SuccIteratorINS_11InstructionENS_10BasicBlockEEEE5beginEv called 0 returned 0% blocks executed 0%
    #####:   44:  IteratorT begin() const { return begin_iterator; }
    %%%%%:   44-block  0
function _ZNK4llvm14iterator_rangeINS_12SuccIteratorINS_11InstructionENS_10BasicBlockEEEE3endEv called 0 returned 0% blocks executed 0%
    #####:   45:  IteratorT end() const { return end_iterator; }
    %%%%%:   45-block  0
        -:   46:  bool empty() const { return begin_iterator == end_iterator; }
        -:   47:};
        -:   48:
        -:   49:/// Convenience function for iterating over sub-ranges.
        -:   50:///
        -:   51:/// This provides a bit of syntactic sugar to make using sub-ranges
        -:   52:/// in for loops a bit easier. Analogous to std::make_pair().
        -:   53:template <class T> iterator_range<T> make_range(T x, T y) {
        -:   54:  return iterator_range<T>(std::move(x), std::move(y));
        -:   55:}
        -:   56:
        -:   57:template <typename T> iterator_range<T> make_range(std::pair<T, T> p) {
        -:   58:  return iterator_range<T>(std::move(p.first), std::move(p.second));
        -:   59:}
        -:   60:
        -:   61:}
        -:   62:
        -:   63:#endif
