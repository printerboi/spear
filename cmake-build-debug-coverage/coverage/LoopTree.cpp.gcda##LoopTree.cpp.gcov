        -:    0:Source:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/src/main/include/LoopTree/LoopTree.cpp
        -:    0:Graph:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/src/main/include/LoopTree/LoopTree.cpp.gcno
        -:    0:Data:/home/maximiliank/Dokumente/workbench/Bachelor/bachelorarbeit/cmake-build-debug-coverage/CMakeFiles/ba.dir/src/main/include/LoopTree/LoopTree.cpp.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:#include "LoopTree.h"
        -:    3:
        -:    4:
function _ZN8LoopTreeC2EPN4llvm4LoopESt6vectorIS2_SaIS2_EEP11LLVMHandler called 0 returned 0% blocks executed 0%
    #####:    5:LoopTree::LoopTree(llvm::Loop *main, std::vector<llvm::Loop *> subloops, LLVMHandler *handler){
    %%%%%:    5-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:    6:    this->mainloop = main;
    #####:    7:    this->handler = handler;
        -:    8:
        -:    9:    //Iterate over the given Subloops
    #####:   10:    for (auto sl : subloops) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   10-block  0
Aufruf  2 niemals ausgeführt
    %%%%%:   10-block  1
Aufruf  3 niemals ausgeführt
    %%%%%:   10-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
        -:   11:        //For each subloop create a new LoopTree with parameters regarding this subloop
    #####:   12:        LoopTree *Slt = new LoopTree(sl, sl->getSubLoops(), this->handler);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   12-block  0
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    %%%%%:   12-block  1
Aufruf  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
Zweig  9 niemals ausgeführt
    %%%%%:   12-block  2
Aufruf 10 niemals ausgeführt
    $$$$$:   12-block  3
Aufruf 11 niemals ausgeführt
    $$$$$:   12-block  4
    $$$$$:   12-block  5
Zweig 12 niemals ausgeführt
Zweig 13 niemals ausgeführt
    $$$$$:   12-block  6
Aufruf 14 niemals ausgeführt
        -:   13:
        -:   14:        //Add the subtree to the vector of subtrees
    #####:   15:        this->subTrees.push_back(Slt);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:   16:    }
        -:   17:
        -:   18:    //Calculate the basic blocks only contained in this loop, excluding all blocks present in the subtrees
    #####:   19:    std::vector<llvm::BasicBlock *> calcedBlocks = calcBlocks();
    %%%%%:   19-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:   20:    this->blocks.insert(this->blocks.end(), calcedBlocks.begin(), calcedBlocks.end());
    %%%%%:   20-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    $$$$$:   20-block  1
    $$$$$:   20-block  2
        -:   21:
        -:   22:    //Calculate the iterations of this loop
    #####:   23:    this->iterations = handler->getLoopUpperBound(this->mainloop);
    %%%%%:   23-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:   24:}
    %%%%%:   24-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:   24-block  1
Aufruf  1 niemals ausgeführt
    $$$$$:   24-block  2
Aufruf  2 niemals ausgeführt
    $$$$$:   24-block  3
Aufruf  3 niemals ausgeführt
        -:   25:
        -:   26:
function _ZN8LoopTree10calcBlocksEv called 0 returned 0% blocks executed 0%
    #####:   27:std::vector<llvm::BasicBlock *> LoopTree::calcBlocks(){
        -:   28:    //All the blocks present in the loop
    #####:   29:    std::vector<llvm::BasicBlock *> initBlocks = this->mainloop->getBlocksVector();
    %%%%%:   29-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
        -:   30:    //Vector for storing the combined blocks of the subloops
    #####:   31:    std::vector<llvm::BasicBlock *> unized;
    %%%%%:   31-block  0
Aufruf  0 niemals ausgeführt
        -:   32:    //Vector for string the calculated difference of this loop and its subloops
    #####:   33:    std::vector<llvm::BasicBlock *> diff;
Aufruf  0 niemals ausgeführt
        -:   34:
        -:   35:    //Test the leafness of the current LoopTree
    #####:   36:    if( !this->isLeaf() ){
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:   37:        //If we are not in a leaf, we have to calculate the blocks of this tree by building the set-difference
        -:   38:        //of all subloops and the initblocks present in this subloop
    #####:   39:        for(auto subloop : this->subTrees){
    %%%%%:   39-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   39-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:   39-block  2
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -:   40:            //Calculate the union of all subloops
    #####:   41:            unized.insert(unized.end(), subloop->mainloop->getBlocksVector().begin(), subloop->mainloop->getBlocksVector().end());
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    %%%%%:   41-block  0
Aufruf  9 niemals ausgeführt
    $$$$$:   41-block  1
    $$$$$:   41-block  2
        -:   42:        }
        -:   43:
        -:   44:        //Iterate over the blocks in this loop. Find the blocks that are not present in the union but in this loop
    #####:   45:        for (auto &BB : initBlocks) {
    %%%%%:   45-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   45-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:   45-block  2
Aufruf  3 niemals ausgeführt
    %%%%%:   45-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:   46:            if(std::find(unized.begin(), unized.end(), BB) == unized.end()){
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:   46-block  0
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    $$$$$:   46-block  1
    $$$$$:   46-block  2
    #####:   47:                diff.insert(diff.end(), BB);
    %%%%%:   47-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Zweig  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
    %%%%%:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
        -:   48:            }
        -:   49:        }
        -:   50:
    #####:   51:        return diff;
    %%%%%:   51-block  0
Aufruf  0 niemals ausgeführt
        -:   52:    }else{
        -:   53:        //If we are in a leaf, we can simply return the init blocks, as there are no subloops
    #####:   54:        return initBlocks;
    %%%%%:   54-block  0
Aufruf  0 niemals ausgeführt
        -:   55:    }
    #####:   56:}
    %%%%%:   56-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
    $$$$$:   56-block  1
Aufruf  3 niemals ausgeführt
    $$$$$:   56-block  2
Aufruf  4 niemals ausgeführt
    $$$$$:   56-block  3
Aufruf  5 niemals ausgeführt
        -:   57:
function _ZN8LoopTree6isLeafEv called 0 returned 0% blocks executed 0%
    #####:   58:bool LoopTree::isLeaf() {
    #####:   59:    return this->subTrees.empty();
    %%%%%:   59-block  0
Aufruf  0 niemals ausgeführt
        -:   60:}
        -:   61:
function _ZN8LoopTree13printPreOrderEv called 0 returned 0% blocks executed 0%
    #####:   62:void LoopTree::printPreOrder() {
        -:   63:
    #####:   64:    if (this->isLeaf()) {
    %%%%%:   64-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:   65:        llvm::outs() << "-------------------------------------------\n";
    %%%%%:   65-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:   66:        llvm::outs() << this->mainloop->getName() << " (LEAF) " << "i=" << this->iterations << "\n";
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Aufruf  6 niemals ausgeführt
    #####:   67:        llvm::outs() << "-------------------------------------------\n";
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:   68:        for (auto bb : this->blocks) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   68-block  0
Aufruf  2 niemals ausgeführt
    %%%%%:   68-block  1
Aufruf  3 niemals ausgeführt
    %%%%%:   68-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:   69:            bb->print(llvm::outs());
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   69-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -:   70:        }
        -:   71:    }else{
    #####:   72:        for (auto slt: this->subTrees) {
    %%%%%:   72-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   72-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:   72-block  2
Aufruf  3 niemals ausgeführt
    %%%%%:   72-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:   73:            slt->printPreOrder();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:   74:        }
    #####:   75:        llvm::outs() << "-------------------------------------------\n";
    %%%%%:   75-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:   76:        llvm::outs() << this->mainloop->getName() << " (NODE) "<< "i=" << this->iterations  << "\n";
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Aufruf  4 niemals ausgeführt
Aufruf  5 niemals ausgeführt
Aufruf  6 niemals ausgeführt
    #####:   77:        llvm::outs() << "-------------------------------------------\n";
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    #####:   78:        for (auto bb : this->blocks) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   78-block  0
Aufruf  2 niemals ausgeführt
    %%%%%:   78-block  1
Aufruf  3 niemals ausgeführt
    %%%%%:   78-block  2
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:   79:            bb->print(llvm::outs());
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   79-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
        -:   80:        }
        -:   81:
        -:   82:    }
    #####:   83:}
    %%%%%:   83-block  0
        -:   84:
function _ZN8LoopTree10calcEnergyEv called 0 returned 0% blocks executed 0%
    #####:   85:double LoopTree::calcEnergy() {
    #####:   86:    double sum = 0;
    #####:   87:    double result = 0;
        -:   88:
    #####:   89:    if(this->isLeaf()){
    %%%%%:   89-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:   90:        for (auto &BB : this->blocks) {
    %%%%%:   90-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   90-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:   90-block  2
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####:   91:            sum = sum + this->handler->getBasicBlockSum(*BB);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   91-block  0
Aufruf  3 niemals ausgeführt
        -:   92:        }
        -:   93:
    #####:   94:        result = sum * (double) this->iterations;
        -:   95:
    #####:   96:        return result;
    %%%%%:   96-block  0
        -:   97:    }else{
    #####:   98:        for (auto &BB : this->blocks) {
    %%%%%:   98-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:   98-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:   98-block  2
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####:   99:            sum = sum + this->handler->getBasicBlockSum(*BB);
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:   99-block  0
Aufruf  3 niemals ausgeführt
        -:  100:        }
        -:  101:
    #####:  102:        for (auto subTree : this->subTrees) {
    %%%%%:  102-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:  102-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:  102-block  2
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    #####:  103:            sum = sum + subTree->calcEnergy();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  103-block  0
Aufruf  3 niemals ausgeführt
        -:  104:        }
        -:  105:
    #####:  106:        result = sum * (double) this->iterations;
        -:  107:
    #####:  108:        return result;
    %%%%%:  108-block  0
        -:  109:    }
        -:  110:}
        -:  111:
function _ZN8LoopTree10getLatchesEv called 0 returned 0% blocks executed 0%
    #####:  112:std::vector<llvm::BasicBlock *> LoopTree::getLatches() {
    #####:  113:    if(this->isLeaf()){
    %%%%%:  113-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  114:        std::vector<llvm::BasicBlock *> latches;
    %%%%%:  114-block  0
Aufruf  0 niemals ausgeführt
    #####:  115:        latches.push_back(this->mainloop->getLoopLatch());
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  115-block  0
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    $$$$$:  115-block  1
    #####:  116:        return latches;
    %%%%%:  116-block  0
Aufruf  0 niemals ausgeführt
    #####:  117:    }else{
Aufruf  0 niemals ausgeführt
    $$$$$:  117-block  0
Aufruf  1 niemals ausgeführt
    #####:  118:        std::vector<llvm::BasicBlock *> latches;
    %%%%%:  118-block  0
Aufruf  0 niemals ausgeführt
        -:  119:
    #####:  120:        for (auto sT : this->subTrees) {
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:  120-block  0
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
    %%%%%:  120-block  1
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  121:            std::vector<llvm::BasicBlock *> calced = sT->getLatches();
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    #####:  122:            calced.push_back(this->mainloop->getLoopLatch());
    %%%%%:  122-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
    %%%%%:  122-block  1
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    $$$$$:  122-block  2
    #####:  123:            for(auto &lb : calced){
    %%%%%:  123-block  0
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
    %%%%%:  123-block  1
Aufruf  2 niemals ausgeführt
    %%%%%:  123-block  2
Aufruf  3 niemals ausgeführt
    %%%%%:  123-block  3
Aufruf  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
Zweig  6 niemals ausgeführt
    #####:  124:                if(std::find(latches.begin(), latches.end(), lb) == latches.end()){
Aufruf  0 niemals ausgeführt
Aufruf  1 niemals ausgeführt
Aufruf  2 niemals ausgeführt
Aufruf  3 niemals ausgeführt
Zweig  4 niemals ausgeführt
Zweig  5 niemals ausgeführt
    %%%%%:  124-block  0
Aufruf  6 niemals ausgeführt
Zweig  7 niemals ausgeführt
Zweig  8 niemals ausgeführt
    $$$$$:  124-block  1
    $$$$$:  124-block  2
    #####:  125:                    latches.push_back(lb);
    %%%%%:  125-block  0
Aufruf  0 niemals ausgeführt
Zweig  1 niemals ausgeführt
Zweig  2 niemals ausgeführt
        -:  126:                }
        -:  127:            }
    #####:  128:        }
    %%%%%:  128-block  0
Aufruf  0 niemals ausgeführt
    $$$$$:  128-block  1
Aufruf  1 niemals ausgeführt
        -:  129:
    #####:  130:        return latches;
    %%%%%:  130-block  0
Aufruf  0 niemals ausgeführt
    #####:  131:    }
Aufruf  0 niemals ausgeführt
    $$$$$:  131-block  0
Aufruf  1 niemals ausgeführt
        -:  132:}
